<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[2017-07-06-ECMAScript2016规范理解(1)-this]]></title>
      <url>http://localhost:4000/blog/2017/07/06/2017-07-06-ECMAScript2016%E8%A7%84%E8%8C%83%E7%90%86%E8%A7%A3(1)-this/</url>
      <content type="html"><![CDATA[<p>对于this的解读已经非常多了，是一个已经讲烂了的话题，也是面试中一定会问的题目。you don‘t know js中对于this的总结也是非常全面，我看很多博客的内容其实都是这本书上的。但是我想从规范的角度去理解this，而不是从别人总结好的几条规律来理解。（我指的规范是<a href="http://www.ecma-international.org/ecma-262/7.0/index.html" target="_blank" rel="external">ECMAScript2016</a>），写这篇文章也是我对内的一次<a href="https://ldllidonglin.github.io/learn-output/slides/ECMAScript.html" target="_blank" rel="external">分享</a>其中关于this的总结。<br><a id="more"></a></p>
<h2 id="this-是什么？"><a href="#this-是什么？" class="headerlink" title="this 是什么？"></a>this 是什么？</h2><p>规范中，有标明this是什么的地方一共有三处:</p>
<ul>
<li>关键字（11.6.2.1）</li>
<li>主值表达式（12.2.2）</li>
<li>词法环境中的环境记录项的属性（8.1.1）</li>
</ul>
<p>this是主值表达式，从这个定义出发，我们可以知道如何确定this的值，而他是词法环境中环境记录的一个属性就决定了其值是如何赋值的，以及从哪里去获取它的值。</p>
<h2 id="this表达式的执行过程"><a href="#this表达式的执行过程" class="headerlink" title="this表达式的执行过程"></a>this表达式的执行过程</h2><p>规范12.2.2.1<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">PrimaryExpression:<span class="keyword">this</span></div><div class="line">    <span class="keyword">Return</span> ? ResolveThisBinding( ).</div></pre></td></tr></table></figure></p>
<p>规范的8.3.4 定义了ResolveThisBinding函数<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Let envRec be GetThisEnvironment( ).</div><div class="line">Return ? envRec.GetThisBinding().</div></pre></td></tr></table></figure></p>
<p>这里又涉及到两个函数，GetThisEnvironment和envRec.GetThisBinding()。<br>规范的8.3.3 定义了GetThisEnvironment<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Let</span> lex be the running execution context<span class="comment">'s LexicalEnvironment.</span></div><div class="line">Repeat:</div><div class="line">    <span class="keyword">Let</span> envRec be lex<span class="comment">'s EnvironmentRecord.</span></div><div class="line">    <span class="keyword">Let</span> exists be envRec.HasThisBinding().</div><div class="line">    <span class="keyword">If</span> exists <span class="keyword">is</span> <span class="literal">true</span>, <span class="keyword">return</span> envRec.</div><div class="line">    <span class="keyword">Let</span> outer be the value <span class="keyword">of</span> lex<span class="comment">'s outer environment reference.</span></div><div class="line">    <span class="keyword">Let</span> lex be outer.</div></pre></td></tr></table></figure></p>
<p>上面的意思就是，从当前执行上下文的词法环境开始，不断往上寻找含有this值的词法环境，直到找到为止，这个和原型链上属性的查找模式一样。一定会找到含有this的词法环境，因为规范规定，最外层的词法环境就是全局词法环境，而全局词法环境是一定有this值的。</p>
<p>找到了含有this的词法环境后，就是执行envRec.GetThisBinding()。规范规定一共有5中词法环境，其中声明式词法环境、对象式词法环境是没有this的，模块式词法环境的this值是undefined，全局词法环境的this值就是[[GlobalThisValue]]这个内部值，这个内部值有宿主环境提供，众所周知，在浏览器环境下this绑定的就是window对象。所以只剩下函数式词法环境的值了</p>
<p>8.1.1.3.4 定义了这个函数的执行过程<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">Let</span> envRec be the function <span class="symbol">Environment</span> <span class="symbol">Record</span> for which the method was invoked.</div><div class="line"><span class="symbol">Assert</span>: envRec.[[<span class="symbol">ThisBindingStatus</span>]] is not <span class="string">"lexical"</span>.</div><div class="line"><span class="symbol">If</span> envRec.[[<span class="symbol">ThisBindingStatus</span>]] is <span class="string">"uninitialized"</span>, throw a <span class="symbol">ReferenceError</span> exception.</div><div class="line"><span class="symbol">Return</span> envRec.[[<span class="symbol">ThisValue</span>]].</div></pre></td></tr></table></figure></p>
<h2 id="this的使用场景"><a href="#this的使用场景" class="headerlink" title="this的使用场景"></a>this的使用场景</h2><p>前面讲了这么多，就是说this是如何取值的。同时规范也定义了this是词法环境中环境记录的一个属性，在初始化一个词法环境的时候，都会对this值进行初始化，也就是所谓的this绑定。所以就需要先明白this一共有多少种使用场景，根据使用场景来确定this值是如何进行绑定的。</p>
<h3 id="全局环境"><a href="#全局环境" class="headerlink" title="全局环境"></a>全局环境</h3><p>当JavaScript代码开始执行时，就会初始化一个全局词法环境，而全局词法环境中的this是由宿主环境定义的，浏览器环境下就是window，nodejs环境下就是global</p>
<h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><p>上面也提到了，this只在全局环境和函数词法环境有定义。函数环境下this的绑定会更复杂一些，因为函数可以当作构造函数，也能直接调用，并且还有call\apply，es6的箭头函数、es6的class等情况。</p>
<h4 id="普通函数调用"><a href="#普通函数调用" class="headerlink" title="普通函数调用"></a>普通函数调用</h4><p>首先需要先明确一点，所有的函数最终执行，都是调用的函数对象的[[Call]]方法，调用方式为[[Call]] ( thisArgument, argumentsList)。规范的9.2.1中定义了[[Call]]方法的执行过程：</p>
<ul>
<li>创建一个新的执行上下文，并且执行上下文的词法环境是函数词法环境</li>
<li>给当前的执行上下文绑定this<ul>
<li>如果函数的[[thisMode]]为lexical，返回</li>
<li>如果是严格模式，this值为thisArgument，返回</li>
<li>如果thisArgument是null或者undefined，this为全局环境的this值</li>
<li>否则设置this值为thisArgument</li>
</ul>
</li>
<li>执行函数体</li>
<li>遇到this时，是执行this表达式</li>
</ul>
<p>从上面的过程中可以得到三条非常有用的信息：</p>
<ul>
<li>函数执行的时候，已经确定this值了，并且会传给[[Call]]函数，只是在执行的时候进行绑定，从而使得this表达式执行的时候能取到this值。</li>
<li>箭头函数的[[thisMode]]为lexical，所以箭头函数执行时，是不绑定this值的。</li>
<li>严格模式下，任何值都会被绑定为this，非严格模式，绑定undefined和null，会被绑定为全局环境的this值。</li>
</ul>
<h5 id="函数执行前如何确定this"><a href="#函数执行前如何确定this" class="headerlink" title="函数执行前如何确定this"></a>函数执行前如何确定this</h5><p>普通函数的调用方式，属于Left-Hand-Side Expressions中的Call Expression：MemberExpression Arguments，在12.3.4中规定了其执行过程，关键就是确定MemberExpression的执行结果，从而确定this值。<br><figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="type">Let</span> <span class="meta">ref</span> <span class="keyword">be</span> the result of evaluating <span class="type">MemberExpression</span>.</div><div class="line"><span class="type">Let</span> func <span class="keyword">be</span> ? <span class="type">GetValue</span>(<span class="meta">ref</span>).</div><div class="line"><span class="type">If</span> <span class="type">Type</span>(<span class="meta">ref</span>) <span class="keyword">is</span> <span class="type">Reference</span> <span class="keyword">and</span> <span class="type">IsPropertyReference</span>(<span class="meta">ref</span>) <span class="keyword">is</span> <span class="literal">false</span> <span class="keyword">and</span> <span class="type">GetReferencedName</span>(<span class="meta">ref</span>) <span class="keyword">is</span> <span class="string">"eval"</span>, <span class="keyword">then</span></div><div class="line">  <span class="type">If</span> <span class="type">SameValue</span>(func, %eval%) <span class="keyword">is</span> <span class="literal">true</span>, <span class="keyword">then</span></div><div class="line">    <span class="type">Let</span> argList <span class="keyword">be</span> ? <span class="type">ArgumentListEvaluation</span>(<span class="type">Arguments</span>).</div><div class="line">    <span class="type">If</span> argList has no elements, <span class="keyword">return</span> undefined.</div><div class="line">    <span class="type">Let</span> evalText <span class="keyword">be</span> the first element of argList.</div><div class="line">    <span class="type">If</span> the source code matching <span class="literal">this</span> <span class="type">CallExpression</span> <span class="keyword">is</span> strict code, <span class="keyword">let</span> strictCaller <span class="keyword">be</span> <span class="literal">true</span>. <span class="type">Otherwise</span> <span class="keyword">let</span> strictCaller <span class="keyword">be</span> <span class="literal">false</span>.</div><div class="line">    <span class="type">Let</span> evalRealm <span class="keyword">be</span> the current <span class="type">Realm</span> <span class="type">Record</span>.</div><div class="line">    <span class="type">Return</span> ? <span class="type">PerformEval</span>(evalText, evalRealm, strictCaller, <span class="literal">true</span>).</div><div class="line"><span class="type">If</span> <span class="type">Type</span>(<span class="meta">ref</span>) <span class="keyword">is</span> <span class="type">Reference</span>, <span class="keyword">then</span></div><div class="line">  <span class="type">If</span> <span class="type">IsPropertyReference</span>(<span class="meta">ref</span>) <span class="keyword">is</span> <span class="literal">true</span>, <span class="keyword">then</span></div><div class="line">    <span class="type">Let</span> thisValue <span class="keyword">be</span> <span class="type">GetThisValue</span>(<span class="meta">ref</span>).</div><div class="line">  <span class="type">Else</span>, the base of <span class="meta">ref</span> <span class="keyword">is</span> an <span class="type">Environment</span> <span class="type">Record</span></div><div class="line">    <span class="type">Let</span> refEnv <span class="keyword">be</span> <span class="type">GetBase</span>(<span class="meta">ref</span>).</div><div class="line">    <span class="type">Let</span> thisValue <span class="keyword">be</span> refEnv.<span class="type">WithBaseObject</span>().</div><div class="line"><span class="type">Else</span> <span class="type">Type</span>(<span class="meta">ref</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="type">Reference</span>,</div><div class="line">  <span class="type">Let</span> thisValue <span class="keyword">be</span> undefined.</div><div class="line"><span class="type">Let</span> thisCall <span class="keyword">be</span> <span class="literal">this</span> <span class="type">CallExpression</span>.</div><div class="line"><span class="type">Let</span> tailCall <span class="keyword">be</span> <span class="type">IsInTailPosition</span>(thisCall).</div><div class="line"><span class="type">Return</span> ? <span class="type">EvaluateDirectCall</span>(func, thisValue, <span class="type">Arguments</span>, tailCall)</div></pre></td></tr></table></figure></p>
<h5 id="b-方式"><a href="#b-方式" class="headerlink" title="b()方式"></a>b()方式</h5><ul>
<li>语法规则为：MemberExpression Arguments，其中b为MemberExpression</li>
<li>MemberExpression中包含PrimaryExpression，PrimaryExpression包含IdentifierReference，所以最终是执行IdentifierReference，在12.1中有定义</li>
<li>最终是ResolveBinding -&gt; GetIdentifierReference，最终返回一个引用类型，baseValue是环境记录项</li>
<li>所以thisValue be refEnv.WithBaseObject()</li>
<li>ResolveBinding -&gt; GetIdentifierReference这个过程最终会确定refEnv为具有b的绑定的词法环境，如果是全局词法环境的话，WithBaseObject()的结果为undefined</li>
</ul>
<h5 id="a-b-方式"><a href="#a-b-方式" class="headerlink" title="a.b()方式"></a>a.b()方式</h5><ul>
<li>语法规则为：MemberExpression Arguments，其中a.b为MemberExpression</li>
<li>MemberExpression中包含MemberExpression.IdentifierName是Property Accessors，在12.3.2.1中定义其执行过程</li>
<li>执行结果ref是返回一个Reference类型，baseValue为a,是一个对象，所以IsPropertyReference(ref) 为 true，然后thisValue 为 GetThisValue(ref)</li>
<li>GetThisValue返回的是ref的base，就是a对象，所以this就是a</li>
</ul>
<h5 id="其他方式"><a href="#其他方式" class="headerlink" title="其他方式"></a>其他方式</h5><p>还有很多函数调用的方式，但是分析方法都是一样的，先确定调用的表达式类型，然后去看返回的ref值是什么，从而确定this值，可以参考</p>
<ul>
<li><a href="http://www.baizhiedu.com/1587.html" target="_blank" rel="external">参考1</a></li>
<li><a href="http://www.smartcitychina.cn/QianYanJiShu/2016-09/7824.html" target="_blank" rel="external">参考2</a></li>
</ul>
<h4 id="call-apply"><a href="#call-apply" class="headerlink" title="call\apply"></a>call\apply</h4><p>在19.2.3中定义了Function.prototype的属性，其中就定义了call和apply是如何执行的。如Function.prototype.apply ( thisArg, argArray ):<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">If</span> IsCallable(<span class="function"><span class="keyword">func</span>) <span class="title">is</span> <span class="title">false</span>, <span class="title">throw</span> <span class="title">a</span> <span class="title">TypeError</span> <span class="title">exception</span>.</span></div><div class="line"><span class="keyword">If</span> argArray is <span class="literal">null</span> <span class="literal">or</span> undefined, <span class="keyword">then</span></div><div class="line">    Perform PrepareForTailCall().</div><div class="line">    <span class="keyword">Return</span> ? <span class="built_in">Call</span>(<span class="function"><span class="keyword">func</span>, <span class="title">thisArg</span>).</span></div><div class="line">Let argList be ? CreateListFromArrayLike(argArray).</div><div class="line">Perform PrepareForTailCall().</div><div class="line"><span class="keyword">Return</span> ? <span class="built_in">Call</span>(<span class="function"><span class="keyword">func</span>, <span class="title">thisArg</span>, <span class="title">argList</span>).</span></div></pre></td></tr></table></figure></p>
<p>可见最终代码的执行其实还是回到F.[[Call]]，只是this值是有明确指定的thisArg参数。</p>
<h4 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h4><p>19.2.3.2中定义了bind函数的执行过程<br><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Let</span> Target be the this value.</div><div class="line"><span class="keyword">If</span> IsCallable(Target) <span class="keyword">is</span> <span class="literal">false</span>, throw a TypeError exception.</div><div class="line"><span class="keyword">Let</span> args be a <span class="keyword">new</span> (possibly <span class="literal">empty</span>) List consisting of all of the argument values provided after thisArg <span class="keyword">in</span> order.</div><div class="line"><span class="keyword">Let</span> F be ? BoundFunctionCreate(Target, thisArg, args).</div><div class="line"><span class="keyword">Let</span> targetHasLength be ? HasOwnProperty(Target, <span class="string">"length"</span>).</div><div class="line"><span class="keyword">If</span> targetHasLength <span class="keyword">is</span> <span class="literal">true</span>, <span class="keyword">then</span></div><div class="line">    <span class="keyword">Let</span> targetLen be ? <span class="keyword">Get</span>(Target, <span class="string">"length"</span>).</div><div class="line">    <span class="keyword">If</span> Type(targetLen) <span class="keyword">is</span> <span class="keyword">not</span> Number, <span class="keyword">let</span> L be <span class="number">0.</span></div><div class="line">    <span class="keyword">Else</span>,</div><div class="line">    <span class="keyword">Let</span> targetLen be ToInteger(targetLen).</div><div class="line">    <span class="keyword">Let</span> L be the larger of <span class="number">0</span> <span class="keyword">and</span> the result of targetLen minus the number of elements of args.</div><div class="line"><span class="keyword">Else</span> <span class="keyword">let</span> L be <span class="number">0.</span></div><div class="line">Perform ! DefinePropertyOrThrow(F, <span class="string">"length"</span>, PropertyDescriptor &#123;[[Value]]: L, [[Writable]]: <span class="literal">false</span>, [[Enumerable]]: <span class="literal">false</span>, [[Configurable]]: <span class="literal">true</span>&#125;).</div><div class="line"><span class="keyword">Let</span> targetName be ? <span class="keyword">Get</span>(Target, <span class="string">"name"</span>).</div><div class="line"><span class="keyword">If</span> Type(targetName) <span class="keyword">is</span> <span class="keyword">not</span> <span class="built_in">String</span>, <span class="keyword">let</span> targetName be the <span class="literal">empty</span> <span class="built_in">string</span>.</div><div class="line">Perform SetFunctionName(F, targetName, <span class="string">"bound"</span>).</div><div class="line">Return F.</div></pre></td></tr></table></figure></p>
<p>也就是说bind的返回结果是一个BoundFunction，这是一个Exotic Objects。</p>
<h5 id="BoundFunctionCreate-targetFunction-boundThis-boundArgs"><a href="#BoundFunctionCreate-targetFunction-boundThis-boundArgs" class="headerlink" title="BoundFunctionCreate (targetFunction, boundThis, boundArgs)"></a>BoundFunctionCreate (targetFunction, boundThis, boundArgs)</h5><p>在9.4.1.3中有定义BoundFunctionCreate的执行过程。会把boundThis值设为[[BoundThis]]这个内部属性。<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Assert: Type(targetFunction) <span class="keyword">is</span> <span class="built_in">Object</span>.</div><div class="line"><span class="keyword">Let</span> proto be ? targetFunction.[[GetPrototypeOf]]().</div><div class="line"><span class="keyword">Let</span> obj be a newly created <span class="built_in">object</span>.</div><div class="line"><span class="keyword">Set</span> obj<span class="comment">'s essential internal methods to the default ordinary object definitions specified in 9.1.</span></div><div class="line"><span class="keyword">Set</span> the [[<span class="keyword">Call</span>]] internal method <span class="keyword">of</span> obj <span class="keyword">as</span> described <span class="keyword">in</span> <span class="number">9.4</span><span class="number">.1</span><span class="number">.1</span>.</div><div class="line"><span class="keyword">If</span> targetFunction has a [[Construct]] internal method, <span class="keyword">then</span></div><div class="line"><span class="keyword">Set</span> the [[Construct]] internal method <span class="keyword">of</span> obj <span class="keyword">as</span> described <span class="keyword">in</span> <span class="number">9.4</span><span class="number">.1</span><span class="number">.2</span>.</div><div class="line"><span class="keyword">Set</span> the [[Prototype]] internal slot <span class="keyword">of</span> obj <span class="keyword">to</span> proto.</div><div class="line"><span class="keyword">Set</span> the [[Extensible]] internal slot <span class="keyword">of</span> obj <span class="keyword">to</span> <span class="literal">true</span>.</div><div class="line"><span class="keyword">Set</span> the [[BoundTargetFunction]] internal slot <span class="keyword">of</span> obj <span class="keyword">to</span> targetFunction.</div><div class="line"><span class="keyword">Set</span> the [[BoundThis]] internal slot <span class="keyword">of</span> obj <span class="keyword">to</span> the value <span class="keyword">of</span> boundThis.</div><div class="line"><span class="keyword">Set</span> the [[BoundArguments]] internal slot <span class="keyword">of</span> obj <span class="keyword">to</span> boundArgs.</div><div class="line"><span class="keyword">Return</span> obj.</div></pre></td></tr></table></figure></p>
<p>之前已经说明，任何函数执行都是执行自身的[[Call]]方法，而BoundFunction重定义了其[[Call]]属性，其执行过程如下：<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Let</span> target be the value <span class="keyword">of</span> F<span class="comment">'s [[BoundTargetFunction]] internal slot.</span></div><div class="line"><span class="keyword">Let</span> boundThis be the value <span class="keyword">of</span> F<span class="comment">'s [[BoundThis]] internal slot.</span></div><div class="line"><span class="keyword">Let</span> boundArgs be the value <span class="keyword">of</span> F<span class="comment">'s [[BoundArguments]] internal slot.</span></div><div class="line"><span class="keyword">Let</span> args be a <span class="keyword">new</span> list containing the same values <span class="keyword">as</span> the list boundArgs <span class="keyword">in</span> the same <span class="keyword">order</span> followed <span class="keyword">by</span> the same values <span class="keyword">as</span> the list argumentsList <span class="keyword">in</span> the same <span class="keyword">order</span>.</div><div class="line"><span class="keyword">Return</span> ? <span class="keyword">Call</span>(target, boundThis, args).</div></pre></td></tr></table></figure></p>
<p>也就是说会把BoundFunction的[[BoundThis]]值作为this值传入Call(target, boundThis, args)，而Call其实就是执行F.<a href="V, argumentsList">[Call]</a>.最终执行的函数代码还是之前被包裹的那个函数，从这个过程就会发现，一个函数bind得到的函数，再bind传入的this值不会传到最终执行的过程，举例说明：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function a()&#123;</div><div class="line">    console.log(this.info)<span class="comment">;</span></div><div class="line">&#125;<span class="comment">;</span></div><div class="line">var <span class="keyword">b </span>= a.<span class="keyword">bind(&#123;info: </span><span class="number">1</span>&#125;)<span class="comment">;</span></div><div class="line">var c = <span class="keyword">b.bind(&#123;info: </span><span class="number">2</span>&#125;)<span class="comment">;</span></div><div class="line"><span class="keyword">b();</span></div><div class="line">c()<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>最终结果是输出两个1。</p>
<ul>
<li>b就是一个BoundFunction，所以b() -&gt; b.[[Call]] -&gt; Call(a, {info: 1}, args) -&gt; a.[[Call]] ({info: 1});</li>
<li>c() -&gt; c.[[Call]] -&gt; Call(b, {info: 2}) -&gt; b.[[Call]] -&gt; Call(a, {info: 1}, args) -&gt; a.[[Call]] ({info: 1});<br>所以最终c()输出的还是1，因为BoundFunction的[[Call]]方法只会取其自身绑定的[[BoundThis]]作为this值。</li>
</ul>
<h4 id="构造函数调用"><a href="#构造函数调用" class="headerlink" title="构造函数调用"></a>构造函数调用</h4><p>所谓的构造函数调用，其实就是 new 表达式的执行过程，<a href="http://www.ecma-international.org/ecma-262/7.0/index.html#sec-new-operator" target="_blank" rel="external">12.3.3</a>定义了new表达式的执行过程。</p>
<ul>
<li>先获取函数的[[ConstructorKind]]属性，如果是base则用(fn.prototype||Object.prototype)为原型去创建对象o。</li>
<li>如果[[ConstructorKind]]是base，则把o对象绑定为当前执行上下文的this。</li>
<li>执行函数，获取返回值result</li>
<li>如果result的类型是return</li>
</ul>
<ul>
<li>如果其值的类型是Object，则返回result（任何函数，只要返回Object，就直接返回）</li>
<li>如果[[ConstructorKind]]是base，则返回对象o，（普通函数，如果返回值不是Object，则返回创建的o）</li>
<li>如果返回值不是undefined，抛出TypeError异常（是返回非object和undefined的值）</li>
<li>返回执行上下文中的this值（函数体中没有return语句）</li>
</ul>
<p><em>9.2 中规定[[ConstructorKind]]只有两种值，base和derived，derived就是指声明了继承的使用class语法得到的函数，剩下的就是base</em></p>
<p>从这个执行过程可以得到以下信息：</p>
<ul>
<li>es6+增加了class继承的语法糖，所以在new的过程中要判断继承和非继承两种情况。</li>
<li>声明了继承的class，不会去绑定this。</li>
<li>非继承的情况下，以fn.prototype为原型创建新对象o，把this值绑定为对象o。</li>
</ul>
<h5 id="子类构造函数调用super"><a href="#子类构造函数调用super" class="headerlink" title="子类构造函数调用super"></a>子类构造函数调用super</h5><p>super在规范也是关键字，super()构成superCall表达式，12.3.5中定义了其执行过程：<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Let</span> newTarget be GetNewTarget().</div><div class="line"><span class="keyword">If</span> newTarget <span class="keyword">is</span> undefined, <span class="keyword">throw</span> a ReferenceError exception.</div><div class="line"><span class="keyword">Let</span> func be ? GetSuperConstructor().</div><div class="line"><span class="keyword">Let</span> argList be ArgumentListEvaluation <span class="keyword">of</span> Arguments.</div><div class="line">ReturnIfAbrupt(argList).</div><div class="line"><span class="keyword">Let</span> result be ? Construct(func, argList, newTarget).</div><div class="line"><span class="keyword">Let</span> thisER be GetThisEnvironment( ).</div><div class="line"><span class="keyword">Return</span> ? thisER.BindThisValue(result).</div></pre></td></tr></table></figure></p>
<p>也就是，先获取父类的构造函数func，result为Construct(func, argList, newTarget)的结果，然后把当前词法环境绑定this为result。</p>
<h2 id="代码实战"><a href="#代码实战" class="headerlink" title="代码实战"></a>代码实战</h2><ul>
<li><p>第一题</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = &#123;</div><div class="line">    <span class="attr">b</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.c);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">c</span>: <span class="number">3</span></div><div class="line">&#125;</div><div class="line">a.b();</div><div class="line"><span class="keyword">new</span> a.b();</div></pre></td></tr></table></figure>
<p>  第一个输出是3，属于普通函数调用，好理解，第二个是undefined。因为new表达式的执行过程中，this是会被绑定为新创建的那个对象。</p>
</li>
<li><p>第二题</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> c = <span class="number">3</span>;</div><div class="line"><span class="keyword">var</span> b = &#123;</div><div class="line">    <span class="attr">d</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.c);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">c</span>: <span class="number">1</span></div><div class="line">&#125;</div><div class="line">b.d();</div><div class="line">b.d.call(&#123;<span class="attr">c</span>:<span class="number">4</span>&#125;);</div></pre></td></tr></table></figure>
<p>  两个输出都是3，因为箭头函数执行的时候，不会绑定this，所以b.d()执行的时候不会把b绑定为this，所以this执行的时候会往上查找，最终查找到全局环境。<br>  同样的，执行call，因为是箭头函数，同样的不会进行绑定。</p>
</li>
<li><p>第三题</p>
  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = &#123;<span class="keyword">this</span>: <span class="number">1</span>, b: <span class="number">2</span>&#125;;</div><div class="line"><span class="keyword">with</span>(a) &#123;</div><div class="line">    <span class="built_in">console</span>.log(b);</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  这个会先输出2，然后输出window。因为with语句会创建一个新的词法环境，而其词法环境为对象词法环境，对象词法环境是没有this值的，所以在执行this表达式的时候，找打的词法环境是外层词法环境，所以如果上述代码在全局环境下的话，结果是window</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> ECMAScript规范 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ECMAScript规范 </tag>
            
            <tag> this </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[你所不知道的JavaScript中卷（1）]]></title>
      <url>http://localhost:4000/blog/2017/02/16/2017-02-16-%E4%BD%A0%E6%89%80%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JavaScript%E4%B8%AD%E5%8D%B7%EF%BC%881%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="第一章-类型"><a href="#第一章-类型" class="headerlink" title="第一章 类型"></a>第一章 类型</h2><ul>
<li>变量没有类型，但他们持有的值有类型，类型定义了值的行为特征，typeof undefined和 undeclared虽然都返回Undefined。之所以typeof 未定义的变量不会报错，是因为<a href="https://tc39.github.io/ecma262/#sec-typeof-operator" target="_blank" rel="external">typeof操作符</a>会判断是否是未定义的变量，如果是，则直接返回”undefined”</li>
<li>typeof null === ‘object’<a id="more"></a>
<h2 id="第二章-值"><a href="#第二章-值" class="headerlink" title="第二章 值"></a>第二章 值</h2></li>
<li>数组，delete其中的值不会改变length</li>
<li>数组，添加字符串属性，不会改变length，除非是能转换成数字的字符串值</li>
<li>字符串的成员函数不会改变其原始值，而是创建并返回一个新的字符串。</li>
<li>数字中的‘.’运算符会被优先识别为数字常量的一部分，然后才是对象属性访问运算符，所以42.toFixed(3)会报语法错误。</li>
<li>如果想把代码中的值设为Undefined，可以使用void expression</li>
<li><p>window.isNaN是检查是否不是NaN，也不是数字，参数是string，也会返回true</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!<span class="built_in">Number</span>.isNaN) &#123;</div><div class="line">  <span class="built_in">Number</span>.isNaN = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> n !== n;</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>基本类型值是通过值复制来赋值/传递，而复合值（对象等）是通过引用复制来赋值/传递的</p>
</li>
</ul>
<h2 id="第三章-原生函数"><a href="#第三章-原生函数" class="headerlink" title="第三章 原生函数"></a>第三章 原生函数</h2><ul>
<li><p>原生函数就是说String,Array(),Number()之类的，尽量不要使用这些原生函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"a"</span>);<span class="keyword">typeof</span> a <span class="comment">// "object"</span></div><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>);</div><div class="line"><span class="keyword">if</span>(b) &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"会执行到这"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>创建Date对象必须使用new Date()，可以带参数，如果不用new，带的参数会被忽略，直接返回当前Unix时间的字符串</p>
</li>
<li>Function.prototype是一个空函数，RegExp.prototype是一个正则表达式，Array.prototype是一个数组</li>
</ul>
<h2 id="第四章-强制类型转换"><a href="#第四章-强制类型转换" class="headerlink" title="第四章 强制类型转换"></a>第四章 强制类型转换</h2><ul>
<li>undefined、function、symbol都是不安全的JSON值，JSON.string.ify时遇到这三个会自动忽略，如果在数组中，为了保证单元位置不变，会返回null。如果对象中定义了toJSON()方法，会先调用toJSON方法，然后再序列化</li>
<li>JSON.stringify有一个可选参数replacer，可以是数组或者函数，用来指定对象序列化过程中哪些对象的属性要被处理。如果是函数，针对某个属性返回undefined，该属性就会被忽略，还有一个space可选参数，正整数就是缩进的字符数，字符串的话前十个会被用来每一级的缩进</li>
<li>除了假值列表中的值，其他的都为true，假值列表是undefined、null、false、+0、-0、NaN、‘’;</li>
<li>假值对象转换为布尔值为true，比如Boolean(false)为true</li>
<li>~运算符也会导致强制类型转换，~x === -(x+1),所以~可以用在indexOf函数的结果，因为~-1 === 0 为false</li>
<li>||和&amp;&amp;只是返回两个操作数中的其中一个，并不是返回布尔值,||如果第一个为false,返回第二个值，否则返回第一个。&amp;&amp;如果第一个是false,返回第一个，否则返回第二个。在if等条件表达式中，最终会执行布尔值的隐式强制类型转换</li>
<li>Symbol类型可以被强制转换为String，但是隐式转换为String会报错，强制转换或者隐式转换为布尔值都会是true，不能转换为Number，显示和隐式都会报错</li>
<li>==操作符规则比较多，详细规则参见规范</li>
</ul>
<h2 id="第五章-语法"><a href="#第五章-语法" class="headerlink" title="第五章 语法"></a>第五章 语法</h2><ul>
<li><p>标签语句，下面语句是合法的，foo是语句bar()的标签</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attribute">foo</span>: <span class="built_in">bar</span>()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>利用标签语句可以实现goto的效果</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 标签为foo的循环</span></div><div class="line">  foo: <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++) &#123;</div><div class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">0</span>; j&lt;<span class="number">4</span>; j++) &#123;</div><div class="line">              <span class="keyword">if</span> ((i * j) &gt;= <span class="number">3</span>) &#123;</div><div class="line">                  <span class="built_in">console</span>.log( <span class="string">"stopping!"</span>, i, j );</div><div class="line">                  <span class="keyword">break</span> foo;</div><div class="line">              &#125;</div><div class="line">              <span class="built_in">console</span>.log( i, j );</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// 0 0</span></div><div class="line">      <span class="comment">// 0 1</span></div><div class="line">      <span class="comment">// 0 2</span></div><div class="line">      <span class="comment">// 0 3</span></div><div class="line">      <span class="comment">// 1 0</span></div><div class="line">      <span class="comment">// 1 1</span></div><div class="line">      <span class="comment">// 1 2</span></div><div class="line">      <span class="comment">// 停止！ 1 3</span></div></pre></td></tr></table></figure>
<p>这样就能实现跳出外层循环</p>
</li>
<li><p>{}即可以作为对象常量，也能作为代码块</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-attr">[]</span> + &#123;&#125; <span class="comment">// [object Object]</span></div><div class="line">&#123;&#125; + <span class="selector-attr">[]</span> <span class="comment">// 0</span></div></pre></td></tr></table></figure>
<p>因为第一句，{}被当做一个对象才操作，第二句{}被当作一个空的独立代码块，返回undefined，所以 + []结果是0</p>
</li>
<li><p>JavaScript语法中其实是没有else if的，我们常用的else if其实是如下形式：</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="comment">(a)</span> &#123;</div><div class="line">  <span class="comment">// ..</span></div><div class="line">&#125;</div><div class="line">else &#123;</div><div class="line">  <span class="keyword">if</span> <span class="comment">(b)</span> &#123;</div><div class="line">    <span class="comment">// ..</span></div><div class="line">  &#125;</div><div class="line">  else &#123;</div><div class="line">    <span class="comment">// ..</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence" target="_blank" rel="external">运算符优先级</a></p>
</li>
<li>？：和=是右关联</li>
<li>自动插入分号是一种纠错机制，规范中规定的几种自动插入分号的情况，大部分都是因为如果缺少分号会报错。</li>
<li><p>需要注意函数里有带有return的try…catch语句，要明确哪个return先执行.try里的return会先执行，但是会执行完finally后，再返回函数的返回值</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> a = <span class="number">1</span></div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">      <span class="keyword">return</span> a += <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">finally</span> &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"finally"</span> + a );</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">console</span>.log( <span class="string">"never runs"</span> );</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log( foo() );</div><div class="line"><span class="comment">// finally2</span></div><div class="line"><span class="comment">// 2</span></div></pre></td></tr></table></figure>
</li>
<li><p>规范中定义了很多早期错误，这些都是在编译时的错误，没法被try…catch捕获，语法错误都是早期错误，有语法错误，程序是无法运行的。</p>
</li>
</ul>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ul>
<li>创建带有id属性的DOM元素时，也会创建同名的全局变量</li>
<li>内联代码的script标签没有charset属性</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端线上统计及监控]]></title>
      <url>http://localhost:4000/blog/2017/01/20/2017-01-20-%E5%89%8D%E7%AB%AF%E7%BA%BF%E4%B8%8A%E7%BB%9F%E8%AE%A1%E5%8F%8A%E7%9B%91%E6%8E%A7/</url>
      <content type="html"><![CDATA[<h1 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h1><p>第一次使用<a href="https://github.com/vuejs/vue" target="_blank" rel="external">vue.js</a>在移动端的生产环境，所以就想在这次开发中真实的测试一下Vue的性能到底如何<br><a id="more"></a></p>
<h2 id="统计方案"><a href="#统计方案" class="headerlink" title="统计方案"></a>统计方案</h2><ul>
<li>前端发请求，后端写日志，用storm实时处理统计<h2 id="前端发送请求"><a href="#前端发送请求" class="headerlink" title="前端发送请求"></a>前端发送请求</h2><figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">InfoStat</span> (<span class="params">type, info</span>) </span>&#123;</div><div class="line">    <span class="built_in">var</span> img = <span class="keyword">new</span> Image()</div><div class="line">    img.onload = img.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        img = <span class="literal">null</span></div><div class="line">    &#125;</div><div class="line">    <span class="built_in">var</span> <span class="built_in">url</span></div><div class="line">    <span class="keyword">if</span> (type === <span class="number">1</span>) &#123;</div><div class="line">        <span class="built_in">url</span> = <span class="string">'/api/stat/err?err='</span> + <span class="built_in">encodeURIComponent</span>(info)</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="number">2</span>) &#123;</div><div class="line">        <span class="built_in">url</span> = <span class="string">'/api/stat/time?time='</span> + info</div><div class="line">    &#125;</div><div class="line">    img.src = <span class="built_in">url</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="获取首屏时间"><a href="#获取首屏时间" class="headerlink" title="获取首屏时间"></a>获取首屏时间</h2><p>使用的方案比较粗糙，用的是<a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/performance" target="_blank" rel="external">performance API</a><br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var perf = (<span class="keyword">window</span>.performance ? <span class="keyword">window</span>.performance : <span class="keyword">window</span>.webkitPerformance)</div><div class="line"><span class="keyword">if</span> (perf &amp;&amp; perf.now) &#123;</div><div class="line">    InfoStat(<span class="number">2</span>, perf.now())</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    InfoStat(<span class="number">2</span>, <span class="number">1000.00</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在vue的主入口放置这么一行代码，所以这个时间应该是vue开始执行的时间，实际的首屏时间会比这个多一点，同时有一些低端手机不支持performance，就发送1000毫秒</p>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>总体来说，85%的请求是能在1秒内开始执行的，也就是说秒开率应该是大于70%的</p>
<h1 id="错误统计"><a href="#错误统计" class="headerlink" title="错误统计"></a>错误统计</h1><p>主要统计了两种错误，方案也比较粗糙。</p>
<ul>
<li>运行时错误，用的是window.onerror，但是这个方案有两个问题，导致根本没法实现错误分析<ul>
<li>和自身代码无关的运行时错误也会上报，比如各种厂商定制的浏览器、webview，尤其是微信内嵌的x5和搜狗浏览器，错误不断，不断上报导致收到的错误一堆，又没有任何价值</li>
<li>跨域限制，导致如果网站的域和js资源的域会跨域的话，收到的错误信息就是“script error.”, 没有任何信息。要想拿到详细的错误信息，必须让cdn改Access-Control-Allow-Origin头。</li>
</ul>
</li>
<li>异步请求失败<br>这也是为了监控网站正常服务，及早发现线上异常，如果线上接口挂了，那错误量一上去，后端实时统计的监控就会立即发报警短信。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>时间统计可以更细一些，错误监控window.onerror效果不太理想，我感觉还是比较大的用处是在用一些兼容性有问题，或者是比较容易出错的地方用try catch来捕获错误，然后上报，对业务的帮助比较大。</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 统计，错误监控 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[你所不知道的JavaScript上卷]]></title>
      <url>http://localhost:4000/blog/2016/12/05/2016-12-05-%E4%BD%A0%E6%89%80%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JavaScript%E4%B8%8A%E5%8D%B7/</url>
      <content type="html"><![CDATA[<h1 id="第一部分-作用域和闭包"><a href="#第一部分-作用域和闭包" class="headerlink" title="第一部分 作用域和闭包"></a>第一部分 作用域和闭包</h1><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><ul>
<li>源代码在执行前一般会有三个步骤：词法分析(分词0)、解析（构造AST）、代码生成（AST转成可执行代码）</li>
<li>作用域是一套规则，用于确定在何处以及如何查找变量，赋值就用LHS查询，取值就是RHS查询。不成功的RHS会抛ReferenceError<a id="more"></a>
<h2 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h2></li>
<li>词法作用域就是定义在词法阶段的作用域，是由写代码时将变量和块作用域写在哪里决定的。</li>
<li>eval和with会在运行时修改词法作用域，导致无法再词法分析阶段明确知道当前作用域会发生怎样的修改，所以引擎也就没法优化，导致性能下降。</li>
</ul>
<h2 id="函数作用域和块作用域"><a href="#函数作用域和块作用域" class="headerlink" title="函数作用域和块作用域"></a>函数作用域和块作用域</h2><ul>
<li>函数是JavaScript中最常见的作用域单元；try/catch结构在catch分句中具有块作用域;ES6中引入了let关键字，可以在任意代码块中声明变量</li>
</ul>
<h2 id="提升"><a href="#提升" class="headerlink" title="提升"></a>提升</h2><ul>
<li>var a=2;这包括声明和赋值两部分;</li>
<li>只有声明本身会被提升，而赋值或其他运行逻辑会留在原地</li>
<li><p>普通块内部的函数声明通常会被提升到所在作用域的顶部</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">foo(); <span class="comment">//'b'</span></div><div class="line"><span class="keyword">var</span> a = <span class="literal">true</span>;</div><div class="line"><span class="keyword">if</span>(a)&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'a'</span>);&#125;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'b'</span>);&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>函数表达式是赋值操作，不会提升。</p>
</li>
</ul>
<h2 id="作用域闭包"><a href="#作用域闭包" class="headerlink" title="作用域闭包"></a>作用域闭包</h2><ul>
<li>无论通过何种手段将内部函数传递到所在的词法作用域以外，他都会持有对原始作用域的引用，无论在何处执行这个函数都会使用闭包。</li>
</ul>
<h1 id="第二部分-this和对象"><a href="#第二部分-this和对象" class="headerlink" title="第二部分 this和对象"></a>第二部分 this和对象</h1><h2 id="关于this"><a href="#关于this" class="headerlink" title="关于this"></a>关于this</h2><ul>
<li>this不指向函数本身也不指向函数的词法作用域，this是在函数被调用的时候绑定的，其指向取决于函数在哪调用。</li>
</ul>
<h2 id="this全面解析"><a href="#this全面解析" class="headerlink" title="this全面解析"></a>this全面解析</h2><ul>
<li>Array.forEach(callback, thisArg)也是一种显示绑定，它也使用了call或者apply</li>
<li><p>new绑定、显示绑定、隐式绑定、默认绑定优先级由高到低</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//下面代码说明new比显示绑定要高</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">s</span>)</span>&#123;</div><div class="line">   <span class="keyword">this</span>.a=s;</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">var</span> obj=&#123;&#125;;</div><div class="line"> <span class="keyword">var</span> bar=foo.bind(obj);</div><div class="line"> bar(<span class="number">2</span>);</div><div class="line"> <span class="built_in">console</span>.log(obj.a);</div><div class="line"> <span class="keyword">var</span> baz=<span class="keyword">new</span> bar(<span class="number">3</span>);</div><div class="line"> <span class="built_in">console</span>.log(obj.a);</div><div class="line"> <span class="built_in">console</span>.log(baz.a);</div></pre></td></tr></table></figure>
</li>
<li><p>当把null、undefined作为this的绑定对象传入call或者apply中时，这些值在调用时会被忽略，实际应用的是默认绑定。</p>
</li>
<li><p>赋值时容易发生间接引用</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span><span class="comment">&#123;</span></span></div><div class="line">   console.log(this.a);</div><div class="line">&#125;</div><div class="line"><span class="title">var</span> <span class="title">a</span> = 2;</div><div class="line"><span class="keyword">var</span> o = <span class="comment">&#123; a:3, foo:foo &#125;</span>;</div><div class="line"><span class="keyword">var</span> p = <span class="comment">&#123; a:4 &#125;</span>;</div><div class="line">o.foo(); <span class="comment">// 3</span></div><div class="line">(p.foo() = o.foo())(); <span class="comment">//2</span></div></pre></td></tr></table></figure>
<ul>
<li>对于默认绑定，决定this绑定对象的并不是调用位置是否处于严格模式，而是函数体是否处于严格模式，是的话会被绑定到undefined。</li>
<li><p>硬绑定后，无论函数在哪调用都会带上绑定的this，除了new也无法改变了</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">aa</span><span class="params">()</span><span class="comment">&#123;</span></span></div><div class="line">  console.log(this.a)</div><div class="line">&#125;</div><div class="line"><span class="title">b</span>=<span class="comment">&#123;a:2&#125;</span>;</div><div class="line">c=<span class="comment">&#123;a:4&#125;</span></div><div class="line">aa.call(b) <span class="comment">//2</span></div><div class="line">aa() <span class="comment">//2</span></div><div class="line">aa.call(c) <span class="comment">//4</span></div><div class="line">aa(); <span class="comment">//2</span></div></pre></td></tr></table></figure>
</li>
<li><p>箭头函数的绑定无法被修改，new也不行。它是根据当前词法环境来决定this，会继承外层函数调用的this绑定。</p>
</li>
</ul>
</li>
</ul>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><ul>
<li>字面量表示的字符串或者数据还有布尔值，并不是对象，当使用比如str.length时，是js引擎自动把字面量转换成String对象</li>
<li>Object、Array、Function、RegExp无论是字面量还是构造形式，都是对象。</li>
<li>在对象中，属性名永远是字符串。</li>
<li>判断一个对象是否可枚举，可以用for in 或者propertyIsEnumerable(‘a’)</li>
<li>Object.keys(..) 会返回一个数组,包含所有可枚举属性, Object.getOwnPropertyNames (..)<br>会返回一个数组, 包含所有属性, 无论它们是否可枚举</li>
<li>访问属性时，引擎实际上会调用内部的默认[[Get]]操作,设置时是调用[[Put]].[[Get]]会检查对象本身是否包含这个属性，如果没有的话会查找原型链</li>
<li><p>属性的特性可以通过属性描述符来控制， 比如 writable、 configurable、enumerable</p>
  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="string">Object.defineProperty(myObject,</span> <span class="string">"a"</span><span class="string">,</span> <span class="string">&#123;</span></div><div class="line"><span class="attr">    value:</span> <span class="number">2</span><span class="string">,</span></div><div class="line"><span class="attr">    writable:</span> <span class="literal">true</span><span class="string">,</span></div><div class="line"><span class="attr">    configurable:</span> <span class="literal">true</span><span class="string">,</span></div><div class="line"><span class="attr">    enumerable:</span> <span class="literal">true</span></div><div class="line"><span class="string">&#125;);</span></div></pre></td></tr></table></figure>
</li>
<li><p>属性不一定包含值——它们可能是具备 getter/setter 的“ 访问描述符”。 此外， 属性可以是<br>可枚举或者不可枚举的， 这决定了它们是否会出现在 for..in 循环中</p>
  <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myObject = &#123;</div><div class="line">    <span class="comment">// 给 a 定义一个 getter</span></div><div class="line">    <span class="keyword">get</span> a() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">Object.defineProperty(</div><div class="line">    myObject, <span class="comment">// 目标对象</span></div><div class="line">    <span class="string">"b"</span>, <span class="comment">// 属性名118 ｜ 第 3 章</span></div><div class="line">    &#123; <span class="comment">// 描述符</span></div><div class="line">        <span class="comment">// 给 b 设置一个 getter</span></div><div class="line">        <span class="keyword">get</span>: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.a * <span class="number">2</span> &#125;,</div><div class="line">        <span class="comment">// 确保 b 会出现在对象的属性列表中</span></div><div class="line">        enumerable: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
</li>
<li><p>可以使用 ES6 的 for..of 语法来遍历数据结构（ 数组、 对象， 等等） 中的值， for..of<br>会寻找内置或者自定义的 @@iterator 对象并调用它的 next() 方法来遍历数据值</p>
</li>
</ul>
<h2 id="混合对象“类”"><a href="#混合对象“类”" class="headerlink" title="混合对象“类”"></a>混合对象“类”</h2><p>面向对象编程中，JavaScript中的类，以及继承，多态</p>
<h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><ul>
<li>给对象赋值，如果key在prototype中存在并且被设置为writable:false，那赋值将失败，没法重写该属性</li>
<li>var a = new Foo() 就是把a的[[Prototype]]关联到Foo.prototype指向的那个对象，所以a可以访问Foo.prototype上的属性</li>
<li>JavaScript 机制和传统面向类语言中的“ 类初始化” 和“ 类继承” 很相似， 但是JavaScript 中的机制有一个核心区别， 那就是不会进行复制， 对象之间是通过内部的[[Prototype]] 链关联的</li>
<li>Bar.prototype = Object.create(Foo.prototype)是一种没有副作用的原型链继承方式</li>
</ul>
<h1 id="行为委托"><a href="#行为委托" class="headerlink" title="行为委托"></a>行为委托</h1><ul>
<li>类是一种可选的设计模式，而且在JavaScript这样的语言中实现类其实很别扭，还不如直接使用它的原型链</li>
<li>继承直接用Child.prototype = Object.create(Parent.prototype)</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《乌合之众》读后感]]></title>
      <url>http://localhost:4000/blog/2016/09/27/2016-09-27-%E3%80%8A%E4%B9%8C%E5%90%88%E4%B9%8B%E4%BC%97%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F/</url>
      <content type="html"><![CDATA[<h2 id="总体"><a href="#总体" class="headerlink" title="总体"></a>总体</h2><p>这本书基本都是结论，并没有多少论证，因为心理上的理论本来也不好证明。作者全书基本上全是在批判群体，并且作者是神秘主义<br>种族论的支持者，全书很多地方都在强调种族的重要性。同时作者对妇女、拉丁名族有歧视。全书主要分了块，分别是群体心理、群体的主张<br>与信念、不同群体的分类及其特点。作者认为的群体是一个特殊的心理整体，指的是受某一个事件、演说、激情、恐惧、爱恨的刺激而<br>聚集在一起，为某个目标或某些精神需求而有所行动的人。<br><a id="more"></a></p>
<h2 id="群体的心理"><a href="#群体的心理" class="headerlink" title="群体的心理"></a>群体的心理</h2><ul>
<li>群体的一般特征：群体在智力上劣于独处的人，处于群体中的个人智力差异削弱，个性也会消失，无意识的特点占了上风</li>
<li>群体的感情与道德：冲动、多变、易怒，易受暗示、多变和轻信。群体的感情简单化和夸大化</li>
<li>群体的观念、推理和想象力。打动群体想象力的东西都具有突出和清晰的形象，没有多余的解释</li>
<li>群体的所有信仰都采取宗教形式，群体必须有个神</li>
</ul>
<h2 id="群体的主张与信念"><a href="#群体的主张与信念" class="headerlink" title="群体的主张与信念"></a>群体的主张与信念</h2><ul>
<li>决定群体的主张与信念的间接因素，主要有种族（作用远远超过其他因素）、传统、时间、政治与社会制度、智育和德育</li>
<li>群体主张的直接因素：（形象、词语、套话）、幻觉、经验、理性。意思越不明确的词越能引起行动，比如‘民主’、‘社会主义’。</li>
<li>群体领袖及其说服方式。领袖最初都是被领导者，本人也需要被某种思想所迷惑。群体最想得到的并不是自由，而是被奴役，非常渴望服从。<br>领袖起作用的方式主要靠断言、重复、传染。群体的主张与信念主要是靠传染而不是通过说理传播的。领袖一定要有声望。</li>
<li>群体信念与主张的变化范围。信念被质疑的时候就是走向衰亡的时候。群体的主张又是多变的</li>
</ul>
<h2 id="不同群体的分类及其特点"><a href="#不同群体的分类及其特点" class="headerlink" title="不同群体的分类及其特点"></a>不同群体的分类及其特点</h2><p>群体主要分为异质性群体和同质性群体，但是这本书只讨论了异质性群体，重罪法庭的陪审团、议会、选民</p>
<ul>
<li>重罪法庭的陪审团在裁决的时候智力不起作用。因为群体深受感情的影响，很少受理性的影响，律师只需要隐形陪审员的感情就行了，同时<br>要抓住能左右大家意见的领袖，靠他来影响剩余其他人。</li>
<li>选民有群体的各种特征，推理能力差、缺乏批判精神、易怒、轻信、头脑简单，所以候选人往往会抓住群体的特征，在选举时不断通过断言<br>重复、声望影响选民群体，说各种套话，激发群体的想象力。</li>
<li>议会也一样体现出思想简单化、受领袖人物的影响大，完全失去自我。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一个民族的生命周期就是从理想开始，获得了理想，使种族中的人在感情和思想上达到完全的统一。在追求理想的过程中，种族将创建<br>辉煌、日益强大，但是时间会破坏这种局面，随着时间的推移，理想逐渐衰亡，当理想彻底丧失的时候，种族将完全失去自己的灵魂<br>成了一群独处的人，回到了起点，名族也就消亡了。</p>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 心理 </tag>
            
            <tag> 群体 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Weex Android SDK源码学习]]></title>
      <url>http://localhost:4000/blog/2016/09/07/2016-08-22-Weex%20Android%20SDK%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h2 id="1-Weex-Android的集成"><a href="#1-Weex-Android的集成" class="headerlink" title="1 Weex Android的集成"></a>1 Weex Android的集成</h2><p>具体过程可以查看<a href="http://alibaba.github.io/weex/doc/advanced/integrate-to-android.html" target="_blank" rel="external">官方文档</a></p>
<h3 id="1-1-在app运行的初始阶段对Weex-Engine进行初始化："><a href="#1-1-在app运行的初始阶段对Weex-Engine进行初始化：" class="headerlink" title="1.1 在app运行的初始阶段对Weex Engine进行初始化："></a>1.1 在app运行的初始阶段对Weex Engine进行初始化：</h3><a id="more"></a>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MyApplication.java</span></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">WeexApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    public void onCreate() &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        <span class="type">InitConfig</span>.<span class="type">Builder</span> builder = <span class="keyword">new</span> <span class="type">InitConfig</span>.<span class="type">Builder</span>();</div><div class="line">        builder.setImgAdapter(<span class="keyword">new</span> <span class="type">ImageAdapter</span>());</div><div class="line">        <span class="comment">//builder.setHttpAdapter(new DefaultWXHttpAdapter());</span></div><div class="line">        <span class="type">InitConfig</span> config = builder.build();</div><div class="line">        <span class="type">WXSDKEngine</span>.initialize(<span class="keyword">this</span>,config);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="1-1-1-WXSDKEngine-java中的源码初始化部分"><a href="#1-1-1-WXSDKEngine-java中的源码初始化部分" class="headerlink" title="1.1.1 WXSDKEngine.java中的源码初始化部分"></a>1.1.1 WXSDKEngine.java中的源码初始化部分</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  *</div><div class="line">  * @param application</div><div class="line">  * @param config initial configurations or null</div><div class="line">*/</div><div class="line">public static void initialize(Application application,InitConfig <span class="built_in">config</span>)&#123;</div><div class="line">  <span class="keyword">synchronized </span>(mLock) &#123;</div><div class="line">    if (init) &#123;</div><div class="line">      return<span class="comment">;</span></div><div class="line">    &#125;</div><div class="line">    long start = System.currentTimeMillis()<span class="comment">;</span></div><div class="line">    doInitInternal(application,<span class="built_in">config</span>)<span class="comment">;</span></div><div class="line">    WXEnvironment.sSDKInitInvokeTime = System.currentTimeMillis()-start<span class="comment">;</span></div><div class="line">    init = true<span class="comment">;</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">private static void doInitInternal(final Application application,final InitConfig <span class="built_in">config</span>)&#123;</div><div class="line">  WXEnvironment.sApplication = application<span class="comment">;</span></div><div class="line">  WXEnvironment.<span class="keyword">JsFrameworkInit </span>= false<span class="comment">;</span></div><div class="line">  WXBridgeManager.getInstance().getJSHandler().post(new Runnable() &#123;</div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">      long start = System.currentTimeMillis()<span class="comment">;</span></div><div class="line">      WXSDKManager sm = WXSDKManager.getInstance()<span class="comment">;</span></div><div class="line">      if(<span class="built_in">config</span> != null ) &#123;</div><div class="line">        sm.setIWXHttpAdapter(<span class="built_in">config</span>.getHttpAdapter())<span class="comment">;</span></div><div class="line">        sm.setIWXImgLoaderAdapter(<span class="built_in">config</span>.getImgAdapter())<span class="comment">;</span></div><div class="line">        sm.setIWXUserTrackAdapter(<span class="built_in">config</span>.getUtAdapter())<span class="comment">;</span></div><div class="line">        sm.setIWXDebugAdapter(<span class="built_in">config</span>.getDebugAdapter())<span class="comment">;</span></div><div class="line">        sm.setIWXStorageAdapter(<span class="built_in">config</span>.getStorageAdapter())<span class="comment">;</span></div><div class="line">        if(<span class="built_in">config</span>.getDebugAdapter()!=null)&#123;</div><div class="line">          <span class="built_in">config</span>.getDebugAdapter().initDebug(application)<span class="comment">;</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      WXSoInstallMgrSdk.init(application)<span class="comment">;</span></div><div class="line">      <span class="keyword">boolean </span>isSoInitSuccess = WXSoInstallMgrSdk.initSo(V8_SO_NAME, <span class="number">1</span>, <span class="built_in">config</span>!=null?<span class="built_in">config</span>.getUtAdapter():null)<span class="comment">;</span></div><div class="line">      if (!isSoInitSuccess) &#123;</div><div class="line">        return<span class="comment">;</span></div><div class="line">      &#125;</div><div class="line">      sm.initScriptsFramework(null)<span class="comment">;</span></div><div class="line"></div><div class="line">      WXEnvironment.sSDKInitExecuteTime = System.currentTimeMillis() - start<span class="comment">;</span></div><div class="line">      WXLogUtils.renderPerformanceLog(<span class="string">"SDKInitInvokeTime"</span>, WXEnvironment.sSDKInitInvokeTime)<span class="comment">;</span></div><div class="line">      WXLogUtils.renderPerformanceLog(<span class="string">"SDKInitExecuteTime"</span>, WXEnvironment.sSDKInitExecuteTime)<span class="comment">;</span></div><div class="line">    &#125;</div><div class="line">  &#125;)<span class="comment">;</span></div><div class="line">  register()<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="主要操作"><a href="#主要操作" class="headerlink" title="主要操作"></a>主要操作</h4><ul>
<li>初始化so库文件，渲染逻辑、脚本业务框架等都封装在了这里；</li>
<li>初始化initScriptsFramework，也就是初始化脚本框架；</li>
<li>register() 注册component、module<h2 id="1-2-生成SDK实例，开始渲染bundle-js，并且监听渲染完事件，添加到container中"><a href="#1-2-生成SDK实例，开始渲染bundle-js，并且监听渲染完事件，添加到container中" class="headerlink" title="1.2 生成SDK实例，开始渲染bundle.js，并且监听渲染完事件，添加到container中"></a>1.2 生成SDK实例，开始渲染bundle.js，并且监听渲染完事件，添加到container中</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MainActivity.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">IWXRenderListener</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MainActivity"</span>;</div><div class="line">    WXSDKInstance mInstance;</div><div class="line">    ViewGroup mContainer;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        mContainer = (ViewGroup) findViewById(R.id.container);</div><div class="line">        mInstance = <span class="keyword">new</span> WXSDKInstance(<span class="keyword">this</span>); <span class="comment">//create weex instance</span></div><div class="line">        mInstance.registerRenderListener(<span class="keyword">this</span>); </div><div class="line">        <span class="comment">//mInstance.registerRenderListener(new SimpleRenderListener()) //SimpleRenderListener需要开发者来实现</span></div><div class="line">        instance.renderByUrl(TAG, WEEX_INDEX_URL, options, <span class="keyword">null</span>, ScreenUtil.getDisplayWidth(<span class="keyword">this</span>),  </div><div class="line">                             ScreenUtil.getDisplayHeight(<span class="keyword">this</span>), WXRenderStrategy.APPEND_ASYNC);  </div><div class="line">    ...</div><div class="line">    ...</div><div class="line">    <span class="comment">//监听创建完命令，然后添加到container中</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewCreated</span><span class="params">(WXSDKInstance wxsdkInstance, View view)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mContainer != <span class="keyword">null</span>) &#123;</div><div class="line">            mContainer.addView(view);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="2-具体渲染源码"><a href="#2-具体渲染源码" class="headerlink" title="2 具体渲染源码"></a>2 具体渲染源码</h1><h2 id="2-1-源码中的renderByUrl函数"><a href="#2-1-源码中的renderByUrl函数" class="headerlink" title="2.1 源码中的renderByUrl函数"></a>2.1 源码中的renderByUrl函数</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//WXSDKInstance.java</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> renderByUrl(<span class="keyword">String</span> pageName, <span class="keyword">final</span> <span class="keyword">String</span> url, Map&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt; options, <span class="keyword">final</span> <span class="keyword">String</span> jsonInitData, <span class="keyword">final</span> <span class="built_in">int</span> <span class="built_in">width</span>, <span class="keyword">final</span> <span class="built_in">int</span> <span class="built_in">height</span>, <span class="keyword">final</span> WXRenderStrategy flag) &#123;</div><div class="line"></div><div class="line">    pageName = wrapPageName(pageName, url);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (options == <span class="keyword">null</span>) &#123;</div><div class="line">      options = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt;();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (!options.containsKey(BUNDLE_URL)) &#123;</div><div class="line">      options.put(BUNDLE_URL, url);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Uri uri=Uri.parse(url);</div><div class="line">    <span class="keyword">if</span>(uri!=<span class="keyword">null</span> &amp;&amp; TextUtils.equals(uri.getScheme(),<span class="string">"file"</span>))&#123;</div><div class="line">      render(pageName, WXFileUtils.loadAsset(assembleFilePath(uri), mContext),options,jsonInitData,<span class="built_in">width</span>,<span class="built_in">height</span>,flag);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    IWXHttpAdapter adapter=WXSDKManager.getInstance().getIWXHttpAdapter();</div><div class="line"></div><div class="line">    WXRequest wxRequest = <span class="keyword">new</span> WXRequest();</div><div class="line">    wxRequest.url = url;</div><div class="line">    <span class="keyword">if</span> (wxRequest.paramMap == <span class="keyword">null</span>) &#123;</div><div class="line">      wxRequest.paramMap = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;();</div><div class="line">    &#125;</div><div class="line">    wxRequest.paramMap.put(<span class="string">"user-agent"</span>, WXHttpUtil.assembleUserAgent(mContext,WXEnvironment.getConfig()));</div><div class="line">    adapter.sendRequest(wxRequest, <span class="keyword">new</span> WXHttpListener(pageName, options, jsonInitData, <span class="built_in">width</span>, <span class="built_in">height</span>, flag, System.currentTimeMillis()));</div><div class="line">    mWXHttpAdapter = adapter;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>如果是file那就直接调用render函数渲染，如果是远程地址，用http请求,在请求结束的回调中去渲染，WXHttpListener继承自IWXHttpAdapter.OnHttpListener，其有onHttpFinish回调<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> onHttpFinish(WXResponse response) &#123;</div><div class="line">  mWXPerformance.networkTime = System.currentTimeMillis() - startRequestTime;</div><div class="line">  <span class="keyword">if</span>(response.extendParams!=<span class="keyword">null</span>)&#123;</div><div class="line">    <span class="keyword">Object</span> actualNetworkTime=response.extendParams.<span class="built_in">get</span>(<span class="string">"actualNetworkTime"</span>);</div><div class="line">    mWXPerformance.actualNetworkTime=actualNetworkTime <span class="keyword">instanceof</span> Long?(<span class="keyword">long</span>)actualNetworkTime:<span class="number">0</span>;</div><div class="line">    WXLogUtils.renderPerformanceLog(<span class="string">"actualNetworkTime"</span>, mWXPerformance.actualNetworkTime);</div><div class="line"></div><div class="line">    <span class="keyword">Object</span> pureNetworkTime=response.extendParams.<span class="built_in">get</span>(<span class="string">"pureNetworkTime"</span>);</div><div class="line">    mWXPerformance.pureNetworkTime=pureNetworkTime <span class="keyword">instanceof</span> Long?(<span class="keyword">long</span>)pureNetworkTime:<span class="number">0</span>;</div><div class="line">    WXLogUtils.renderPerformanceLog(<span class="string">"pureNetworkTime"</span>, mWXPerformance.pureNetworkTime);</div><div class="line"></div><div class="line">    <span class="keyword">Object</span> connectionType=response.extendParams.<span class="built_in">get</span>(<span class="string">"connectionType"</span>);</div><div class="line">    mWXPerformance.connectionType=connectionType <span class="keyword">instanceof</span> <span class="keyword">String</span>?(<span class="keyword">String</span>)connectionType:<span class="string">""</span>;</div><div class="line"></div><div class="line">    <span class="keyword">Object</span> packageSpendTime=response.extendParams.<span class="built_in">get</span>(<span class="string">"packageSpendTime"</span>);</div><div class="line">    mWXPerformance.packageSpendTime=packageSpendTime <span class="keyword">instanceof</span> Long ?(<span class="keyword">long</span>)packageSpendTime:<span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">Object</span> syncTaskTime=response.extendParams.<span class="built_in">get</span>(<span class="string">"syncTaskTime"</span>);</div><div class="line">    mWXPerformance.syncTaskTime=syncTaskTime <span class="keyword">instanceof</span> Long ?(<span class="keyword">long</span>)syncTaskTime:<span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">Object</span> requestType=response.extendParams.<span class="built_in">get</span>(<span class="string">"requestType"</span>);</div><div class="line">    mWXPerformance.requestType=requestType <span class="keyword">instanceof</span> <span class="keyword">String</span>?(<span class="keyword">String</span>)requestType:<span class="string">""</span>;</div><div class="line">  &#125;</div><div class="line">  WXLogUtils.renderPerformanceLog(<span class="string">"networkTime"</span>, mWXPerformance.networkTime);</div><div class="line">  <span class="keyword">if</span> (response!=<span class="keyword">null</span> &amp;&amp; response.originalData!=<span class="keyword">null</span> &amp;&amp; TextUtils.equals(<span class="string">"200"</span>, response.statusCode)) &#123;</div><div class="line">    <span class="keyword">String</span> template = <span class="keyword">new</span> <span class="keyword">String</span>(response.originalData);</div><div class="line">    render(pageName, template, options, jsonInitData, <span class="built_in">width</span>, <span class="built_in">height</span>, flag);</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (TextUtils.equals(WXRenderErrorCode.WX_USER_INTERCEPT_ERROR, response.statusCode)) &#123;</div><div class="line">    WXLogUtils.d(<span class="string">"user intercept"</span>);</div><div class="line">    onRenderError(WXRenderErrorCode.WX_USER_INTERCEPT_ERROR,response.errorMsg);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    onRenderError(WXRenderErrorCode.WX_NETWORK_ERROR, response.errorMsg);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最终还是调用render函数进行渲染<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> render(<span class="keyword">String</span> pageName, <span class="keyword">String</span> template, Map&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt; options, <span class="keyword">String</span> jsonInitData, <span class="built_in">int</span> <span class="built_in">width</span>, <span class="built_in">int</span> <span class="built_in">height</span>, WXRenderStrategy flag) &#123;</div><div class="line">    <span class="keyword">if</span> (mRendered || TextUtils.isEmpty(template)) &#123;</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(options==<span class="keyword">null</span>)&#123;</div><div class="line">      options=<span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(WXEnvironment.sDynamicMode &amp;&amp; !TextUtils.isEmpty(WXEnvironment.sDynamicUrl) &amp;&amp; options!=<span class="keyword">null</span> &amp;&amp; options.<span class="built_in">get</span>(<span class="string">"dynamicMode"</span>)==<span class="keyword">null</span>)&#123;</div><div class="line">      options.put(<span class="string">"dynamicMode"</span>,<span class="string">"true"</span>);</div><div class="line">      renderByUrl(pageName, WXEnvironment.sDynamicUrl, options, jsonInitData, <span class="built_in">width</span>, <span class="built_in">height</span>, flag);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mWXPerformance.pageName = pageName;</div><div class="line">    mWXPerformance.JSTemplateSize = template.length() / <span class="number">1024</span>;</div><div class="line"></div><div class="line">    mRenderStartTime = System.currentTimeMillis();</div><div class="line">    mRenderStrategy = flag;</div><div class="line">    mGodViewWidth = <span class="built_in">width</span>;</div><div class="line">    mGodViewHeight = <span class="built_in">height</span>;</div><div class="line">    mInstanceId = WXSDKManager.getInstance().generateInstanceId();</div><div class="line">    WXSDKManager.getInstance().createInstance(<span class="keyword">this</span>, template, options, jsonInitData);</div><div class="line">    mRendered = <span class="keyword">true</span>;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>render函数中关键的一步<br>其实是create了一个WXSDKManager的实例，并且把template传了过去<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">WXSDKManager.getInstance().createInstance(<span class="keyword">this</span>, <span class="keyword">template</span>, options, jsonInitData);</div></pre></td></tr></table></figure></p>
<h2 id="2-2-WXSDKManager"><a href="#2-2-WXSDKManager" class="headerlink" title="2.2 WXSDKManager"></a>2.2 WXSDKManager</h2><p>创建WXSDKManager实例函数主要是创建了WXRenderManger和WXBridgeManger的实例，template是传递到了WXBridgeManger的实例<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//WXSDKManager.java</span></div><div class="line"><span class="keyword">void</span> createInstance(WXSDKInstance instance, <span class="built_in">String</span> code, <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; options, <span class="built_in">String</span> jsonInitData) &#123;</div><div class="line">    mWXRenderManager.createInstance(instance);</div><div class="line">    mBridgeManager.createInstance(instance.getInstanceId(), code, options, jsonInitData);</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>WXRenderManger创建实例只是把实例id和状态管理实例push到它的ConcurrentHashMap<string, wxrenderstatement=""> mRegistries中，为了便于管理多实例的情况<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//mWXRenderManager.java</span></div><div class="line">public <span class="keyword">void</span> createInstance(WXSDKInstance <span class="keyword">instance</span>) &#123;</div><div class="line">    mRegistries<span class="variable">.put</span>(<span class="keyword">instance</span><span class="variable">.getInstanceId</span>(), <span class="keyword">new</span> WXRenderStatement(<span class="keyword">instance</span>));</div><div class="line">  &#125;</div></pre></td></tr></table></figure></string,></p>
<p>WXBridgeManager的实例化，执行了一个post函数，启动一个线程执行<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">//WXBridgeManager.java</div><div class="line">/**</div><div class="line"> * Create instance.</div><div class="line">*/<span class="keyword"></span></div><div class="line">public void createInstance(final String instanceId,<span class="keyword"> final</span> String template,</div><div class="line">                            <span class="keyword"> final</span> Map&lt;String, Object&gt; options,<span class="keyword"> final</span> String data) &#123;</div><div class="line">   <span class="built_in"> if </span>( TextUtils.isEmpty(instanceId)</div><div class="line">        || TextUtils.isEmpty(template) || mJSHandler == null) &#123;</div><div class="line">      WXSDKInstance<span class="built_in"> instance </span>= WXSDKManager.getInstance().getSDKInstance(instanceId);</div><div class="line">     <span class="built_in"> if </span>(instance != null) &#123;</div><div class="line">        instance.onRenderError(WXRenderErrorCode.WX_CREATE_INSTANCE_ERROR, <span class="string">"createInstance fail!"</span>);</div><div class="line">      &#125;</div><div class="line">      return;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    post(new Runnable() &#123;</div><div class="line">      @Override</div><div class="line">     <span class="keyword"> public</span> void run() &#123;</div><div class="line">       <span class="built_in"> long </span>start = System.currentTimeMillis();</div><div class="line">        invokeCreateInstance(instanceId, template, options, data);</div><div class="line">       <span class="keyword"> final</span><span class="built_in"> long </span>totalTime = System.currentTimeMillis() - start;</div><div class="line">        WXSDKManager.getInstance().postOnUiThread(new Runnable() &#123;</div><div class="line"></div><div class="line">          @Override</div><div class="line">         <span class="keyword"> public</span> void run() &#123;</div><div class="line">            WXSDKInstance<span class="built_in"> instance </span>= WXSDKManager.getInstance().getSDKInstance(instanceId);</div><div class="line">           <span class="built_in"> if </span>(instance != null) &#123;</div><div class="line">              instance.createInstanceFinished(totalTime);</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        &#125;, 0);</div><div class="line">      &#125;</div><div class="line">    &#125;, instanceId);</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>run函数内先是执行了invokeCreateInstance<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">private void invokeCreateInstance(String <span class="keyword">instanceId, </span>String template,</div><div class="line">                                    Map&lt;String, Object&gt; options, String data) &#123;</div><div class="line"></div><div class="line">    initFramework(<span class="string">""</span>)<span class="comment">;</span></div><div class="line"></div><div class="line">    if (mMock) &#123;</div><div class="line">      mock(<span class="keyword">instanceId);</span></div><div class="line">    &#125; else &#123;</div><div class="line">      if (!isJSFrameworkInit()) &#123;</div><div class="line">        WXSDKInstance <span class="keyword">instance </span>= WXSDKManager.getInstance().getSDKInstance(<span class="keyword">instanceId);</span></div><div class="line">        if (<span class="keyword">instance </span>!= null) &#123;</div><div class="line">          <span class="keyword">instance.onRenderError(WXRenderErrorCode.WX_CREATE_INSTANCE_ERROR, </span><span class="string">"createInstance "</span></div><div class="line">                                                                             + <span class="string">"fail!"</span>)<span class="comment">;</span></div><div class="line">        &#125;</div><div class="line">        String err = <span class="string">"[WXBridgeManager] invokeCreateInstance: framework.js uninitialized."</span><span class="comment">;</span></div><div class="line">        WXErrorCode.WX_ERR_INVOKE_NATIVE.appendErrMsg(err)<span class="comment">;</span></div><div class="line">        commitJSBridgeAlarmMonitor(<span class="keyword">instanceId, </span>WXErrorCode.WX_ERR_INVOKE_NATIVE)<span class="comment">;</span></div><div class="line">        WXLogUtils.e(err)<span class="comment">;</span></div><div class="line">        return<span class="comment">;</span></div><div class="line">      &#125;</div><div class="line">      try &#123;</div><div class="line">        if (WXEnvironment.isApkDebugable()) &#123;</div><div class="line">          WXLogUtils.d(<span class="string">"createInstance &gt;&gt;&gt;&gt; instanceId:"</span> + <span class="keyword">instanceId</span></div><div class="line">                       + <span class="string">", options:"</span></div><div class="line">                       + WXJsonUtils.fromObjectToJSONString(options)</div><div class="line">                       + <span class="string">", data:"</span> + data)<span class="comment">;</span></div><div class="line">        &#125;</div><div class="line">        WXJSObject <span class="keyword">instanceIdObj </span>= new WXJSObject(WXJSObject.String,</div><div class="line">                                                  <span class="keyword">instanceId);</span></div><div class="line">        WXJSObject <span class="keyword">instanceObj </span>= new WXJSObject(WXJSObject.String,</div><div class="line">                                                template)<span class="comment">;</span></div><div class="line">        WXJSObject optionsObj = new WXJSObject(WXJSObject.<span class="keyword">JSON,</span></div><div class="line">                                               options == null ? <span class="string">"&#123;&#125;"</span></div><div class="line">                                                               : WXJsonUtils.fromObjectToJSONString(options))<span class="comment">;</span></div><div class="line">        WXJSObject dataObj = new WXJSObject(WXJSObject.<span class="keyword">JSON,</span></div><div class="line">                                            data == null ? <span class="string">"&#123;&#125;"</span> : data)<span class="comment">;</span></div><div class="line">        WXJSObject[] args = &#123;<span class="keyword">instanceIdObj, </span><span class="keyword">instanceObj, </span>optionsObj,</div><div class="line">            dataObj&#125;<span class="comment">;</span></div><div class="line">        invokeExecJS(<span class="keyword">instanceId, </span>null, METHOD_CREATE_INSTANCE, args)<span class="comment">;</span></div><div class="line">        commitJSBridgeAlarmMonitor(<span class="keyword">instanceId, </span>WXErrorCode.WX_SUCCESS)<span class="comment">;</span></div><div class="line">      &#125; catch (Throwable e) &#123;</div><div class="line">        WXSDKInstance <span class="keyword">instance </span>= WXSDKManager.getInstance().getSDKInstance(<span class="keyword">instanceId);</span></div><div class="line">        if (<span class="keyword">instance </span>!= null) &#123;</div><div class="line">          <span class="keyword">instance.onRenderError(WXRenderErrorCode.WX_CREATE_INSTANCE_ERROR,</span></div><div class="line">                                 <span class="string">"createInstance failed!"</span>)<span class="comment">;</span></div><div class="line">        &#125;</div><div class="line">        String err = <span class="string">"[WXBridgeManager] invokeCreateInstance "</span> + e.getCause()<span class="comment">;</span></div><div class="line">        WXErrorCode.WX_ERR_INVOKE_NATIVE.appendErrMsg(err)<span class="comment">;</span></div><div class="line">        commitJSBridgeAlarmMonitor(<span class="keyword">instanceId, </span>WXErrorCode.WX_ERR_INVOKE_NATIVE)<span class="comment">;</span></div><div class="line">        WXLogUtils.e(err)<span class="comment">;</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>它把之前传过来的参数又包装了以下，传给invokeExecJS执行<br><figure class="highlight openscad"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">private void invokeExecJS(String instanceId, String namespace, String <span class="function"><span class="keyword">function</span>, <span class="title">WXJSObject</span>[] <span class="title">args</span>)&#123;</span></div><div class="line">    <span class="keyword">if</span> (WXEnvironment.isApkDebugable()) &#123;</div><div class="line">      mLodBuilder.append(<span class="string">"callJS &gt;&gt;&gt;&gt; instanceId:"</span>).append(instanceId)</div><div class="line">              .append(<span class="string">"function:"</span>).append(<span class="function"><span class="keyword">function</span>)</span></div><div class="line">              .<span class="title">append</span><span class="params">(<span class="string">" tasks:"</span>)</span>.<span class="title">append</span><span class="params">(WXJsonUtils.fromObjectToJSONString<span class="params">(args)</span>)</span>;</div><div class="line">      <span class="title">WXLogUtils</span>.<span class="title">d</span><span class="params">(mLodBuilder.substring<span class="params">(<span class="number">0</span>)</span>)</span>;</div><div class="line">      <span class="title">mLodBuilder</span>.<span class="title">setLength</span><span class="params">(<span class="number">0</span>)</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="title">if</span><span class="params">(mDestroyedInstanceId!=null &amp;&amp; !mDestroyedInstanceId.contains<span class="params">(instanceId)</span>)</span> &#123;</div><div class="line">      mWXBridge.execJS(instanceId, namespace, <span class="function"><span class="keyword">function</span>, <span class="title">args</span>);</span></div><div class="line">    &#125;<span class="title">else</span>&#123;</div><div class="line">      WXLogUtils.w(<span class="string">"invokeExecJS: instanceId: "</span>+instanceId+<span class="string">"was  destroy !! ExecJS abandon !!"</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>mWXBridge是WXBridge的实例，执行execJS调用so库方法进行js代码解析，在安卓中就是V8引擎，解析完后c++代码会调用callNative函数，将js中对native的操作告诉native，最终实现native端的渲染。</p>
<h2 id="2-3-native中处理v8引擎解析的js代码产生的回调，从而实现js–-gt-native"><a href="#2-3-native中处理v8引擎解析的js代码产生的回调，从而实现js–-gt-native" class="headerlink" title="2.3 native中处理v8引擎解析的js代码产生的回调，从而实现js–&gt;native"></a>2.3 native中处理v8引擎解析的js代码产生的回调，从而实现js–&gt;native</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="built_in">int</span> callNative(<span class="keyword">String</span> instanceId, <span class="keyword">String</span> tasks, <span class="keyword">String</span> callback) &#123;</div><div class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">    <span class="keyword">if</span>(WXSDKManager.getInstance().getSDKInstance(instanceId)!=<span class="keyword">null</span>) &#123;</div><div class="line">      WXSDKManager.getInstance().getSDKInstance(instanceId).firstScreenCreateInstanceTime(start);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">int</span> errorCode = WXBridgeManager.getInstance().callNative(instanceId, tasks, callback);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(WXSDKManager.getInstance().getSDKInstance(instanceId)!=<span class="keyword">null</span>) &#123;</div><div class="line">      WXSDKManager.getInstance().getSDKInstance(instanceId).callNativeTime(System.currentTimeMillis() - start);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(WXEnvironment.isApkDebugable())&#123;</div><div class="line">      <span class="keyword">if</span>(errorCode == WXBridgeManager.DESTROY_INSTANCE)&#123;</div><div class="line">        WXLogUtils.w(<span class="string">"destroyInstance :"</span>+instanceId+<span class="string">" JSF must stop callNative"</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> errorCode;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>它又调用了WXBridgeManager的callNative<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="built_in">int</span> callNative(<span class="keyword">String</span> instanceId, <span class="keyword">String</span> tasks, <span class="keyword">String</span> callback) &#123;</div><div class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(tasks)) &#123;</div><div class="line">      <span class="keyword">if</span> (WXEnvironment.isApkDebugable()) &#123;</div><div class="line">        WXLogUtils.e(<span class="string">"[WXBridgeManager] callNative: call Native tasks is null"</span>);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> INSTANCE_RENDERING_ERROR;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (WXEnvironment.isApkDebugable()) &#123;</div><div class="line">      mLodBuilder.<span class="built_in">append</span>(<span class="string">"[WXBridgeManager] callNative &gt;&gt;&gt;&gt; instanceId:"</span>).<span class="built_in">append</span>(instanceId)</div><div class="line">          .<span class="built_in">append</span>(<span class="string">", tasks:"</span>).<span class="built_in">append</span>(tasks).<span class="built_in">append</span>(<span class="string">", callback:"</span>).<span class="built_in">append</span>(callback);</div><div class="line">      WXLogUtils.d(mLodBuilder.substring(<span class="number">0</span>));</div><div class="line">      mLodBuilder.setLength(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(mDestroyedInstanceId!=<span class="keyword">null</span> &amp;&amp;mDestroyedInstanceId.contains(instanceId))&#123;</div><div class="line">      <span class="keyword">return</span> DESTROY_INSTANCE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">    <span class="keyword">JSONArray</span> array = JSON.parseArray(tasks);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(WXSDKManager.getInstance().getSDKInstance(instanceId)!=<span class="keyword">null</span>) &#123;</div><div class="line">      WXSDKManager.getInstance().getSDKInstance(instanceId).jsonParseTime(System.currentTimeMillis() - start);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">int</span> <span class="built_in">size</span> = array.<span class="built_in">size</span>();</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">size</span> &gt; <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">JSONObject</span> task;</div><div class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; ++i) &#123;</div><div class="line">          task = (<span class="keyword">JSONObject</span>) array.<span class="built_in">get</span>(i);</div><div class="line">          <span class="keyword">if</span> (task != <span class="keyword">null</span> &amp;&amp; WXSDKManager.getInstance().getSDKInstance(instanceId) != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (TextUtils.equals(WXDomModule.WXDOM, (<span class="keyword">String</span>) task.<span class="built_in">get</span>(WXDomModule.MODULE))) &#123;</div><div class="line">              sDomModule = getDomModule(instanceId);</div><div class="line">              sDomModule.callDomMethod(task);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">              WXModuleManager.callModuleMethod(instanceId, (<span class="keyword">String</span>) task.<span class="built_in">get</span>(WXDomModule.MODULE),</div><div class="line">                      (<span class="keyword">String</span>) task.<span class="built_in">get</span>(WXDomModule.METHOD), (<span class="keyword">JSONArray</span>) task.<span class="built_in">get</span>(WXDomModule.ARGS));</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        WXLogUtils.e(<span class="string">"[WXBridgeManager] callNative exception: "</span>, e);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (UNDEFINED.equals(callback)) &#123;</div><div class="line">      <span class="keyword">return</span> INSTANCE_RENDERING_ERROR;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// get next tick</span></div><div class="line">    getNextTick(instanceId, callback);</div><div class="line">    <span class="keyword">return</span> INSTANCE_RENDERING;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">void</span> getNextTick(<span class="keyword">final</span> <span class="keyword">String</span> instanceId, <span class="keyword">final</span> <span class="keyword">String</span> callback) &#123;</div><div class="line">    addJSTask(METHOD_CALLBACK,instanceId, callback, <span class="string">"&#123;&#125;"</span>);</div><div class="line">    sendMessage(instanceId, WXJSBridgeMsgType.CALL_JS_BATCH);</div><div class="line">  &#125;</div><div class="line"></div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">void</span> addJSTask(<span class="keyword">final</span> <span class="keyword">String</span> method, <span class="keyword">final</span> <span class="keyword">String</span> instanceId, <span class="keyword">final</span> <span class="keyword">Object</span>... args) &#123;</div><div class="line">    mJSHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">      @Override</div><div class="line">      <span class="keyword">public</span> <span class="keyword">void</span> run() &#123;</div><div class="line">        <span class="keyword">if</span> (args == <span class="keyword">null</span> || args.length == <span class="number">0</span>) &#123;</div><div class="line">          <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ArrayList&lt;<span class="keyword">Object</span>&gt; argsList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">Object</span> arg : args) &#123;</div><div class="line">          argsList.<span class="built_in">add</span>(arg);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        WXHashMap&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt; task = <span class="keyword">new</span> WXHashMap&lt;&gt;();</div><div class="line">        task.put(WXConst.KEY_METHOD, method);</div><div class="line">        task.put(WXConst.KEY_ARGS, argsList);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mNextTickTasks.<span class="built_in">get</span>(instanceId) == <span class="keyword">null</span>) &#123;</div><div class="line">          ArrayList&lt;WXHashMap&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">          list.<span class="built_in">add</span>(task);</div><div class="line">          mNextTickTasks.put(instanceId, list);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          mNextTickTasks.<span class="built_in">get</span>(instanceId).<span class="built_in">add</span>(task);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">void</span> sendMessage(<span class="keyword">String</span> instanceId, <span class="built_in">int</span> what) &#123;</div><div class="line">    Message msg = Message.obtain(mJSHandler);</div><div class="line">    msg.obj = instanceId;</div><div class="line">    msg.what = what;</div><div class="line">    msg.sendToTarget();</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>在这个callNative函数中会分发task，并且获取getNextTick。tasks中就包含各种函数，下面的callDomMethod会进行判断，从而调用native中的对应方法</p>
<h2 id="2-4-WXDOMModule-java"><a href="#2-4-WXDOMModule-java" class="headerlink" title="2.4 WXDOMModule.java"></a>2.4 WXDOMModule.java</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> callDomMethod(<span class="keyword">JSONObject</span> task) &#123;</div><div class="line">    <span class="keyword">if</span>( task == <span class="keyword">null</span> ) &#123;</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">String</span> method = (<span class="keyword">String</span>) task.<span class="built_in">get</span>(METHOD);</div><div class="line">    <span class="keyword">JSONArray</span> args = (<span class="keyword">JSONArray</span>) task.<span class="built_in">get</span>(ARGS);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(method == <span class="keyword">null</span>)&#123;</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="keyword">switch</span> (method) &#123;</div><div class="line">        <span class="keyword">case</span> CREATE_BODY:</div><div class="line">          <span class="keyword">if</span>(args == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">          &#125;</div><div class="line">          createBody((<span class="keyword">JSONObject</span>) args.<span class="built_in">get</span>(<span class="number">0</span>));</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> UPDATE_ATTRS:</div><div class="line">          <span class="keyword">if</span>(args == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">          &#125;</div><div class="line">          updateAttrs((<span class="keyword">String</span>) args.<span class="built_in">get</span>(<span class="number">0</span>), (<span class="keyword">JSONObject</span>) args.<span class="built_in">get</span>(<span class="number">1</span>));</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> UPDATE_STYLE:</div><div class="line">          <span class="keyword">if</span>(args == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">          &#125;</div><div class="line">          updateStyle((<span class="keyword">String</span>) args.<span class="built_in">get</span>(<span class="number">0</span>), (<span class="keyword">JSONObject</span>) args.<span class="built_in">get</span>(<span class="number">1</span>));</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> REMOVE_ELEMENT:</div><div class="line">          <span class="keyword">if</span>(args == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">          &#125;</div><div class="line">          removeElement((<span class="keyword">String</span>) args.<span class="built_in">get</span>(<span class="number">0</span>));</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> ADD_ELEMENT:</div><div class="line">          <span class="keyword">if</span>(args == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">          &#125;</div><div class="line">          addElement((<span class="keyword">String</span>) args.<span class="built_in">get</span>(<span class="number">0</span>), (<span class="keyword">JSONObject</span>) args.<span class="built_in">get</span>(<span class="number">1</span>), (Integer) args.<span class="built_in">get</span>(<span class="number">2</span>));</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> MOVE_ELEMENT:</div><div class="line">          <span class="keyword">if</span>(args == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">          &#125;</div><div class="line">          moveElement((<span class="keyword">String</span>) args.<span class="built_in">get</span>(<span class="number">0</span>), (<span class="keyword">String</span>) args.<span class="built_in">get</span>(<span class="number">1</span>), (Integer) args.<span class="built_in">get</span>(<span class="number">2</span>));</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> ADD_EVENT:</div><div class="line">          <span class="keyword">if</span>(args == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">          &#125;</div><div class="line">          addEvent((<span class="keyword">String</span>) args.<span class="built_in">get</span>(<span class="number">0</span>), (<span class="keyword">String</span>) args.<span class="built_in">get</span>(<span class="number">1</span>));</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> REMOVE_EVENT:</div><div class="line">          <span class="keyword">if</span>(args == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">          &#125;</div><div class="line">          removeEvent((<span class="keyword">String</span>) args.<span class="built_in">get</span>(<span class="number">0</span>), (<span class="keyword">String</span>) args.<span class="built_in">get</span>(<span class="number">1</span>));</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> CREATE_FINISH:</div><div class="line">          createFinish();</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> REFRESH_FINISH:</div><div class="line">          refreshFinish();</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> UPDATE_FINISH:</div><div class="line">          updateFinish();</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> SCROLL_TO_ELEMENT:</div><div class="line">          <span class="keyword">if</span>(args == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">          &#125;</div><div class="line">          scrollToElement((<span class="keyword">String</span>) args.<span class="built_in">get</span>(<span class="number">0</span>), (<span class="keyword">JSONObject</span>) args.<span class="built_in">get</span>(<span class="number">1</span>));</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> ADD_RULE:</div><div class="line">          <span class="keyword">if</span> (args == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">          addRule((<span class="keyword">String</span>) args.<span class="built_in">get</span>(<span class="number">0</span>), (<span class="keyword">JSONObject</span>) args.<span class="built_in">get</span>(<span class="number">1</span>));</div><div class="line">      &#125;</div><div class="line"></div><div class="line">    &#125;<span class="keyword">catch</span> (IndexOutOfBoundsException e)&#123;</div><div class="line">      <span class="comment">// no enougn args</span></div><div class="line">      e.printStackTrace();</div><div class="line">      WXLogUtils.e(<span class="string">"Dom module call miss arguments."</span>);</div><div class="line">    &#125; <span class="keyword">catch</span> (ClassCastException cce) &#123;</div><div class="line">      WXLogUtils.e(<span class="string">"Dom module call arguments format error!!"</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h1 id="3-渲染举例"><a href="#3-渲染举例" class="headerlink" title="3 渲染举例"></a>3 渲染举例</h1><p>当method是CREATE_BODY时，会执行createBody函数<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* Create a body for the current &#123;@link com.taobao.weex.WXSDKInstance&#125; according to given</div><div class="line">* parameter.</div><div class="line">* @param element info about how to create a body</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> createBody(JSONObject element) &#123;</div><div class="line">    <span class="keyword">if</span> (element == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    Message msg = Message.obtain();</div><div class="line">    WXDomTask <span class="keyword">task</span> = <span class="keyword">new</span> WXDomTask();</div><div class="line">    <span class="keyword">task</span>.instanceId = mWXSDKInstance.getInstanceId();</div><div class="line">    <span class="keyword">task</span>.args = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="keyword">task</span>.args.add(element);</div><div class="line">    msg.what = WXDomHandler.MsgType.WX_DOM_CREATE_BODY;</div><div class="line">    msg.obj = <span class="keyword">task</span>;</div><div class="line">    WXSDKManager.getInstance().getWXDomManager().sendMessage(msg);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面这个函数最终是调用了WXDOMManager中的sendMessage函数<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (msg == <span class="keyword">null</span> || mDomHandler == <span class="keyword">null</span> || mDomThread == <span class="keyword">null</span></div><div class="line">        || !mDomThread.isWXThreadAlive() || mDomThread.getLooper() == <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    mDomHandler.sendMessage(msg);</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>从代码中可以看到WXDOMManager中其实又是执行了mDomHandler的sendMessage。WXDomHandler负责响应消息，并且分发任务，<br>它继承了os.handler.callback。它会处理消息，最终createBody被分发到mWXDomManager.createBody,Manger中又是调用了<br>WXDOMStatement.createBody(element);下面看WXDOmStatement的createBody函数<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//WXDOMStatement.java</span></div><div class="line"><span class="comment"><span class="markdown">/**</span></span></div><div class="line"><span class="bullet">* </span>Create command object for creating body according to the<span class="markdown"> JSONObject. And put </span>the<span class="markdown"> command</span></div><div class="line"><span class="bullet">* </span>object in the<span class="markdown"> queue.</span></div><div class="line"><span class="bullet">* </span>@param element the<span class="markdown"> jsonObject according to which to create command object.</span></div><div class="line">*/</div><div class="line"><span class="keyword">void</span> createBody(JSONObject element) &#123;</div><div class="line">    <span class="keyword">if</span> (mDestroy) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    WXSDKInstance instance = WXSDKManager.getInstance().getSDKInstance(mInstanceId);</div><div class="line">    <span class="keyword">if</span> (element == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (instance != <span class="keyword">null</span>) &#123;</div><div class="line">        instance.commitUTStab(WXConst.DOM_MODULE, WXErrorCode.WX_ERR_DOM_CREATEBODY);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//Parse the jsonObject to &#123;@link WXDomObject&#125; recursively</span></div><div class="line">    WXDomObject domObject = parseInner(element);</div><div class="line">    <span class="keyword">if</span>(domObject==<span class="keyword">null</span>)&#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; style = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">5</span>);</div><div class="line">    <span class="keyword">if</span> (domObject.style == <span class="keyword">null</span> || !domObject.style.containsKey(WXDomPropConstant.WX_FLEXDIRECTION)) &#123;</div><div class="line">        style.put(WXDomPropConstant.WX_FLEXDIRECTION, <span class="string">"column"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (domObject.style == <span class="keyword">null</span> || !domObject.style.containsKey(WXDomPropConstant.WX_BACKGROUNDCOLOR)) &#123;</div><div class="line">        style.put(WXDomPropConstant.WX_BACKGROUNDCOLOR, <span class="string">"#ffffff"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//If there is height or width in JS, then that value will override value here.</span></div><div class="line">    <span class="keyword">if</span> (domObject.style == <span class="keyword">null</span> || !domObject.style.containsKey(WXDomPropConstant.WX_WIDTH)) &#123;</div><div class="line">        style.put(WXDomPropConstant.WX_WIDTH, WXViewUtils.getWebPxByWidth(WXViewUtils.getWeexWidth(mInstanceId)));</div><div class="line">        domObject.setModifyWidth(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (domObject.style == <span class="keyword">null</span> || !domObject.style.containsKey(WXDomPropConstant.WX_HEIGHT)) &#123;</div><div class="line">        style.put(WXDomPropConstant.WX_HEIGHT, WXViewUtils.getWebPxByWidth(WXViewUtils.getWeexHeight(mInstanceId)));</div><div class="line">        domObject.setModifyHeight(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">    domObject.ref = WXDomObject.ROOT;</div><div class="line">    domObject.updateStyle(style);</div><div class="line">    transformStyle(domObject, <span class="keyword">true</span>);</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">final</span> WXComponent component = mWXRenderManager.createBodyOnDomThread(mInstanceId, domObject);</div><div class="line">        AddDomInfo addDomInfo = <span class="keyword">new</span> AddDomInfo();</div><div class="line">        addDomInfo.component = component;</div><div class="line">        mAddDom.put(domObject.ref, addDomInfo);</div><div class="line"></div><div class="line">        mNormalTasks.add(<span class="keyword">new</span> IWXRenderTask() &#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        public <span class="keyword">void</span> execute() &#123;</div><div class="line">            WXSDKInstance instance = WXSDKManager.getInstance().getSDKInstance(mInstanceId);</div><div class="line">            <span class="keyword">if</span> (instance == <span class="keyword">null</span> || instance.getContext() == <span class="keyword">null</span>) &#123;</div><div class="line">                WXLogUtils.e(<span class="string">"instance is null or instance is destroy!"</span>);</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                mWXRenderManager.createBody(mInstanceId, component);</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                WXLogUtils.e(<span class="string">"create body failed."</span>, e);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        public <span class="built_in">String</span> toString() &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"createBody"</span>;</div><div class="line">        &#125;</div><div class="line">        &#125;);</div><div class="line">        animations.add(<span class="keyword">new</span> Pair&lt;<span class="built_in">String</span>, <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt;&gt;(domObject.ref,domObject.style));</div><div class="line">        mDirty = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (instance != <span class="keyword">null</span>) &#123;</div><div class="line">        instance.commitUTStab(WXConst.DOM_MODULE, WXErrorCode.WX_SUCCESS);</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</div><div class="line"></div><div class="line">        WXLogUtils.e(<span class="string">"create body in dom thread failed."</span> + e.getMessage());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个函数中有一句parseInner函数把element这个JSONObject转换成domObject，给他加上了各种type、<br>event、childern等属性<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">   * Parse the jsonObject to &#123;@link WXDomObject&#125; recursively</div><div class="line">   * @param map the original JSONObject</div><div class="line">   * @return Dom Object corresponding to the JSONObject.</div><div class="line">*/</div><div class="line"><span class="keyword">private</span> WXDomObject parseInner(<span class="keyword">JSONObject</span> <span class="built_in">map</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">map</span> == <span class="keyword">null</span> || <span class="built_in">map</span>.<span class="built_in">size</span>() &lt;= <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">String</span> type = (<span class="keyword">String</span>) <span class="built_in">map</span>.<span class="built_in">get</span>(<span class="string">"type"</span>);</div><div class="line">    WXDomObject domObject = WXDomObjectFactory.newInstance(type);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(domObject==<span class="keyword">null</span>)&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    domObject.type = type;</div><div class="line">    domObject.ref = (<span class="keyword">String</span>) <span class="built_in">map</span>.<span class="built_in">get</span>(<span class="string">"ref"</span>);</div><div class="line">    <span class="keyword">Object</span> style = <span class="built_in">map</span>.<span class="built_in">get</span>(<span class="string">"style"</span>);</div><div class="line">    <span class="keyword">if</span> (style != <span class="keyword">null</span> &amp;&amp; style <span class="keyword">instanceof</span> <span class="keyword">JSONObject</span>) &#123;</div><div class="line">      domObject.style = <span class="keyword">new</span> WXStyle();</div><div class="line">      putAll(domObject.style, (<span class="keyword">JSONObject</span>) style);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">Object</span> attr = <span class="built_in">map</span>.<span class="built_in">get</span>(<span class="string">"attr"</span>);</div><div class="line">    <span class="keyword">if</span> (attr != <span class="keyword">null</span> &amp;&amp; attr <span class="keyword">instanceof</span> <span class="keyword">JSONObject</span>) &#123;</div><div class="line">      domObject.attr = <span class="keyword">new</span> WXAttr();</div><div class="line">      putAll(domObject.attr, (<span class="keyword">JSONObject</span>) attr);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">Object</span> event = <span class="built_in">map</span>.<span class="built_in">get</span>(<span class="string">"event"</span>);</div><div class="line">    <span class="keyword">if</span> (event != <span class="keyword">null</span> &amp;&amp; event <span class="keyword">instanceof</span> <span class="keyword">JSONArray</span>) &#123;</div><div class="line">      domObject.event = <span class="keyword">new</span> WXEvent();</div><div class="line">      <span class="keyword">JSONArray</span> eventArray = (<span class="keyword">JSONArray</span>) event;</div><div class="line">      <span class="built_in">int</span> count = eventArray.<span class="built_in">size</span>();</div><div class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; count; ++i) &#123;</div><div class="line">        domObject.event.<span class="built_in">add</span>(eventArray.getString(i));</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">Object</span> children = <span class="built_in">map</span>.<span class="built_in">get</span>(<span class="string">"children"</span>);</div><div class="line">    <span class="keyword">if</span> (children != <span class="keyword">null</span> &amp;&amp; children <span class="keyword">instanceof</span> <span class="keyword">JSONArray</span>) &#123;</div><div class="line">      domObject.children = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">      <span class="keyword">JSONArray</span> childrenArray = (<span class="keyword">JSONArray</span>) children;</div><div class="line">      <span class="built_in">int</span> count = childrenArray.<span class="built_in">size</span>();</div><div class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; count; ++i) &#123;</div><div class="line">        domObject.children.<span class="built_in">add</span>(parseInner(childrenArray.getJSONObject(i)));</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> domObject;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这createBody函数就是根据JSONObject创建一个创建body的命令并且推到队列中。<br>队列里会执行这么一句话，执行了mWXRenderManager的createBodyOnDomThread函数<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">final WXComponent component</span> = mWXRenderManager.createBodyOnDomThread(mInstanceId, domObject);</div></pre></td></tr></table></figure></p>
<p>看WXRenderManager中的createBodyOnDomThread函数<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> WXComponent createBodyOnDomThread(String instanceId, WXDomObject domObject) &#123;</div><div class="line">    WXRenderStatement statement = mRegistries.<span class="keyword">get</span>(instanceId);</div><div class="line">    <span class="keyword">if</span> (statement == <span class="literal">null</span>) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> statement.createBodyOnDomThread(domObject);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>又是调用了WXRenderStatement中的对应函数<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">WXComponent createBodyOnDomThread(WXDomObject dom) &#123;</div><div class="line">    <span class="keyword">if</span> (mWXSDKInstance == <span class="literal">null</span>) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">    &#125;</div><div class="line">    WXDomObject domObject = <span class="keyword">new</span> <span class="type">WXDomObject</span>();</div><div class="line">    domObject.type = WXBasicComponentType.DIV;</div><div class="line">    domObject.ref = <span class="string">"god"</span>;</div><div class="line">    mGodComponent = (WXVContainer) WXComponentFactory.<span class="keyword">new</span><span class="type">Instance</span>(mWXSDKInstance, domObject, <span class="literal">null</span>);</div><div class="line">    mGodComponent.createView(<span class="literal">null</span>, <span class="number">-1</span>);</div><div class="line">    <span class="keyword">if</span> (mGodComponent == <span class="literal">null</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (WXEnvironment.isApkDebugable()) &#123;</div><div class="line">        WXLogUtils.e(<span class="string">"rootView failed!"</span>);</div><div class="line">      &#125;</div><div class="line">      <span class="comment">//TODO error callback</span></div><div class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">    &#125;</div><div class="line">    FrameLayout frameLayout = (FrameLayout) mGodComponent.getHostView();</div><div class="line">    ViewGroup.LayoutParams layoutParams = <span class="keyword">new</span> <span class="type">LayoutParams</span>(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);</div><div class="line">    frameLayout.setLayoutParams(layoutParams);</div><div class="line">    frameLayout.setBackgroundColor(Color.TRANSPARENT);</div><div class="line"></div><div class="line">    WXComponent component = generateComponentTree(dom, mGodComponent);</div><div class="line">    mGodComponent.addChild(component);</div><div class="line">    mRegistry.put(component.getRef(), component);</div><div class="line">    <span class="keyword">return</span> component;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个函数就是创建WXComponent，但是component是由其中generateComponentTree这个函数是把之前传进来的WXDomObject转换成Component的<br><figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> WXComponent generateComponentTree(WXDomObject dom, WXVContainer <span class="keyword">parent</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (dom == <span class="keyword">null</span> || <span class="keyword">parent</span> == <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    WXComponent component = WXComponentFactory.newInstance(mWXSDKInstance, dom,</div><div class="line">                                                           <span class="keyword">parent</span>, <span class="keyword">parent</span>.isLazy());</div><div class="line"></div><div class="line">    mRegistry.put(dom.ref, component);</div><div class="line">    <span class="keyword">if</span> (component <span class="keyword">instanceof</span> WXVContainer) &#123;</div><div class="line">      WXVContainer parentC = (WXVContainer) component;</div><div class="line">      <span class="keyword">int</span> count = dom.childCount();</div><div class="line">      WXDomObject child = <span class="keyword">null</span>;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; ++i) &#123;</div><div class="line">        child = dom.getChild(i);</div><div class="line">        <span class="keyword">if</span> (child != <span class="keyword">null</span>) &#123;</div><div class="line">          parentC.addChild(generateComponentTree(child, parentC));</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> component;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>终于得到WXComponent后，在WXDOMStatement.createBody中接着就执行了<br>mWXRenderManager.createBody(mInstanceId, component);同样的它又<br>是调用了statement.createBody(component);<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">   * create RootView ，every weex Instance View has a rootView;</div><div class="line">   * @see com.taobao.weex.dom.WXDomStatement#createBody(JSONObject)</div><div class="line">*/</div><div class="line">void createBody(WXComponent component) &#123;</div><div class="line">    long start = System.currentTimeMillis()<span class="comment">;</span></div><div class="line">    component.createView(mGodComponent, -<span class="number">1</span>)<span class="comment">;</span></div><div class="line">    if (WXEnvironment.isApkDebugable()) &#123;</div><div class="line">      WXLogUtils.renderPerformanceLog(<span class="string">"createView"</span>, (System.currentTimeMillis() - start))<span class="comment">;</span></div><div class="line">    &#125;</div><div class="line">    start = System.currentTimeMillis()<span class="comment">;</span></div><div class="line">    component.applyLayoutAndEvent(component)<span class="comment">;</span></div><div class="line">    component.<span class="keyword">bindData(component);</span></div><div class="line"></div><div class="line">    if (WXEnvironment.isApkDebugable()) &#123;</div><div class="line">      WXLogUtils.renderPerformanceLog(<span class="string">"bind"</span>, (System.currentTimeMillis() - start))<span class="comment">;</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if (component <span class="keyword">instanceof </span>WXScroller) &#123;</div><div class="line">      WXScroller <span class="keyword">scroller </span>= (WXScroller) component<span class="comment">;</span></div><div class="line">      if (<span class="keyword">scroller.getInnerView() </span><span class="keyword">instanceof </span><span class="keyword">ScrollView) </span>&#123;</div><div class="line">        mWXSDKInstance.setRootScrollView((<span class="keyword">ScrollView) </span><span class="keyword">scroller.getInnerView());</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    mWXSDKInstance.setRootView(mGodComponent.getRealView())<span class="comment">;</span></div><div class="line">    if (mWXSDKInstance.getRenderStrategy() != WXRenderStrategy.APPEND_ONCE) &#123;</div><div class="line">      mWXSDKInstance.onViewCreated(mGodComponent)<span class="comment">;</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最终这两句话创建rootview并且触发mWXSDKInstance的onViewCreated<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">mWXSDKInstance</span><span class="selector-class">.setRootView</span>(mGodComponent.getRealView());</div><div class="line"><span class="selector-tag">if</span> (mWXSDKInstance.getRenderStrategy() != WXRenderStrategy.APPEND_ONCE) &#123;</div><div class="line">    <span class="selector-tag">mWXSDKInstance</span><span class="selector-class">.onViewCreated</span>(mGodComponent);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="4-渲染结束调用过程"><a href="#4-渲染结束调用过程" class="headerlink" title="4 渲染结束调用过程"></a>4 渲染结束调用过程</h1><h2 id="4-1-当method是CREATE-FINISH时，调用createFinish"><a href="#4-1-当method是CREATE-FINISH时，调用createFinish" class="headerlink" title="4.1 当method是CREATE_FINISH时，调用createFinish"></a>4.1 当method是CREATE_FINISH时，调用createFinish</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Notify the &#123;@link WXDomManager&#125; that creation of dom tree is finished.</div><div class="line">  * This notify is given by JS.</div><div class="line">*/</div><div class="line">public void createFinish() &#123;</div><div class="line">    Message msg = Message.obtain()<span class="comment">;</span></div><div class="line">    WXDomTask task = new WXDomTask()<span class="comment">;</span></div><div class="line">    task.<span class="keyword">instanceId </span>= mWXSDKInstance.getInstanceId()<span class="comment">;</span></div><div class="line">    msg.what = WXDomHandler.MsgType.WX_DOM_CREATE_FINISH<span class="comment">;</span></div><div class="line">    msg.obj = task<span class="comment">;</span></div><div class="line">    WXSDKManager.getInstance().getWXDomManager().sendMessage(msg)<span class="comment">;</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>getWXDomManager的sendMessage调用了mDomHandler.sendMessage(msg);<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line">WXDomHandler.java</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Handler for dom operations.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> class WXDomHandler implements Handler.Callback &#123;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * The batch operation in dom thread will run at most once in 16ms.</div><div class="line">   */</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> DELAY_TIME = <span class="number">16</span>;<span class="comment">//ms</span></div><div class="line">  <span class="keyword">private</span> WXDomManager mWXDomManager;</div><div class="line">  <span class="keyword">private</span> <span class="built_in">boolean</span> mHasBatch = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> WXDomHandler(WXDomManager domManager) &#123;</div><div class="line">    mWXDomManager = domManager;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @Override</div><div class="line">  <span class="keyword">public</span> <span class="built_in">boolean</span> handleMessage(Message msg) &#123;</div><div class="line">    <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">int</span> what = msg.what;</div><div class="line">    <span class="keyword">Object</span> obj = msg.obj;</div><div class="line">    WXDomTask task = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> WXDomTask) &#123;</div><div class="line">      task = (WXDomTask) obj;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (!mHasBatch) &#123;</div><div class="line">      mHasBatch = <span class="keyword">true</span>;</div><div class="line">      mWXDomManager.sendEmptyMessageDelayed(WXDomHandler.MsgType.WX_DOM_BATCH, DELAY_TIME);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">switch</span> (what) &#123;</div><div class="line">      <span class="keyword">case</span> MsgType.WX_DOM_CREATE_BODY:</div><div class="line">        mWXDomManager.createBody(task.instanceId, (<span class="keyword">JSONObject</span>) task.args.<span class="built_in">get</span>(<span class="number">0</span>));</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> MsgType.WX_DOM_UPDATE_ATTRS:</div><div class="line">        mWXDomManager.updateAttrs(task.instanceId, (<span class="keyword">String</span>) task.args.<span class="built_in">get</span>(<span class="number">0</span>), (<span class="keyword">JSONObject</span>) task.args.<span class="built_in">get</span>(<span class="number">1</span>));</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> MsgType.WX_DOM_UPDATE_STYLE:</div><div class="line">        mWXDomManager.updateStyle(task.instanceId, (<span class="keyword">String</span>) task.args.<span class="built_in">get</span>(<span class="number">0</span>), (<span class="keyword">JSONObject</span>) task.args.<span class="built_in">get</span>(<span class="number">1</span>));</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> MsgType.WX_DOM_ADD_DOM:</div><div class="line">        mWXDomManager.addDom(task.instanceId, (<span class="keyword">String</span>) task.args.<span class="built_in">get</span>(<span class="number">0</span>), (<span class="keyword">JSONObject</span>) task.args.<span class="built_in">get</span>(<span class="number">1</span>), (Integer) task.args.<span class="built_in">get</span>(<span class="number">2</span>));</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> MsgType.WX_DOM_REMOVE_DOM:</div><div class="line">        mWXDomManager.removeDom(task.instanceId, (<span class="keyword">String</span>) task.args.<span class="built_in">get</span>(<span class="number">0</span>));</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> MsgType.WX_DOM_MOVE_DOM:</div><div class="line">        mWXDomManager.moveDom(task.instanceId, (<span class="keyword">String</span>) task.args.<span class="built_in">get</span>(<span class="number">0</span>), (<span class="keyword">String</span>) task.args.<span class="built_in">get</span>(<span class="number">1</span>), (Integer) task.args.<span class="built_in">get</span>(<span class="number">2</span>));</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> MsgType.WX_DOM_ADD_EVENT:</div><div class="line">        mWXDomManager.addEvent(task.instanceId, (<span class="keyword">String</span>) task.args.<span class="built_in">get</span>(<span class="number">0</span>), (<span class="keyword">String</span>) task.args.<span class="built_in">get</span>(<span class="number">1</span>));</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> MsgType.WX_DOM_REMOVE_EVENT:</div><div class="line">        mWXDomManager.removeEvent(task.instanceId, (<span class="keyword">String</span>) task.args.<span class="built_in">get</span>(<span class="number">0</span>), (<span class="keyword">String</span>) task.args.<span class="built_in">get</span>(<span class="number">1</span>));</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> MsgType.WX_DOM_CREATE_FINISH:</div><div class="line">        mWXDomManager.createFinish(task.instanceId);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> MsgType.WX_DOM_REFRESH_FINISH:</div><div class="line">        mWXDomManager.refreshFinish(task.instanceId);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> MsgType.WX_DOM_UPDATE_FINISH:</div><div class="line">        mWXDomManager.updateFinish(task.instanceId);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> MsgType.WX_ANIMATION:</div><div class="line">        mWXDomManager.startAnimation(task.instanceId,</div><div class="line">                                     (<span class="keyword">String</span>) task.args.<span class="built_in">get</span>(<span class="number">0</span>),</div><div class="line">                                     (<span class="keyword">String</span>) task.args.<span class="built_in">get</span>(<span class="number">1</span>),</div><div class="line">                                     (<span class="keyword">String</span>) task.args.<span class="built_in">get</span>(<span class="number">2</span>));</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> MsgType.WX_DOM_BATCH:</div><div class="line">        mWXDomManager.batch();</div><div class="line">        mHasBatch = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line"></div><div class="line">      <span class="keyword">case</span> MsgType.WX_DOM_SCROLLTO:</div><div class="line">        mWXDomManager.scrollToDom(task.instanceId, (<span class="keyword">String</span>) task.args.<span class="built_in">get</span>(<span class="number">0</span>), (<span class="keyword">JSONObject</span>) task.args.<span class="built_in">get</span>(<span class="number">1</span>));</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> MsgType.WX_DOM_ADD_RULE:</div><div class="line">        mWXDomManager.addRule((<span class="keyword">String</span>) task.args.<span class="built_in">get</span>(<span class="number">0</span>), (<span class="keyword">JSONObject</span>) task.args.<span class="built_in">get</span>(<span class="number">1</span>));</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">default</span>:</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> class MsgType &#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> WX_DOM_CREATE_BODY = <span class="number">0x0</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> WX_DOM_UPDATE_ATTRS = <span class="number">0x01</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> WX_DOM_UPDATE_STYLE = <span class="number">0x02</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> WX_DOM_ADD_DOM = <span class="number">0x03</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> WX_DOM_REMOVE_DOM = <span class="number">0x04</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> WX_DOM_MOVE_DOM = <span class="number">0x05</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> WX_DOM_ADD_EVENT = <span class="number">0x06</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> WX_DOM_REMOVE_EVENT = <span class="number">0x07</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> WX_DOM_SCROLLTO = <span class="number">0x08</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> WX_DOM_CREATE_FINISH = <span class="number">0x09</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> WX_DOM_REFRESH_FINISH = <span class="number">0x0a</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> WX_DOM_UPDATE_FINISH = <span class="number">0x0b</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> WX_ANIMATION=<span class="number">0xc</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> WX_DOM_ADD_RULE=<span class="number">0xd</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> WX_DOM_BATCH = <span class="number">0xff</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最终调用了mWXDomManager中的对应方法，而WXDomManager中最终又调用了WXDomStatement中的对应方法。</p>
<h2 id="4-2-WXDomStatement-java"><a href="#4-2-WXDomStatement-java" class="headerlink" title="4.2 WXDomStatement.java"></a>4.2 WXDomStatement.java</h2><p>weex.dom.WXDomStatement调用createFinish，通知WXRenderManager，given view is finished<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Create a command object for notifying &#123;<span class="doctag">@link</span> WXRenderManager&#125; that the process of creating</div><div class="line">  * given view is finished, and put the command object in the queue.</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">createFinish</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mDestroy) &#123;</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> WXDomObject root = mRegistry.get(WXDomObject.ROOT);</div><div class="line">    mNormalTasks.add(<span class="keyword">new</span> IWXRenderTask() &#123;</div><div class="line"></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</div><div class="line">        mWXRenderManager.createFinish(mInstanceId,</div><div class="line">                                      (<span class="keyword">int</span>) root.getLayoutWidth(),</div><div class="line">                                      (<span class="keyword">int</span>) root.getLayoutHeight());</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="keyword">public</span> <span class="function">String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"createFinish"</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    mDirty = <span class="keyword">true</span>;</div><div class="line">    WXSDKInstance instance = WXSDKManager.getInstance().getSDKInstance(mInstanceId);</div><div class="line">    <span class="keyword">if</span> (instance != <span class="keyword">null</span>) &#123;</div><div class="line">      instance.commitUTStab(WXConst.DOM_MODULE, WXErrorCode.WX_SUCCESS);</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h2 id="4-3-渲染完触发回调"><a href="#4-3-渲染完触发回调" class="headerlink" title="4.3 渲染完触发回调"></a>4.3 渲染完触发回调</h2><p>WXRenderStatement调用createFinish，触发mWXSDKInstance.onViewCreated(mGodComponent);</p>
]]></content>
      
        <categories>
            
            <category> 自学 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Weex </tag>
            
            <tag> android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[白帽子讲web安全]]></title>
      <url>http://localhost:4000/blog/2016/05/11/2016-05-11-%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%B2web%E5%AE%89%E5%85%A8%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>阿里巴巴高级安全专家吴翰清（道哥）写的入门书<br><a id="more"></a></p>
<h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><ul>
<li>安全三要素<ul>
<li>机密性、完整性、可用性</li>
</ul>
</li>
</ul>
<h1 id="第二章-浏览器安全"><a href="#第二章-浏览器安全" class="headerlink" title="第二章 浏览器安全"></a>第二章 浏览器安全</h1><ul>
<li>限制了来自不同源的document或者脚本对当前document读取或者设置某些属性</li>
<li>恶意网址拦截主要靠黑名单</li>
</ul>
<h1 id="第三章-跨站脚本攻击-XSS"><a href="#第三章-跨站脚本攻击-XSS" class="headerlink" title="第三章 跨站脚本攻击(XSS)"></a>第三章 跨站脚本攻击(XSS)</h1><ul>
<li>全称是cross site script，为了和css区分开</li>
<li><p>根据效果不同可以分为三类</p>
<ul>
<li><p>反射型XSS<br>把用户输入数据反射到浏览器，比如输入文本中有如下内容</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">"<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">alert()</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这样的内容到达浏览器后脚本就会被执行</p>
</li>
<li>存储型XSS<br>输入数据存储在服务器端，效果持久，比如一篇博客，博客内容中有攻击脚本，那每个访问这篇博客的用户都将被攻击</li>
<li>DOM Based XSS<br>通过修改页面DOM来实现执行攻击脚本</li>
</ul>
</li>
<li>常见的攻击有劫持cookie</li>
<li>防御方法主要有：<ul>
<li>对输出到html中的变量进行htmlEncode，就是对特殊符号比如‘&lt;、&amp;、&gt;’等进行转义。</li>
<li>JavaScript代码则进行JavaScriptEncode，变量包括在引号内，防御哪些攻击代码被直接执行。</li>
</ul>
</li>
</ul>
<h1 id="第四章-跨站请求伪造"><a href="#第四章-跨站请求伪造" class="headerlink" title="第四章 跨站请求伪造"></a>第四章 跨站请求伪造</h1><ul>
<li>浏览器的session cookie在浏览器生命周期内都是有效的，所以新开一个页面，也是可以发送cookie的。<br>所以常见的攻击模式就是伪造一个页面，诱使用户在点开想要攻击的页面后再点击该页面，该页面中伪造<br>一个攻击请求，因为还在同一个浏览器进程中，所以session cookie会被发送，如果被攻击站点的cookie是被用<br>来认证的话，那攻击就成功了。但是目前主流浏览器会拦截第三方cookie，即那些会保持在本地的cookie。</li>
<li>防御手段主要有：<ul>
<li>验证码。这样伪造的请求就不能自动发送了，必须通过交互的方式填验证码才能发送</li>
<li>Referer check。因为页面和页面之间的跳转是有一定的逻辑关系的，所以每次处理请求时检测Referer可以<br>过滤掉很多异常请求。但是由于隐私或者其他情况，很多时候没法取得Referer，所以这个方法可用性不是很强。</li>
<li>Token。攻击之所以可以成功，是因为攻击者很容易从URL中猜测出如何去构造一个请求。如果我把请求参数进行<br>加密，那攻击者就没法准确的构造出正确的请求了，就没法攻击了。常用的做法是把token当作一个字段或者放在请求头<br>中一起发送，因为攻击则没法构造出准确的token值，就没法发起有效的攻击了。token要注意保密性和随机性。</li>
</ul>
</li>
</ul>
<h1 id="第五章-点击劫持"><a href="#第五章-点击劫持" class="headerlink" title="第五章 点击劫持"></a>第五章 点击劫持</h1><p>这是一种视觉欺骗，攻击者使用个透明的、不可见的iframe覆盖在网页上，然后诱使用户在网页上进行点击操作，从而<br>从而在用户不知情的情况下触发iframe上的一些操作。通过调整iframe的位置，可以让iframe上的某些按钮或者<br>链接覆盖在用户会点击的位置，从而实现攻击。</p>
<h1 id="第六章-HTML5安全"><a href="#第六章-HTML5安全" class="headerlink" title="第六章 HTML5安全"></a>第六章 HTML5安全</h1><ul>
<li>由于HTML5有很多新标签，以前的防护规则可能会没有考虑到这些新标签，所以有可能会发生新的xss攻击</li>
<li>canvas可以绘制图片，通过这一功能，可以在canvas上通过算法自动破解验证码</li>
<li>跨域Access-Control-Allow-Origin:*存在危险</li>
<li>本地存储将给攻击者带来便利，实现跨越页面攻击</li>
<li>postMessage可以实现页面间通信，也给攻击者带来便利</li>
</ul>
<h1 id="第七章-注入攻击"><a href="#第七章-注入攻击" class="headerlink" title="第七章 注入攻击"></a>第七章 注入攻击</h1><p>注入攻击的本质是把用户输入的数据当作代码来执行，违背“数据和代码相隔离原则”。这种攻击必须满足连个条件<br>1：用户能够控制输入。2：原本程序要执行的代码拼接了用户输入的数据。</p>
<ul>
<li>SQL注入<br>就是针对一些查询请求，构造恶意数据，比如添加一个引号，结束原来的sql查询语句，并在后面添加攻击查询语句<ul>
<li>预防这种简单的SQL注入就是使用预编译语句，避免直接拼接用户输入为sql语句。</li>
<li>进行数据过滤，比如检查数据类型</li>
<li>最小权限原则，避免web应用直接使用root，dbowner等高权限账户直接连接数据库</li>
</ul>
</li>
<li>CRLF注入<br>由于CRLF常用作不同语义之间的分隔符，因此注入CRLF字符，就会改变原有的语义，比如日志注入，HTTP头注入</li>
</ul>
<h1 id="第八章-文件上传漏洞"><a href="#第八章-文件上传漏洞" class="headerlink" title="第八章 文件上传漏洞"></a>第八章 文件上传漏洞</h1><ul>
<li>常见的安全问题：<ul>
<li>上传文件是Web脚本语言，服务器的Web容器解释并执行了用户上传的脚本，导致代码执行。</li>
<li>上传文件是钓鱼图片或者包含了脚本的图片，在某些低版本的浏览器会被作为脚本执行。</li>
</ul>
</li>
<li>预防:<ul>
<li>文件上传的目录设置为不可执行</li>
<li>判断文件类型，使用白名单的方式</li>
<li>使用随机的方式改写文件名和路径</li>
<li>文件服务器在不同的域名，由于同源策略，使得很多xss攻击失效</li>
</ul>
</li>
</ul>
<h1 id="第九章-认证与会话管理"><a href="#第九章-认证与会话管理" class="headerlink" title="第九章 认证与会话管理"></a>第九章 认证与会话管理</h1><ul>
<li>session在服务端要设置过期时间，到期强制销毁，防止被攻击者获取了之后就永久有效了。</li>
<li>单点登录，讲风险点集中于一点</li>
</ul>
<h1 id="第十章-访问控制"><a href="#第十章-访问控制" class="headerlink" title="第十章 访问控制"></a>第十章 访问控制</h1><ul>
<li>OAuth是用来解决跨应用授权的问题，比如微博登录等等授权问题。无需提供用户名和密码。</li>
</ul>
<h1 id="第十一章-加密算法与随机数"><a href="#第十一章-加密算法与随机数" class="headerlink" title="第十一章 加密算法与随机数"></a>第十一章 加密算法与随机数</h1><ul>
<li>不使用ECB模式</li>
<li>不使用流密码</li>
<li>使用HMAC-SHA1代替MD5</li>
<li>salts和IV要随机产生</li>
<li>不要自己实现加密算法，尽量使用安全专家已经实现好的库</li>
</ul>
<h1 id="第十二章-Web框架安全"><a href="#第十二章-Web框架安全" class="headerlink" title="第十二章 Web框架安全"></a>第十二章 Web框架安全</h1><ol>
<li>框架是处于基础和底层的位置，所以在这个地方处理安全问题有很大的便利性，可以避免在业务代码中去重复处理很多问题，在业务代码中处理效率低并且可靠性低。</li>
<li>MVC框架安全，现在流行MVC架构，所以可以在框架层面解决很多安全问题。用户提交的数据都会经过View层，所以可以在View层统一处理很多安全问题，View层一般都会有模板引擎，可以在这个地方解决XSS攻击。在Model层就可以解决SQL注入等问题。</li>
<li>框架自身的代码也需注意安全问题。</li>
</ol>
<h1 id="第十三章-应用层拒绝服务攻击"><a href="#第十三章-应用层拒绝服务攻击" class="headerlink" title="第十三章 应用层拒绝服务攻击"></a>第十三章 应用层拒绝服务攻击</h1><ol>
<li>DDOS攻击又称分布式拒绝服务，利用合理请求造成服务过载，导致服务不可用。</li>
<li>CC攻击，指的是通过对一些消耗资源较大的页面不断发起请求，造成服务器资源耗尽。因为这是一种消耗资源的攻击，所以防御方法就是优化应用，减少资源的消耗。防御方法主要有对使用很频繁的资源放到memcache中，命中了memcache后消耗服务器资源就很很少了、上CDN分流、对每一个客户端做访问频次限制。</li>
<li>验证码防御，但是目前自动识别验证码的技术已经非常成熟了，所以防御效果并不好。</li>
<li>资源耗尽攻击：发送畸形的HTTP请求，造成服务器以为请求还没结束，故一直占用资源。</li>
<li>正则表达式写的不好，也会造成正则表达式引擎资源耗尽，造成服务器性能下降，服务不可用。</li>
<li>总之就是得清洗流量，准确识别出攻击对象，拒绝攻击对象的访问。</li>
</ol>
<h1 id="第十四章-PHP安全"><a href="#第十四章-PHP安全" class="headerlink" title="第十四章 PHP安全"></a>第十四章 PHP安全</h1><ol>
<li>文件包含漏洞，php的include函数不会在意被包含的文件是什么类型，都将作为php代码执行，所以如果文件路径是动态变量的方式传入的，那就很容易被攻击，或者被攻击者读取到敏感文件从而获取敏感信息。</li>
<li>变量覆盖，php4.2.0之前版本，默认变量可以来自不同地方，比如页面表达和cookie，就非常容易被攻击者覆盖原来程序内的全局变量，实现攻击。</li>
<li>建议配置  <figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">register_globals = off;</div><div class="line">open_basedir = /home/web/html/ 限定只能操作指定目录下的文件</div><div class="line">allow_url_include  = off</div><div class="line">display_errors = off</div><div class="line">log_errors = off</div><div class="line">session.cookie_httponly = 1</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="第十五章-Web-Server-配置安全"><a href="#第十五章-Web-Server-配置安全" class="headerlink" title="第十五章 Web Server 配置安全"></a>第十五章 Web Server 配置安全</h1><ol>
<li>Apache安全。最小权限原则，尽可能减少不必要的Module，对于要使用的Module，要检查其对应版本是否存在已知的安全漏洞。为Apache单独创建一个用户来运行，不能用root/admin身份。保护好log。</li>
<li>及时更新补丁</li>
<li>Tomcat 删掉后台，防止密码被盗取从而控制了整个server</li>
</ol>
<h1 id="第十六章-互联网业务安全"><a href="#第十六章-互联网业务安全" class="headerlink" title="第十六章 互联网业务安全"></a>第十六章 互联网业务安全</h1><ol>
<li>注重业务逻辑安全，不能在业务逻辑上发生安全问题</li>
<li>优秀的安全方案，必须还要有良好的用户体验和优良的性能</li>
<li>及时拦截、清除产品运行中产生的各种垃圾信息、账号等隐患</li>
</ol>
<h1 id="第十七章-安全开发流程"><a href="#第十七章-安全开发流程" class="headerlink" title="第十七章 安全开发流程"></a>第十七章 安全开发流程</h1><ol>
<li>开发要进行安全培训、开发前确认安全要求、开发中的质量/bug控制、安全和隐私风险评估、设计时就要考虑安全和隐私问题、减少攻击面、威胁建模、使用指定的安全工具、启用不安全的函数、静态动态分析、事件响应机制、最终安全评估、发布存档</li>
<li>使用相应工具进行代码安全审计和安全测试</li>
</ol>
<h1 id="第十八章-安全运营"><a href="#第十八章-安全运营" class="headerlink" title="第十八章 安全运营"></a>第十八章 安全运营</h1><ol>
<li>建立漏洞修补流程、安全监控、入侵检测、紧急响应流程</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>5月11号到8月4号，历时85天终于把这本书看完了，收获不少。</p>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> web安全 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript模式读书笔记]]></title>
      <url>http://localhost:4000/blog/2016/02/21/2016-02-21-JavaScript%E6%A8%A1%E5%BC%8F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>模式是针对普通问题的解决方案，更进一步说是解决一类特定问题的模板。所以这本书主要就是提炼出JavaScript中的一些非常好的实践经验，抽象为解决一类问题的模板。里面主要是讲代码模式。如果看了高级程序设计和高性能JavaScript，这本书完全没有必要再看。<br><a id="more"></a></p>
<h1 id="第一章-简介"><a href="#第一章-简介" class="headerlink" title="第一章 简介"></a>第一章 简介</h1><p>基本概念</p>
<h1 id="第二章-基本技巧"><a href="#第二章-基本技巧" class="headerlink" title="第二章 基本技巧"></a>第二章 基本技巧</h1><p>这一章主要讲了一些比较常见的注意事项，比如减少使用全局变量、for-in中注意使用hasOwnProperty()，不要使用eval()，不要给内置类型增加方法，使用===、代码格式等等。</p>
<h1 id="第三章-字面量和构造函数"><a href="#第三章-字面量和构造函数" class="headerlink" title="第三章 字面量和构造函数"></a>第三章 字面量和构造函数</h1><p>总结就是一句话，提倡使用字面量而不是原生的构造函数。严格模式下，自定义的构造函数中的this不会指向window，而是undefined，这点要注意。</p>
<h1 id="第四章-函数"><a href="#第四章-函数" class="headerlink" title="第四章 函数"></a>第四章 函数</h1><ol>
<li>当要传递很多参数给函数时，可以考虑使用一个配置对象来代替这些参数。这样就不需要技术顺序，也更利于阅读和维护。但是不便之处在于需要记住参数名称，而且属性名称无法被压缩。</li>
<li>如果频繁调用同一个函数，并且大多数参数是一样的时候，可以考虑把函数curry化</li>
</ol>
<h1 id="第五章-对象创建模式"><a href="#第五章-对象创建模式" class="headerlink" title="第五章 对象创建模式"></a>第五章 对象创建模式</h1><p>多种不同的模式创建对象，比如用命名空间、method方法实现方法声明。</p>
<h1 id="第六章-代码复用模式"><a href="#第六章-代码复用模式" class="headerlink" title="第六章 代码复用模式"></a>第六章 代码复用模式</h1><ol>
<li><p>利用临时构造函数实现继承</p>
 <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherit</span><span class="params">(C,P)</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;&#125;;</div><div class="line">    F.prototype = P.prototype;</div><div class="line">    C.prototype = <span class="keyword">new</span> F();</div><div class="line">    C.constructor = C;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>解决了共享同一个原型带来的问题，同时还能继续受益于原型链的好处</p>
</li>
</ol>
<h1 id="第七章-设计模式"><a href="#第七章-设计模式" class="headerlink" title="第七章 设计模式"></a>第七章 设计模式</h1><p>没新内容</p>
<h1 id="第八章-DOM和浏览器模式"><a href="#第八章-DOM和浏览器模式" class="headerlink" title="第八章 DOM和浏览器模式"></a>第八章 DOM和浏览器模式</h1><p>没什么新内容</p>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[大众点评数据抓取总结]]></title>
      <url>http://localhost:4000/blog/2016/01/26/2016-01-26-%E5%A4%A7%E4%BC%97%E7%82%B9%E8%AF%84%E6%95%B0%E6%8D%AE%E6%8A%93%E5%8F%96%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h1 id="获取大众点评数据的几种方式的总结"><a href="#获取大众点评数据的几种方式的总结" class="headerlink" title="获取大众点评数据的几种方式的总结"></a>获取大众点评数据的几种方式的总结</h1><a id="more"></a>
<h2 id="官方API"><a href="#官方API" class="headerlink" title="官方API"></a><a href="http://developer.dianping.com/" target="_blank" rel="external">官方API</a></h2><p>它在2015.9.30之后就不维护了，升级后的新平台只对商务合作使用，但是只要不关掉服务，还是可以获取的，从他的官方API要获取店铺信息也有两种方式</p>
<ol>
<li>先通过接口获取团购信息，就可以得到团购中的店铺id，然后再获取店铺详情。这种方式问题就在于那些没有团购的店铺的信息就没法获取了，但是从我的获取结果看，大概可以获得50%左右，而且团购信息是在不断更新的，所以可以获得的店铺数量也是变化的，累积然后去掉重复的，这样可以提过获取数量。通过这个方式在上海获得了5w多个点，并且是自带经纬度信息的，不用geocoder，从大众点评网上看，他在上海仅美食类就有14w+个点</li>
<li>通过搜索接口，直接按地域、分类搜素，得到整个城市的店铺信息。这种方式的问题就是，平台对商户类的接口是有次数限制和频次限制，一天是1w次，频次不能太快。实验的每100次请求，停25s，这个频率没问题，最终获得了9w+数据。</li>
<li>把上面两种方法获得的数据合在一起，去掉重复的，剩下13w+。<br>以上两种方式是用java写的，<a href="https://github.com/ldllidonglin/workspace/tree/master/CrawlDianPing/java" target="_blank" rel="external">代码在github上</a></li>
</ol>
<h2 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h2><h3 id="直接暴力遍历页面"><a href="#直接暴力遍历页面" class="headerlink" title="直接暴力遍历页面"></a>直接暴力遍历页面</h3><p>因为我发现店铺详情页是有规律的，都是www.dianping.com/shop/547234 这样的页面，所以我就想直接暴力遍历页面，实验下来果然不行，会很快被拒绝访问。而且这样的话还有一个很大的问题就是，因为没办法提前知道这个店铺类型，所以页面种类有很多，所以光是获取数据的代码就得根据页面特征，写很多个，分别对应不同的页面。而且这样没法聚焦获得某个城市的数据。只能后期去提取。总之这种方式基本不可行。</p>
<h3 id="从主页进去，正常爬取。"><a href="#从主页进去，正常爬取。" class="headerlink" title="从主页进去，正常爬取。"></a>从主页进去，正常爬取。</h3><p>这样就可以入口url就限定城市和分类，而且页面的规律很好找的，比如上海美食的链接就是：www.dianping.com/search/category/1/10。但是大众点评这种站对反爬措施肯定做的很好，我没有找到免费的代理ip，只能模拟下User-Agent，最终从店铺详情信息进去获取的，然后很快就会返回10056。要是直接在搜索的列表页就去获取数据，会更快就返回10056 拒绝访问。我猜他们反爬中对搜索页的访问频次限制的更加严格，而且正常浏览是不会只访问列表而不进去店铺详情页的。这个毕竟反反爬我也不在行，没办法。这个方法基本也是不可取。</p>
<p>技术都是用的很粗糙的技术，直接用python的requests+BeautifulSoup4，没有用开源爬虫。<a href="https://github.com/ldllidonglin/workspace/tree/master/CrawlDianPing/python" target="_blank" rel="external">代码在github上</a></p>
<p><a href="http://zhuanlan.zhihu.com/xlz-d" target="_blank" rel="external">知乎xlzd杂谈-爬虫</a></p>
]]></content>
      
        <categories>
            
            <category> 数据抓取 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据抓取 </tag>
            
            <tag> java </tag>
            
            <tag> 大众点评 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTTP权威指南读书笔记]]></title>
      <url>http://localhost:4000/blog/2016/01/21/2016-01-21-HTTP%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="第一部分-HTTP-Web的基础"><a href="#第一部分-HTTP-Web的基础" class="headerlink" title="第一部分 HTTP:Web的基础"></a>第一部分 HTTP:Web的基础</h1><h2 id="第一章-HTTP概述"><a href="#第一章-HTTP概述" class="headerlink" title="第一章 HTTP概述"></a>第一章 HTTP概述</h2><a id="more"></a>
<ol>
<li>HTTP是应用层协议，建立在TCP/IP之上，Web服务器会为所有HTTP对象数据附加一个MIME 类型，MIME 类型是一种文本标记，表示一种主要的对象类型和一个特定的子类型，中间由一条斜杠来分隔，比如text/html;image/jpeg。</li>
<li><p>HTTP报文是由一行一行的简单字符串组成的，都是纯文本，主要包括三个部分，</p>
<ul>
<li>起始行，报文的第一行就是起始行，在请求报文中用来说明要做些什么，在响应报文中说明出现了什么情况。</li>
<li>首部字段，起始行后面有零个或多个首部字段。每个首部字段都包含一个名字和一个值， 为了便于解析， 两者之间用冒号（:）来分隔。首部以一个空行结束。添加一个首部字段和添加新行一样简单</li>
<li><p>主体，其中包含了所有类型的数据，请求报文是要发送给web服务器的内容，响应报文是要发送给客户端的内容</p>
<p>请求报文范例</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">GET</span> <span class="string">/mumue/archive/2012/04/23/2467072.html</span> HTTP/1.1</div><div class="line"><span class="attribute">Host</span>: www.cnblogs.com</div><div class="line"><span class="attribute">Connection</span>: keep-alive</div><div class="line"><span class="attribute">Cache-Control</span>: max-age=0</div><div class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</div><div class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</div><div class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.85 Safari/537.36</div><div class="line"><span class="attribute">Referer</span>: https://www.google.com.hk/</div><div class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate, sdch</div><div class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.8,en;q=0.6</div><div class="line"><span class="attribute">Cookie</span>: CNZZDATA1255778100=388437504-1442227353-null%7C1442227353; _ga=GA1.2.1845097067.1442111906; _gat=1</div><div class="line"><span class="attribute">If-Modified-Since</span>: Tue, 15 Sep 2015 07:16:13 GMT</div></pre></td></tr></table></figure>
<p>响应报文范例</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</div><div class="line"><span class="symbol">Date:</span> Tue, <span class="number">15</span> Sep <span class="number">2015</span> <span class="number">07</span>:<span class="number">19</span>:<span class="number">07</span> GMT</div><div class="line">Content-Type: text/html; charset=utf<span class="number">-8</span></div><div class="line"><span class="symbol">Connection:</span> keep-alive</div><div class="line"><span class="symbol">Vary:</span> Accept-Encoding</div><div class="line">Cache-Control: private, max-age=<span class="number">10</span></div><div class="line"><span class="symbol">Expires:</span> Tue, <span class="number">15</span> Sep <span class="number">2015</span> <span class="number">07</span>:<span class="number">19</span>:<span class="number">09</span> GMT</div><div class="line">Last-Modified: Tue, <span class="number">15</span> Sep <span class="number">2015</span> <span class="number">07</span>:<span class="number">18</span>:<span class="number">59</span> GMT</div><div class="line">X-UA-Compatible: IE=<span class="number">10</span></div><div class="line">Content-Length: <span class="number">34031</span></div><div class="line"><span class="params">&lt;html&gt;</span></div><div class="line"><span class="params">&lt;head&gt;</span><span class="params">&lt;/head&gt;</span></div><div class="line"><span class="params">&lt;body&gt;</span></div><div class="line">...</div><div class="line"><span class="params">&lt;/body&gt;</span></div><div class="line"><span class="params">&lt;/html&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>目前使用的HTTP协议版本是1.1</p>
</li>
</ol>
<h2 id="第二章-URL与资源"><a href="#第二章-URL与资源" class="headerlink" title="第二章 URL与资源"></a>第二章 URL与资源</h2><ol>
<li>URL的语法基本是这样：<scheme>://<user>:<password>@<host>:<port>/<path></path>;<params>?<query>#<frag>。但没有哪个URL是包含所有组建的。</frag></query></params></port></host></password></user></scheme></li>
<li>由于URL中只能使用英文字母和阿拉伯数字和某些符号，中文等符号是不能使用的，所以就会遇到编码的问题，一般是%+某种方式编码后的结果，比如空格的ASCII码值是20 编码后就是%20。具体的编码方式和浏览器及操作系统本地环境有关。参考文章：<a href="http://www.ruanyifeng.com/blog/2010/02/url_encoding.html" target="_blank" rel="external">阮一峰–关于URL编码</a></li>
</ol>
<h2 id="第三章-HTTP报文"><a href="#第三章-HTTP报文" class="headerlink" title="第三章 HTTP报文"></a>第三章 HTTP报文</h2><ol>
<li>报文的起始行和首部是由行分割的ASCII文本，每行都以一个由两个字符（回车符和换行符）组成的行终止序列作为结束。主体是一个可选的数据块，可以包含文本或二进制数据，也可以是空。</li>
<li>状态码（<a href="http://www.daqianduan.com/4280.html" target="_blank" rel="external">参考文章</a>）<ul>
<li>100~199 信息性状态码</li>
<li>200~299 成功状态码</li>
<li>300~399 重定向状态码 301永久重定向 304 Not MOdified</li>
<li>400~499 客户端错误状态码</li>
<li>500~599 服务器错误状体码</li>
</ul>
</li>
<li>303 307是在HTTP1.1才有的，主要是为了细分302，区分POST请求时如何重定向。在HTTP1.1中，302其实是可以删除的，但是为了兼容HTTP1.0，而且很多服务器对重定向序列的返回码使用并不严格，302还是在大量使用。<ul>
<li>303是返回GET请求的重定向，即重定向的url是GET方式，可以意淫为之前的POST过来的数据已经处理，只需重新请求这个重定向后的GET请求即可。</li>
<li>307 则是由客户端来决定是发送GET还是POST请求。</li>
<li><a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" target="_blank" rel="external">RFC文档-Status Code Definitions</a></li>
<li><a href="http://www.cnblogs.com/cswuyg/p/3871976.html" target="_blank" rel="external">HTTP状态码302、303和307的故事</a></li>
</ul>
</li>
</ol>
<h2 id="第四章-连接管理"><a href="#第四章-连接管理" class="headerlink" title="第四章 连接管理"></a>第四章 连接管理</h2><ol>
<li>TCP的数据是通过名为IP分组（ 或IP数据报）的小数据块来发送的。</li>
<li>Connection字段可以有三种意义：<ul>
<li>其他字段名(表明这些字段将不会被转发)</li>
<li>关键字(HTTP1.1中只定义了Keep-Alive，用于持久连接，HTTP1.1是默认使用这个参数的，除非主动设为close。如果有这个参数，一般会有Keep-Alive: max=5, timeout=120)</li>
<li>Close(传输完成即关闭连接)</li>
</ul>
</li>
<li>只有当连接上所有的报文都有正确的、 自定义报文长度时——也就是说， 实体主体部分<br>的长度都和相应的 Content-Length 一致， 或者是用分块传输编码方式编码的——连接<br>才能持久保持。</li>
</ol>
<h1 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h1><h2 id="第五章-Web服务器"><a href="#第五章-Web服务器" class="headerlink" title="第五章 Web服务器"></a>第五章 Web服务器</h2><p>解析请求报文时，首先解析请求行，获取请求方法、指定的资源标识符以及版本号，然后读取报文首部，如果有主体的话，读取请求主体</p>
<h2 id="第六章-代理"><a href="#第六章-代理" class="headerlink" title="第六章 代理"></a>第六章 代理</h2><ol>
<li>代理的主要作用：<ul>
<li>内容访问控制</li>
<li>集中统一式的安全防火墙</li>
<li>Web缓存</li>
<li>反向代理</li>
<li>转码器</li>
<li>匿名代理</li>
</ul>
</li>
<li>使客户端流量流向代理主要有4种方式<ul>
<li>修改客户端，比如浏览器设置代理，那HTTP请求就直接发送给代理了</li>
<li>修改网络基础设施，直接在路由器或者某些设施上拦截，转向代理</li>
<li>修改DNS，使代理服务器伪装成真实的web服务器名字和ip</li>
<li>修改web服务器，返回重定向到代理服务器上。</li>
</ul>
</li>
</ol>
<h2 id="第七章-缓存"><a href="#第七章-缓存" class="headerlink" title="第七章 缓存"></a>第七章 缓存</h2><ol>
<li>缓存可以节省宽带，加快客户端的反应速度。</li>
<li>HTTP头中可以用来控制缓存的字段主要有<ul>
<li>Expires:Fri, 22 Jan 2016 04:43:59 GMT。绝对时间点，在这个时间点之前都是直接拉取缓存，无需再次请求。但是因为全球各地的时间可能不一样，所以不建议使用这个，而且优先级低于Cache-Control。如果两者同时出现会被覆盖</li>
<li>Cache-Control:max-age=86400。相对时间，即缓存有效期为24小时，24小时内都是直接拉取缓存，无需再次请求。</li>
<li>Last-Modified/If-Modified-Since。请求时带上If-Modified-Since:Wed, 28 Nov 2012 06:02:44 GMT。web服务器收到请求后发现有头If-Modified-Since 则与被请求资源的最后修改时间进行比对。若最后修改时间较新，说明资源又被改动过，则响应整片资源内容。如果没有修改则返回304。响应返回会带上Last-Modified:Wed, 28 Nov 2012 06:02:44 GMT告诉浏览器资源的最后修改时间</li>
<li>Etag/If-None-Match。web服务器响应请求时，告诉浏览器当前资源在服务器的唯一标识（生成规则由服务器自定义）。Apache中，ETag的值，默认是对文件的索引节（INode），大小（Size）和最后修改时间（MTime）进行Hash后得到的。当资源过期时（使用Cache-Control标识的max-age），发现资源具有Etag：05a7bfb2dcdcd1:0声明，客户端会再次向web服务器请求时带上头If-None-Match：05a7bfb2dcdcd1:0（Etag的值）。web服务器收到请求后发现请求头带有If-None-Match 则与被请求资源的相应校验串进行比对，决定返回200或304。</li>
</ul>
</li>
<li>Etag主要是来解决Last-Modified没法解决的问题：时间精确到1秒以内、某些定期生成的文件，内容并没有变化、代理服务器的时间不一致或无法获取准确的文档修改时间。</li>
</ol>
<h2 id="第八章-集成点：网关、隧道及中继"><a href="#第八章-集成点：网关、隧道及中继" class="headerlink" title="第八章 集成点：网关、隧道及中继"></a>第八章 集成点：网关、隧道及中继</h2><ol>
<li>网关可以作为某种翻译器使用，它抽象出了一种能够到达资源的方法。网关是资源和应用程序之间的粘合剂。应用程序可以（通过 HTTP或其他已定义的接口）请求网关来处理某条请求，网关可以提供一条响应。网关可以向数据库发送查询语句，或者生成动态的内容，就像一个门一样： 进去一条请求， 出来一个响应。</li>
<li>隧道就是通过HTTP应用程序访问使用非HTTP协议的应用程序。Web隧道最常见的原因就是要在HTTP连接中嵌入非HTTP流量，这样，这类流量就可以穿过只允许Web流量通过的防火墙了</li>
<li>HTTP中继（relay）是没有完全遵循HTTP规范的简单HTTP代理。中继负责处理HTTP中<br>建立连接的部分，然后对字节进行盲转发。</li>
</ol>
<h2 id="第九章-Web机器人"><a href="#第九章-Web机器人" class="headerlink" title="第九章 Web机器人"></a>第九章 Web机器人</h2><ol>
<li>robots.txt文件用于控制爬虫获取页面的权限。格式为 <figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">User-<span class="string">Agent:</span> slurp</div><div class="line">User-<span class="string">Agent:</span> webcrawler</div><div class="line"><span class="string">Disallow:</span> /<span class="keyword">private</span></div><div class="line">User-<span class="string">Agent:</span> *</div><div class="line"><span class="string">Disallow:</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="第十章-HTTP-NG"><a href="#第十章-HTTP-NG" class="headerlink" title="第十章 HTTP-NG"></a>第十章 HTTP-NG</h2><p>这一章的内容已经没有多大参考价值了，HTTP2.0已经出来了，以谷歌的SPDY技术为主，主要就是异步连接复用，头压缩和请求响应管线化，复用TCP连接。实现缩短网页的加载时间和提高安全性。<br><a href="https://blog.youyoulemon.com/http2-0xie-yi-xiang-jie/" target="_blank" rel="external">HTTP2.0详解</a><br><a href="https://zh.wikipedia.org/wiki/SPDY" target="_blank" rel="external">SPDY 维基百科</a></p>
<h1 id="第三部分-识别、认证与安全"><a href="#第三部分-识别、认证与安全" class="headerlink" title="第三部分 识别、认证与安全"></a>第三部分 识别、认证与安全</h1><h2 id="第十一章-客户端识别与Cookie机制"><a href="#第十一章-客户端识别与Cookie机制" class="headerlink" title="第十一章 客户端识别与Cookie机制"></a>第十一章 客户端识别与Cookie机制</h2><p>识别客户端主要方法有富url，cookie，ip，HTTP请求头，用户登录。cookie是用的最广泛的方法。</p>
<h2 id="第十二章-基本认证机制"><a href="#第十二章-基本认证机制" class="headerlink" title="第十二章 基本认证机制"></a>第十二章 基本认证机制</h2><ol>
<li>基本认证就是用户提供用户名和密码，服务器进行验证，目前广泛采用的认证方案。</li>
<li>缺陷就在于密码是明文发送，容易被截获。需要配合ssl等加密通道结合使用。</li>
</ol>
<h2 id="第十三章-摘要认证"><a href="#第十三章-摘要认证" class="headerlink" title="第十三章 摘要认证"></a>第十三章 摘要认证</h2><ol>
<li>客户端发送密码的摘要而不是发送明文密码。</li>
<li>必须加上随机数，不然被截获好了摘要也就和截获了密码是一样的，加入随机数，保证每次摘要都是不一样的。</li>
</ol>
<h2 id="第十四章-安全HTTP"><a href="#第十四章-安全HTTP" class="headerlink" title="第十四章 安全HTTP"></a>第十四章 安全HTTP</h2><ol>
<li>对称密钥加密技术就是，发送端和接收端要共享相同的密钥k才能进行通信。发送端用共享的密钥来加密报文，并将得到的密文发送给接收端。接收端收到密文，并对其应用解密函数和相同的共享密钥，恢复出原始的明文。</li>
<li>公开密钥加密技术是编码密钥是众所周知的，但只有主机才知道私有的解密密钥，这<br>样，每个人都能找到某个特定主机的公开密钥，密钥的建立变得更加简单。但解码密钥是保密的，因此只有接收端才能对发送给它的报文进行解码。</li>
<li>HTTPS在建立HTTP连接之前会先进行SSL连接，使客户端和服务端建立加密通道，然后忘了报文就全在这个加密通道上进行传输，服务端进行解密后再发送给传输层。</li>
</ol>
<h1 id="第四部分-实体、编码和国际化"><a href="#第四部分-实体、编码和国际化" class="headerlink" title="第四部分 实体、编码和国际化"></a>第四部分 实体、编码和国际化</h1><h2 id="第十五章-实体和编码"><a href="#第十五章-实体和编码" class="headerlink" title="第十五章 实体和编码"></a>第十五章 实体和编码</h2><ol>
<li>Content-Length 首部指示出报文实体主体的字节大小，如果进行了压缩的话，那这个长度指的是压缩后的大小。</li>
<li>Content-Encoding主要有gzip、compress、deflate三种无损压缩算法。gzip效率最高、使用最广泛。</li>
</ol>
<h2 id="第十六章-国际化"><a href="#第十六章-国际化" class="headerlink" title="第十六章 国际化"></a>第十六章 国际化</h2><ol>
<li>服务端通过Content-Type中的charse参数和Content-Language通知客户端文档的字符集和语言。客户端通过Accept-Charset和Accept-Language告知服务端用户可以理解何种语言。</li>
</ol>
<h2 id="第十七章-内容协商与转码"><a href="#第十七章-内容协商与转码" class="headerlink" title="第十七章 内容协商与转码"></a>第十七章 内容协商与转码</h2><ol>
<li>一个URL代表若干个不同的资源的时候，就需要协商具体提供哪个资源。主要有客户端驱动协商、服务器驱动的协商、透明(中间代理)协商。</li>
<li>客户端驱动协商就是服务端返回可选列表，有客户端选择使用哪个。服务端协商就是根据客户端发送过来的信息比如首部或者UA来判定返回哪一个资源。</li>
</ol>
<h1 id="第五部分-内容发布与分发"><a href="#第五部分-内容发布与分发" class="headerlink" title="第五部分 内容发布与分发"></a>第五部分 内容发布与分发</h1><h2 id="第十八章-Web主机托管"><a href="#第十八章-Web主机托管" class="headerlink" title="第十八章 Web主机托管"></a>第十八章 Web主机托管</h2><p>使用托管，可以免去很多烦恼，同时让自己的网站更加可靠，被访问速度更快。</p>
<h2 id="第十九章-发布系统"><a href="#第十九章-发布系统" class="headerlink" title="第十九章 发布系统"></a>第十九章 发布系统</h2><p>这个部分的内容已经有点过时了，但是用visual studio还是可以安装webDAV实现远程发布。现在常用的都是用git或者svn来实现远程代码提交以及发布了。</p>
<h2 id="第二十章-重定向与负载均衡"><a href="#第二十章-重定向与负载均衡" class="headerlink" title="第二十章 重定向与负载均衡"></a>第二十章 重定向与负载均衡</h2><ol>
<li>为了可靠的执行HTTP事务、最小化时延、节约网络带宽，经常需要使用重定向。</li>
</ol>
<h2 id="第二十一章-日记记录与使用情况跟踪"><a href="#第二十一章-日记记录与使用情况跟踪" class="headerlink" title="第二十一章 日记记录与使用情况跟踪"></a>第二十一章 日记记录与使用情况跟踪</h2><p>日志一般都会记录时间、请求端的ip、用户名、请求路径、响应状态码、主体长度</p>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[字符编码笔记]]></title>
      <url>http://localhost:4000/blog/2016/01/18/2016-01-18-%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="ASCII码"><a href="#ASCII码" class="headerlink" title="ASCII码"></a>ASCII码</h1><p>ASCII（American Standard Code for Information Interchange，美国信息互换标准代码）码一共规定了128个字符的编码，比如空格”SPACE”是32（二进制00100000），大写的字母A是65（二进制01000001）。这128个符号（包括32个不能打印出来的控制符号），只占用了一个字节的后面7位，最前面的1位统一规定为0。<br><a id="more"></a><br><figure class="highlight tap"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">ASCII值 控制字符 ASCII值  控制字符 ASCII值 控制字符 ASCII值 控制字符</div><div class="line">0   NUT<span class="number"> 32 </span> (space)<span class="number"> 64 </span> @  <span class="number"> 96 </span> 、</div><div class="line">1   SOH<span class="number"> 33 </span> !  <span class="number"> 65 </span> A  <span class="number"> 97 </span> a</div><div class="line">2   STX<span class="number"> 34 </span> "  <span class="number"> 66 </span> B  <span class="number"> 98 </span> b</div><div class="line">3   ETX<span class="number"> 35 </span> <span class="comment">#   67  C   99  c</span></div><div class="line">4   EOT<span class="number"> 36 </span> $  <span class="number"> 68 </span> D  <span class="number"> 100 </span>d</div><div class="line">5   ENQ<span class="number"> 37 </span> %  <span class="number"> 69 </span> E  <span class="number"> 101 </span>e</div><div class="line">6   ACK<span class="number"> 38 </span> &amp;  <span class="number"> 70 </span> F  <span class="number"> 102 </span>f</div><div class="line">7   BEL<span class="number"> 39 </span> ,  <span class="number"> 71 </span> G  <span class="number"> 103 </span>g</div><div class="line">8   BS <span class="number"> 40 </span> (  <span class="number"> 72 </span> H  <span class="number"> 104 </span>h</div><div class="line">9   HT <span class="number"> 41 </span> )  <span class="number"> 73 </span> I  <span class="number"> 105 </span>i</div><div class="line">10  LF <span class="number"> 42 </span> *  <span class="number"> 74 </span> J  <span class="number"> 106 </span>j</div><div class="line">11  VT <span class="number"> 43 </span> +  <span class="number"> 75 </span> K  <span class="number"> 107 </span>k</div><div class="line">12  FF <span class="number"> 44 </span> ,  <span class="number"> 76 </span> L  <span class="number"> 108 </span>l</div><div class="line">13  CR <span class="number"> 45 </span> -  <span class="number"> 77 </span> M  <span class="number"> 109 </span>m</div><div class="line">14  SO <span class="number"> 46 </span> .  <span class="number"> 78 </span> N  <span class="number"> 110 </span>n</div><div class="line">15  SI <span class="number"> 47 </span> /  <span class="number"> 79 </span> O  <span class="number"> 111 </span>o</div><div class="line">16  DLE<span class="number"> 48 </span><span class="number"> 0 </span> <span class="number"> 80 </span> P  <span class="number"> 112 </span>p</div><div class="line">17  DCI<span class="number"> 49 </span><span class="number"> 1 </span> <span class="number"> 81 </span> Q  <span class="number"> 113 </span>q</div><div class="line">18  DC2<span class="number"> 50 </span><span class="number"> 2 </span> <span class="number"> 82 </span> R  <span class="number"> 114 </span>r</div><div class="line">19  DC3<span class="number"> 51 </span><span class="number"> 3 </span> <span class="number"> 83 </span> S  <span class="number"> 115 </span>s</div><div class="line">20  DC4<span class="number"> 52 </span><span class="number"> 4 </span> <span class="number"> 84 </span> T  <span class="number"> 116 </span>t</div><div class="line">21  NAK<span class="number"> 53 </span><span class="number"> 5 </span> <span class="number"> 85 </span> U  <span class="number"> 117 </span>u</div><div class="line">22  SYN<span class="number"> 54 </span><span class="number"> 6 </span> <span class="number"> 86 </span> V  <span class="number"> 118 </span>v</div><div class="line">23  TB <span class="number"> 55 </span><span class="number"> 7 </span> <span class="number"> 87 </span> W  <span class="number"> 119 </span>w</div><div class="line">24  CAN<span class="number"> 56 </span><span class="number"> 8 </span> <span class="number"> 88 </span> X  <span class="number"> 120 </span>x</div><div class="line">25  EM <span class="number"> 57 </span><span class="number"> 9 </span> <span class="number"> 89 </span> Y  <span class="number"> 121 </span>y</div><div class="line">26  SUB<span class="number"> 58 </span> :  <span class="number"> 90 </span> Z  <span class="number"> 122 </span>z</div><div class="line">27  ESC<span class="number"> 59 </span> ;  <span class="number"> 91 </span> [  <span class="number"> 123 </span>&#123;</div><div class="line">28  FS <span class="number"> 60 </span> &lt;  <span class="number"> 92 </span> /  <span class="number"> 124 </span>|</div><div class="line">29  GS <span class="number"> 61 </span> =  <span class="number"> 93 </span> ]  <span class="number"> 125 </span>&#125;</div><div class="line">30  RS <span class="number"> 62 </span> &gt;  <span class="number"> 94 </span> ^  <span class="number"> 126 </span>`</div><div class="line">31  US <span class="number"> 63 </span> ?  <span class="number"> 95 </span> _  <span class="number"> 127 </span>DEL</div></pre></td></tr></table></figure></p>
<p><a href="http://tool.oschina.net/commons?type=4" target="_blank" rel="external">在线对照表</a></p>
<h1 id="Unicode字符集"><a href="#Unicode字符集" class="headerlink" title="Unicode字符集"></a>Unicode字符集</h1><p>Unicode就是来解决同一个二进制数字会在不同的编码方式时，被解释成不一样的符号的问题，Unicode是一个很大的集合，可以容纳100w+个字符，而且是独一无二的。但是它只规定了符号的二进制代码，并没有规定二进制代码如何存储、传输，所以导致出现了多种Unicode的存储方式。在unicode字符集里，一个中文字符占两个字节，</p>
<h2 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h2><p>一种变长的编码方式，可以用1-4个字节来表示一个字符，无存储顺序的问题，所以一律不要带BOM</p>
<ol>
<li>对于单字节符号，第一位是0，后7位是这个符号的unicode码，所以英语字母的UTF-8编码和ASCII是一样的</li>
<li>对于2个及以上字节的符号，第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的unicode码。</li>
<li>一个中文字符占3个字节</li>
</ol>
<p>比如 ‘汉’子的unicode编码是\u00006C49 转换成二进制就是01101100 01001001 所以UTF-8编码就应该是 11100110 10110001 10001001 再换成成16进制就是UTF-8编码就是 E6B189</p>
<h2 id="UTF-16"><a href="#UTF-16" class="headerlink" title="UTF-16"></a>UTF-16</h2><p>UTF-16 以16位无符号整为单位，以两个字节来表示一个字符</p>
<h2 id="UTF-32"><a href="#UTF-32" class="headerlink" title="UTF-32"></a>UTF-32</h2><p>使用4字节的数字来表达每个字母、符号，或者表意文字，很少使用，定义的范围太大，大部分字符使用不到，数据冗余性太大</p>
<h1 id="GB2312"><a href="#GB2312" class="headerlink" title="GB2312"></a>GB2312</h1><p>又称国标码，是一个简化字的编码规范，用两个字节表示一个符号，但是每个字节采用七位编码，共有7445个图形字符，汉字6768个</p>
<h1 id="Big5"><a href="#Big5" class="headerlink" title="Big5"></a>Big5</h1><p>是一个繁体字编码，所以主要是港澳台在使用，也是双字节编码</p>
<h1 id="GBK"><a href="#GBK" class="headerlink" title="GBK"></a>GBK</h1><p>是GB2312的扩展，其中k即kuo的简写，共收录了21886个图形符号，GB2312中的汉字的编码与GBK中汉字的相同，GBK包含繁体字但是和Big5编码不一样。</p>
<h1 id="ANSI"><a href="#ANSI" class="headerlink" title="ANSI"></a>ANSI</h1><p>(American National Standard Institite)美国国家标准协会。每个国家自己制定自己的文字编码规则，并得到ANSI的认可。这个是windows自带的笔记本另存的时候常见的，其实就是根据当前本地环境选定具体的编码，比如简体中文的windows就是GBK。同时在windows下，会在UTF-8文件中使用BOM，而且把带有BOM的UTF-16/LE 称作Unicode编码</p>
<h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><p>Byte Order Mark的简称，是为 UTF-16 和 UTF-32 准备的，用于标记字节序（byte order）</p>
<h1 id="参考博文"><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h1><p><a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank" rel="external">字符编码笔记：ASCII，Unicode和UTF-8 by 阮一峰</a><br><a href="https://www.zhihu.com/question/20167122" target="_blank" rel="external">带 BOM 的 UTF-8」和「无 BOM 的 UTF-8」有什么区别？网页代码一般使用哪个</a><br><a href="http://www.cnblogs.com/skynet/archive/2011/05/03/2035105.html" target="_blank" rel="external">字符集和字符编码</a><br><a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386819196283586a37629844456ca7e5a7faa9b94ee8000" target="_blank" rel="external">python 字符串和编码</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 字符编码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[gulp前端自动化]]></title>
      <url>http://localhost:4000/blog/2016/01/07/2016-01-07-gulp%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96/</url>
      <content type="html"><![CDATA[<h1 id="首先是目标，就是想要的效果"><a href="#首先是目标，就是想要的效果" class="headerlink" title="首先是目标，就是想要的效果."></a>首先是目标，就是想要的效果.</h1><ol>
<li>es6模块化并打包 <a href="2015/12/22/2015-12-22-gulp+babelify+browserify实现在es6下工作流/">gulp-babelify-browerify</a></li>
<li>html中的js、css文件做优化处理加md5戳，并且自动替换</li>
<li>自动刷新</li>
</ol>
<a id="more"></a>
<h1 id="es6模块化并打包"><a href="#es6模块化并打包" class="headerlink" title="es6模块化并打包"></a>es6模块化并打包</h1><p>因为es6的模块化只实现了export和import，并没有实现原生的模块化加载，所以最终还是需要使用AMD或者CMD的加载器来实现加载，这次我索性不在前端实现模块化加载，直接打包成一个文件。具体实现看之前写的文章<a href="2015/12/22/2015-12-22-gulp+babelify+browserify实现在es6下工作流/">gulp-babelify-browerify</a></p>
<h1 id="html中的js、css文件做优化处理加md5戳，并且自动替换"><a href="#html中的js、css文件做优化处理加md5戳，并且自动替换" class="headerlink" title="html中的js、css文件做优化处理加md5戳，并且自动替换"></a>html中的js、css文件做优化处理加md5戳，并且自动替换</h1><p>这个地方想了很久，也试了很多方式。其实就是两种方法，一是从html中识别出静态文件，然后处理、替换。二是直接从原始目录中抽取出静态文件，然后自动插入html中，最后我想了下还是第一种好，因为我需要在src的html中自由的配置自己开发的、第三方库等文件。所以决定采用第一种方案。用到的插件有:</p>
<h2 id="第一部分是从html中抽取静态资源并处理的"><a href="#第一部分是从html中抽取静态资源并处理的" class="headerlink" title="第一部分是从html中抽取静态资源并处理的"></a>第一部分是从html中抽取静态资源并处理的</h2><ol>
<li><a href="https://github.com/jonkemp/gulp-useref" target="_blank" rel="external">gulp-useref</a>是一个替换、合并、移除html中之前做好标记的的静态资源。</li>
<li><a href="https://github.com/robrich/gulp-if" target="_blank" rel="external">gulp-if</a> 对vinyl object中的内容识别js css分别处理</li>
<li><a href="https://github.com/sindresorhus/gulp-rev" target="_blank" rel="external">gulp-rev</a>给文件末尾添加hash值的，防止缓存。</li>
<li><a href="https://github.com/postcss/gulp-postcss" target="_blank" rel="external">gulp-postcss</a>css处理器，这个插件本身不带功能，它需要插件配合使用，。</li>
<li><a href="https://github.com/postcss/postcss-import" target="_blank" rel="external">postcss-import</a> postcss插件，使用import功能来管理各个css文件</li>
<li><a href="https://github.com/postcss/autoprefixer" target="_blank" rel="external">autoprefixer</a> postcss插件，自动添加兼容前缀比如webkit</li>
<li><a href="https://github.com/ben-eb/cssnano" target="_blank" rel="external">cssnano</a> css压缩</li>
<li><a href="https://github.com/floridoo/gulp-sourcemaps" target="_blank" rel="external">gulp-sourcemaps</a> sourcemap，生成.map文件，用来对压缩后的文件进行线上调试的</li>
<li><a href="https://github.com/sindresorhus/del" target="_blank" rel="external">del</a> 删除之前发布的文件用的</li>
</ol>
<p>gulpfile中的代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'rev'</span>,[<span class="string">'clean'</span>,<span class="string">'dis'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> revAll = <span class="keyword">new</span> RevAll(&#123;   </div><div class="line">      </div><div class="line">            <span class="comment">//不重命名文件  </span></div><div class="line">            dontRenameFile: [<span class="string">'.html'</span>] ,  </div><div class="line">      </div><div class="line">            <span class="comment">//无需关联处理文件</span></div><div class="line">            dontGlobal: [ <span class="regexp">/^\/favicon.ico$/</span> ,<span class="string">'.bat'</span>,<span class="string">'.txt'</span>]</div><div class="line">        &#125;);</div><div class="line">    <span class="keyword">var</span> processors=[atImport,autoprefixer,minifycss()];</div><div class="line"></div><div class="line">    <span class="keyword">return</span> gulp.src([<span class="string">'src/index.html'</span>])</div><div class="line">                .pipe(useref())</div><div class="line">                .pipe(gulpif(<span class="string">'*.css'</span>, postcss(processors)))</div><div class="line">                .pipe(gulpif(<span class="string">'*.js'</span>,sourcemaps.init(&#123; <span class="attr">loadMaps</span>: <span class="literal">true</span> &#125;)))</div><div class="line">                .pipe(sourcemaps.write(<span class="string">'.'</span>))</div><div class="line">                .pipe(revAll.revision())</div><div class="line">                .pipe(gulp.dest(<span class="string">'./dist'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="第二部分是涉及到js开发的，因为要模块化开发，同时要打包，所以插件主要有"><a href="#第二部分是涉及到js开发的，因为要模块化开发，同时要打包，所以插件主要有" class="headerlink" title="第二部分是涉及到js开发的，因为要模块化开发，同时要打包，所以插件主要有"></a>第二部分是涉及到js开发的，因为要模块化开发，同时要打包，所以插件主要有</h2><ol>
<li><a href="https://github.com/substack/node-browserify" target="_blank" rel="external">browserify</a> 模块化打包</li>
<li><a href="https://github.com/babel/babel" target="_blank" rel="external">babel-core</a> 顾名思义，但是没有任何功能，编译es2015需要下面这个插件</li>
<li><a href="https://babeljs.io/docs/plugins/preset-es2015/" target="_blank" rel="external">babel-preset-es2015</a> preset包，主要用来预处理es2015的</li>
<li><a href="https://github.com/babel/babelify" target="_blank" rel="external">babelify</a> 在browserify打包后，把es2015转换为es5</li>
<li><a href="https://github.com/hughsk/vinyl-source-stream" target="_blank" rel="external">vinyl-source-stream</a>将 Node体系中的Stream 转换为gulp所使用的Vinyl File Object Stream</li>
<li><a href="https://github.com/hughsk/vinyl-buffer" target="_blank" rel="external">vinyl-buffer</a> 将Stream转成buffer，因为uglify和sourcemap需要buffer</li>
<li><a href="https://github.com/terinjokes/gulp-uglify" target="_blank" rel="external">gulp-uglify</a> js压缩</li>
</ol>
<p>gulpfile中的代码<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 打包 js</span></div><div class="line"><span class="selector-tag">gulp</span><span class="selector-class">.task</span>(<span class="string">"dis"</span>, ()=&gt;&#123;</div><div class="line">  <span class="selector-tag">return</span> <span class="selector-tag">browserify</span>(<span class="string">'src/js/index.js'</span>)</div><div class="line">         <span class="selector-class">.transform</span>(babelify)</div><div class="line">         <span class="selector-class">.bundle</span>()</div><div class="line">         <span class="selector-class">.pipe</span>(source(<span class="string">'bundle.js'</span>))</div><div class="line">         <span class="selector-class">.pipe</span>(buffer())</div><div class="line">         <span class="selector-class">.pipe</span>(sourcemaps.init(&#123; <span class="attribute">loadMaps</span>: true &#125;))</div><div class="line">         <span class="selector-class">.pipe</span>(uglify()) <span class="comment">// Use any gulp plugins you want now</span></div><div class="line">         <span class="selector-class">.pipe</span>(sourcemaps.write(<span class="string">'./'</span>))</div><div class="line">         <span class="selector-class">.pipe</span>(gulp.dest(<span class="string">'./src/js'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 同步sourcemap</span></div><div class="line"><span class="selector-tag">gulp</span><span class="selector-class">.task</span>(<span class="string">'copy'</span>,[<span class="string">'dis'</span>],()=&gt;&#123;</div><div class="line">    <span class="selector-tag">gulp</span><span class="selector-class">.src</span>(<span class="string">'src/*.map'</span>)<span class="selector-class">.pipe</span>(gulp.src(<span class="string">'src/*.map'</span>))</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="自动刷新"><a href="#自动刷新" class="headerlink" title="自动刷新"></a>自动刷新</h2><p>这部分就主要是用gulp-webserer启动一个本地服务器并且监听文件变化，文件变化了就自动刷新。webserver是监听发布的资源，所以要自己写一个监听src，然后触发发布，导致发布的文件发生变化，进而触发webserver自动更新。<br>用到的插件</p>
<ol>
<li><a href="https://github.com/schickling/gulp-webserver" target="_blank" rel="external">gulp-webserver</a><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//监听src文件</div><div class="line">var watcher = gulp.watch([<span class="string">'src/**/*.*'</span>,<span class="string">'src/index.html'</span>], [<span class="string">'dis'</span>]);</div><div class="line">watcher.on(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span><span class="params">(event)</span></span> &#123;</div><div class="line">  console.<span class="built_in">log</span>(<span class="string">'File '</span> + event.<span class="built_in">path</span> + <span class="string">' was '</span> + event.<span class="built_in">type</span> + <span class="string">', running tasks...'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">//web server</div><div class="line">gulp.task(<span class="string">'webserver'</span>, [<span class="string">'rev'</span>],() =&gt; &#123;</div><div class="line">  gulp.src(<span class="string">'./dist/'</span>)</div><div class="line">    .pipe(webserver(&#123;</div><div class="line">      livereload: <span class="literal">true</span>,</div><div class="line">      directoryListing: <span class="literal">false</span>,</div><div class="line">      <span class="built_in">path</span>: <span class="string">'/'</span>,</div><div class="line">      <span class="built_in">open</span>: <span class="string">'/'</span></div><div class="line">    &#125;));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="完整的gulpfile"><a href="#完整的gulpfile" class="headerlink" title="完整的gulpfile"></a>完整的gulpfile</h1><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> gulp <span class="keyword">from</span> <span class="string">'gulp'</span>;</div><div class="line"><span class="keyword">import</span> sourcemaps <span class="keyword">from</span> <span class="string">"gulp-sourcemaps"</span>;</div><div class="line"><span class="keyword">import</span> babelify <span class="keyword">from</span> <span class="string">"babelify"</span>;</div><div class="line"><span class="keyword">import</span> browserify <span class="keyword">from</span> <span class="string">'browserify'</span>;</div><div class="line"><span class="keyword">import</span> source <span class="keyword">from</span> <span class="string">"vinyl-source-stream"</span>;</div><div class="line"><span class="keyword">import</span> uglify <span class="keyword">from</span> <span class="string">'gulp-uglify'</span>;</div><div class="line"><span class="keyword">import</span> buffer <span class="keyword">from</span> <span class="string">'vinyl-buffer'</span>;</div><div class="line"><span class="keyword">import</span> webserver <span class="keyword">from</span> <span class="string">'gulp-webserver'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> postcss <span class="keyword">from</span> <span class="string">'gulp-postcss'</span>;</div><div class="line"><span class="keyword">import</span> autoprefixer <span class="keyword">from</span> <span class="string">'autoprefixer'</span>;</div><div class="line"><span class="keyword">import</span> minifycss <span class="keyword">from</span> <span class="string">'cssnano'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> RevAll <span class="keyword">from</span> <span class="string">'gulp-rev-all'</span>;      </div><div class="line"><span class="keyword">import</span> useref  <span class="keyword">from</span> <span class="string">'gulp-useref'</span>; </div><div class="line"><span class="keyword">import</span> atImport <span class="keyword">from</span> <span class="string">"postcss-import"</span>;</div><div class="line"><span class="keyword">import</span> gulpif <span class="keyword">from</span> <span class="string">'gulp-if'</span>;</div><div class="line"><span class="keyword">import</span> del <span class="keyword">from</span> <span class="string">'del'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> watcher = gulp.watch([<span class="string">'src/**/*.*'</span>,<span class="string">'src/index.html'</span>], [<span class="string">'dis'</span>]);</div><div class="line"></div><div class="line">watcher.on(<span class="string">'change'</span>, <span class="function">(<span class="params">event</span>)=&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'File '</span> + event.path + <span class="string">' was '</span> + event.type + <span class="string">', running tasks...'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//清理dist目录</span></div><div class="line">gulp.task(<span class="string">'clean'</span>,<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">    <span class="keyword">return</span> del(<span class="string">'dist/'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 打包 js</span></div><div class="line">gulp.task(<span class="string">"dis"</span>,[<span class="string">'clean'</span>], <span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">  <span class="keyword">return</span> browserify(<span class="string">'src/js/index.js'</span>)</div><div class="line">         .transform(babelify)</div><div class="line">         .bundle()</div><div class="line">         .pipe(source(<span class="string">'bundle.js'</span>))</div><div class="line">         .pipe(buffer())</div><div class="line">         .pipe(sourcemaps.init(&#123; loadMaps: <span class="literal">true</span> &#125;))</div><div class="line">         .pipe(uglify()) <span class="comment">// Use any gulp plugins you want now</span></div><div class="line">         .pipe(sourcemaps.write(<span class="string">'./'</span>))</div><div class="line">         .pipe(gulp.dest(<span class="string">'./src/js'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//web server</span></div><div class="line">gulp.task(<span class="string">'webserver'</span>, [<span class="string">'rev'</span>],<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  gulp.src(<span class="string">'./dist/'</span>)</div><div class="line">    .pipe(webserver(&#123;</div><div class="line">      livereload: <span class="literal">true</span>,</div><div class="line">      directoryListing: <span class="literal">false</span>,</div><div class="line">      port:<span class="number">8099</span>,</div><div class="line">      path: <span class="string">'/'</span>,</div><div class="line">      open: <span class="string">'/'</span></div><div class="line">    &#125;));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//默认任务</span></div><div class="line">gulp.task(<span class="string">'rev'</span>,[<span class="string">'dis'</span>], <span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">    <span class="keyword">var</span> revAll = <span class="keyword">new</span> RevAll(&#123;   </div><div class="line">        <span class="comment">//不重命名文件  </span></div><div class="line">        dontRenameFile: [<span class="string">'.html'</span>] ,   </div><div class="line">        <span class="comment">//无需关联处理文件</span></div><div class="line">        dontGlobal: [ <span class="regexp">/^\/favicon.ico$/</span> ,<span class="string">'.bat'</span>,<span class="string">'.txt'</span>]</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> processors=[atImport,autoprefixer,minifycss()];</div><div class="line"></div><div class="line">    <span class="keyword">return</span> gulp.src([<span class="string">'src/index.html'</span>])</div><div class="line">            .pipe(useref())</div><div class="line">            .pipe(gulpif(<span class="string">'*.css'</span>, postcss(processors)))</div><div class="line">            .pipe(gulpif(<span class="string">'*.js'</span>,sourcemaps.init(&#123; loadMaps: <span class="literal">true</span> &#125;)))</div><div class="line">            .pipe(sourcemaps.write(<span class="string">'.'</span>))</div><div class="line">            .pipe(revAll.revision())</div><div class="line">            .pipe(gulp.dest(<span class="string">'./dist'</span>));</div><div class="line">     </div><div class="line">&#125;);  </div><div class="line"></div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>,[<span class="string">'webserver'</span>],<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><em>gulp插件更新很快，而且鱼龙混杂，官方有一个<a href="https://github.com/gulpjs/plugins/blob/master/src/blackList.json" target="_blank" rel="external">blacklist</a>可供参考，同时有一个插件可以检测项目中是否使用了不合适的插件，<a href="https://github.com/ernestoalejo/blacklisted-gulp" target="_blank" rel="external">blacklist-gulp</a></em></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> gulp </tag>
            
            <tag> 前端自动化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2015年终总结]]></title>
      <url>http://localhost:4000/blog/2016/01/02/2016-01-02-2015%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>流水账似的总结2015年吧<br><a id="more"></a></p>
<h2 id="找实习"><a href="#找实习" class="headerlink" title="找实习"></a>找实习</h2><p>&emsp;&emsp; 2015春节刚过就速度回到学校准备找实习，因为早已决定要进入互联网公司，所以就把各大互联网公司都投了个遍，BAT、搜狐、新浪、小米、360等等。最终只有BAT给了笔试机会，其他的好像都比较倾向在京的学生，所以就没下文了，我感觉实习也就是BAT招的火热。笔试过后很忐忑，总觉得自己没戏了，特别是笔试完腾讯，竟然街道一个腾讯HR的电话，这可是人生第一次面试啊，很紧张，感觉答的不好，没戏了，结果在4月份腾讯来武汉招实习的时候还是给了我面试机会。BAT招实习，阿里内推最早，但是统招就排在5月份了。我还投了一个我们业内的公司，数字政通，过去给我一份笔试题，真是没准备好，sql也忘记了，智力题也没答好，排序算法根本就没准备，笔试没过，对我的打击有点大，也帮我认识到要好好准备笔试了。我第一个现场面试是腾讯，一面面试官是一个帅小伙，感觉面的不难，主要是在外面听前一个人问的问题，发现自己不会的，赶紧百度，结果还中了几题，哈哈。第二天通知二面，总监面，就是聊天，感觉聊得很愉快，最后一个数学题，想了很久才想出来，其实很简单。。。三面是一个严肃的hr，面完非常沮丧，其中一个问题记忆很深刻，问我这种非计算机专业的比计算机专业的有什么优势，我说我上进、勤奋，她来一句，要是别人也和你一样勤奋、上进，那你还有什么优势？。。我。。。面完感觉没戏，然后就通过知乎加了一个腾讯实习生群，大家天天在群里焦急的等待什么时候出结果，等了大概两个礼拜吧，出结果的时候特别热闹，各种报喜报，哈哈，我最终也拿到了offer，还加了一个终面在同一个房间的群，里面的人也挺有意思的。<br>&emsp;&emsp;接下来就是百度了，百度的笔试题好难，我感觉做的很不好，后面的大题我看了一下，觉得不会做，就直接交卷了。结果还是给了我面试机会，估计前端放的比较松吧，因为里面很多计算机基础题，关于前端的题就没几题。一面是一个很好的面试官，但是问问题就穷追猛打，一个多小时，问的我都快虚脱了，结果还是让我过了，二面就不太耐烦了，20分钟不到就结束了。我感觉没戏，赶紧联系人内推去百度地图，结果人家在输简历的时候说我在那个部门的面试已经通过了，好吧，没过多久给我发offer了。<br>&emsp;&emsp;阿里的实习招聘是一天搞完，一面是老乡，聊的还行，就让我在外面等一会，意思就是有下一面，二面是阿里前端奠基人玉伯大神，聊的也很开心，还握了个手，哈哈，三面也聊的很开心，主要是前面面了好多了，已经知道面试大概该怎么面了，果然，没多久就给我发offer了。<br>最终综合考虑还是去了百度，最崇尚百度的技术，部门也是很核心的网页搜索部。</p>
<h2 id="暑期实习"><a href="#暑期实习" class="headerlink" title="暑期实习"></a>暑期实习</h2><p>&emsp;&emsp;7月份去了百度实习，因为部门整合还是其他原因，我在那待了俩礼拜，就看文档，最后一个礼拜给了我一点小任务，这时刚好又有一个去阿里实习的机会，就果断和百度说离职了，然后马不停蹄赶去杭州接着实习，那边没多久就给我了一个任务，一个新手，压力很大，天天加班，最终还是顺利上线，最对不起我女朋友，来杭州的这几天就是我最忙的几天，根本没时间陪，唉。。然后9月1号通知下来，不能留用，唉，就回学校找工作呗。实习的感觉就是百度那个部门技术是很厉害，但是架子都已经搭好了，我只需要去重复的做一些业务开发，而且感觉没什么技术挑战，当然这也是因为我是实习生，肯定不能让我去做有技术难度的事情，非常遗憾，最终走了，后面秋招我想去百度也去不成了。阿里好玩一些，做交易链上的活动运营开发，算是见识了很多新技术吧，知道他们是怎么一个工作开发流程，学到很多，团队人也很nice，虽然只有一个月，带我的师兄对也很好，现在也还有联系。只能怪自己实力不行，没能留用。<br>&emsp;&emsp;阿里比百度加班多一些，可能真是氛围导致的吧，也和工作内容有关，因为阿里的运营活动不断，节奏很快，必然加班时间就会多一点点，但是周末也是没什么人来加班，来加班的基本都是新人，没办法，得提高技术，只能来加班了。上班时间也早一点，9点半就到的差不多了，百度要10点才陆续有人来。总之两个公司都很nice。</p>
<h2 id="秋招"><a href="#秋招" class="headerlink" title="秋招"></a>秋招</h2><p>&emsp;&emsp;从杭州跑回武汉，加入秋招大军，赶紧投简历，笔试，笔试了10几个公司，都快要吐了。其中还跑去杭州面百度，三面没面好，跪了。武汉面去哪儿，总是问我有没有学过计算机的课，写不写c++，唉，我也是服了，一面跪，当然这也怪自己实力不够，要是我c++也写的很溜，计算机的那些基础知识也都知道，就能面过了。360，一面就是闹眼子的我感觉，上来就夸我，然后让我去hr面，问我有没有offer，我说没有，看我的眼神都变了，好吧，说后续安排二面，到现在都没有给我安排。。。，小米就来了一个面试官，面了一会，他对我的评价非常对，懂得挺多，但是不够深，好吧，没戏了。小米招的人也不多我感觉，我这种不够厉害的自然不要。这里要感谢爱奇艺，6点多跑去霸面，最后一个是我，给了我5分钟，然后给了我offer，人生第一份offer，意义很重大，不仅是心理鼓励作用，对我以后面试也有很大的帮助，因为之前我被问了很多次，问我有没有offer，我都说没有，好尴尬啊。然后是新浪，一天面完，说的口干舌燥，感觉还行，除了那个冷艳的hr，让她说对我的评价，都说他们要综合考虑，全程板着脸。但是他们节奏也很慢啊，到12月才打电话给我问我有没有offer，对手上offer满意否，是否考虑他们的offer，我拒了。陌陌面的还行，给我了offer，感谢那位前辈，把我的简历从业务组捞来，特地给了我offer，抱歉前辈。百度外卖三面没面好，跪了。最后面了个搜狐，拿到offer。说实话考虑的因素有两点，一是钱，二是公司的名气，最终选了搜狐。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&emsp;&emsp;一年就这么过去了，得到了很多，工作也找到了，和女朋友的感情也越来越好，我就是一个幸运的人吧，无论是找实习还是找工作，我都感觉有很多人帮我，运气也一直很好。希望在来的一年，继续加油，朝着自己的目标前进。</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 年终总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[gulp+babelify+browserify实现在es6下工作流]]></title>
      <url>http://localhost:4000/blog/2015/12/22/2015-12-22-gulp+babelify+browserify%E5%AE%9E%E7%8E%B0%E5%9C%A8es6%E4%B8%8B%E5%B7%A5%E4%BD%9C%E6%B5%81/</url>
      <content type="html"><![CDATA[<p>es6火了这么久，一直没有抽时间来实践一把，今天顺便把gulp flow也一起实践了一下。之前我是用RequireJS来实现的模块化，既然前端发展的那么迅速，RequireJS在可预见的未来会应该会”过时”，索性就用es6来实现模块化，零经验起步，搜索的过程中才发现中文资料是有多匮乏，折腾了好久，赶紧记录下来，以备后用。<br><a id="more"></a></p>
<h2 id="安装组件"><a href="#安装组件" class="headerlink" title="安装组件"></a>安装组件</h2><figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> gulp</div><div class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> babelify   <span class="comment">//将es6-&gt;es5</span></div><div class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> babel-core</div><div class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> babel-preset-es2015   <span class="comment">//babel 6.0以后自身已不带任何功能，需要自己安装组件，这个是一个组件包</span></div><div class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> browserify  <span class="comment">//打包工具</span></div><div class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> gulp-sourcemaps   <span class="comment">//映射源码</span></div><div class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> vinyl-source-stream  <span class="comment">//把 browserify 输出的数据进行准换，使之流符合gulp的标准</span></div><div class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> gulp-uglify  <span class="comment">//压缩js</span></div><div class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> vinyl-buffer  <span class="comment">//将 vinyl 对象内容中的 Stream 转换为 Buffer,sourse-map 和uglify需要buffer格式</span></div></pre></td></tr></table></figure>
<h2 id="gulpfile-babel-js-内容"><a href="#gulpfile-babel-js-内容" class="headerlink" title="gulpfile.babel.js 内容"></a>gulpfile.babel.js 内容</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> gulp <span class="keyword">from</span> <span class="string">'gulp'</span>;</div><div class="line"><span class="keyword">import</span> sourcemaps <span class="keyword">from</span> <span class="string">"gulp-sourcemaps"</span>;</div><div class="line"><span class="keyword">import</span> babelify <span class="keyword">from</span> <span class="string">"babelify"</span>;</div><div class="line"><span class="keyword">import</span> browserify <span class="keyword">from</span> <span class="string">'browserify'</span>;</div><div class="line"><span class="keyword">import</span> <span class="keyword">source</span> <span class="keyword">from</span> <span class="string">"vinyl-source-stream"</span>;</div><div class="line"><span class="keyword">import</span> uglify <span class="keyword">from</span> <span class="string">'gulp-uglify'</span>;</div><div class="line"><span class="keyword">import</span> buffer <span class="keyword">from</span> <span class="string">'vinyl-buffer'</span>;</div><div class="line"></div><div class="line">gulp.<span class="keyword">task</span>(<span class="string">"default"</span>, ()=&gt;&#123;</div><div class="line">  <span class="keyword">return</span> browserify(<span class="string">'src/main.js'</span>)</div><div class="line">         .transform(babelify)</div><div class="line">         .bundle()</div><div class="line">         .pipe(<span class="keyword">source</span>(<span class="string">'bundle.js'</span>))</div><div class="line">         .pipe(buffer())</div><div class="line">         .pipe(sourcemaps.init(&#123; loadMaps: <span class="keyword">true</span> &#125;))</div><div class="line">         .pipe(uglify()) <span class="comment">// Use any gulp plugins you want now</span></div><div class="line">         .pipe(sourcemaps.<span class="keyword">write</span>(<span class="string">'./'</span>))</div><div class="line">         .pipe(gulp.dest(<span class="string">'./dist'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="需要注意的点"><a href="#需要注意的点" class="headerlink" title="需要注意的点"></a>需要注意的点</h2><ol>
<li>babel6.0以后，安装babel-core后，并不带任何功能，还需安装所需要的插件，可以按照自己需要的来安装，也可以安装babel-preset-es2015，这个是一个预设包，带很多常用插件。然后新建一个文件.babelrc，写入<br>{<br> “presets”: [“es2015”]<br>}</li>
</ol>
<p>参考的博文<br><a href="https://viget.com/extend/gulp-browserify-starter-faq" target="_blank" rel="external">Gulp + Browserify: The Everything Post</a><br><a href="http://macr.ae/article/gulp-and-babel.html" target="_blank" rel="external">Using gulp with Babel</a><br><a href="http://segmentfault.com/a/1190000003770541" target="_blank" rel="external">探究Gulp的Stream</a><br><a href="http://csspod.com/using-browserify-with-gulp/" target="_blank" rel="external">在 Gulp 中使用 Browserify</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> gulp </tag>
            
            <tag> es6 </tag>
            
            <tag> module </tag>
            
            <tag> 模块化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pymongo去除重复数据]]></title>
      <url>http://localhost:4000/blog/2015/12/14/2015-12-14-mongodb%E5%8E%BB%E9%99%A4%E9%87%8D%E5%A4%8D%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<ol>
<li><p>唯一索引</p>
 <figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.things.ensureIndex(&#123;<span class="string">'key'</span> : <span class="number">1</span>&#125;, &#123;<span class="string">unique :</span> <span class="literal">true</span>, <span class="string">dropDups :</span> <span class="literal">true</span>&#125;)</div></pre></td></tr></table></figure>
<p> 但是<a href="http://api.mongodb.org/python/current/api/pymongo/collection.html#pymongo.collection.Collection.create_index" target="_blank" rel="external">dropDups is not supported by MongoDB 2.7.5 or newer</a>所以这个方法只能在2.7.5版本以下才行</p>
<a id="more"></a></li>
<li><p>用aggreate找出重复的数据，然后再一个一个删除(效率比较低)，python代码</p>
 <figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#先找到重复的数据</span></div><div class="line">deleteData=collection.aggregate([</div><div class="line">&#123;<span class="string">'$group'</span>: &#123; </div><div class="line">    <span class="string">'_id'</span>: &#123; <span class="string">'firstField'</span>: <span class="string">"$area"</span>, <span class="string">'secondField'</span>: <span class="string">"$time_point"</span> &#125;, </div><div class="line">    <span class="string">'uniqueIds'</span>: &#123; <span class="string">'$addToSet'</span>: <span class="string">"$_id"</span> &#125;,</div><div class="line">    <span class="string">'count'</span>: &#123; <span class="string">'$sum'</span>: <span class="number">1</span> &#125; </div><div class="line">  &#125;&#125;, </div><div class="line">  &#123; <span class="string">'$match'</span>: &#123; </div><div class="line">    <span class="string">'count'</span>: &#123; <span class="string">'$gt'</span>: <span class="number">1</span> &#125; </div><div class="line">  &#125;&#125;</div><div class="line">])<span class="comment">;</span></div><div class="line">first=<span class="literal">True</span></div><div class="line"><span class="keyword">for</span> d <span class="keyword">in</span> deleteData:</div><div class="line">    first=<span class="literal">True</span></div><div class="line">    <span class="keyword">for</span> did <span class="keyword">in</span> d[<span class="string">'uniqueIds'</span>]:</div><div class="line">        <span class="keyword">if</span> !first:    <span class="meta">#第一个不删除</span></div><div class="line">            collection.delete_one(&#123;<span class="string">'_id'</span>:did&#125;)<span class="comment">;</span></div><div class="line">        first=<span class="literal">False</span></div></pre></td></tr></table></figure>
<p> <a href="http://stackoverflow.com/questions/13190370/how-to-remove-duplicates-based-on-a-key-in-mongodb" target="_blank" rel="external">参考1</a><br> <a href="http://stackoverflow.com/questions/8405331/how-to-remove-duplicate-record-in-mongodb-by-mapreduce" target="_blank" rel="external">参考2</a></p>
</li>
<li>第二种方法当数据量很大的时候，需要把数据写入表中。aggregate的pipeline中要加上out项，同时由于aggregate只接受两个参数，self是默认的，所以要用allowDiskUse=True这种形式添加参数 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 找出重复的放入result表中</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">findDuplicate</span><span class="params">()</span>:</span></div><div class="line">    deleteData=collection.aggregate([</div><div class="line">        &#123;<span class="string">'$group'</span>: &#123;</div><div class="line">            <span class="string">'_id'</span>: &#123; <span class="string">'firstField'</span>: <span class="string">"$mid"</span>, <span class="string">'secondField'</span>: <span class="string">"$created_at"</span> &#125;,</div><div class="line">            <span class="string">'uniqueIds'</span>: &#123; <span class="string">'$addToSet'</span>: <span class="string">"$_id"</span> &#125;,</div><div class="line">            <span class="string">'count'</span>: &#123; <span class="string">'$sum'</span>: <span class="number">1</span> &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        &#123; <span class="string">'$match'</span>: &#123;</div><div class="line">            <span class="string">'count'</span>: &#123; <span class="string">'$gt'</span>: <span class="number">1</span> &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;,&#123;<span class="string">'$out'</span>:<span class="string">'result'</span>&#125;</div><div class="line">    ],allowDiskUse=<span class="keyword">True</span>); </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">deleteDup</span><span class="params">()</span>:</span></div><div class="line">    deleteData=db.result.find()</div><div class="line">    first=<span class="keyword">True</span></div><div class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> deleteData:</div><div class="line">        first=<span class="keyword">True</span></div><div class="line">        <span class="keyword">for</span> did <span class="keyword">in</span> d[<span class="string">'uniqueIds'</span>]:</div><div class="line">            <span class="keyword">if</span> first==<span class="keyword">False</span>:</div><div class="line">                collection.delete_one(&#123;<span class="string">'_id'</span>:did&#125;);</div><div class="line">            first=<span class="keyword">False</span></div></pre></td></tr></table></figure></li>
</ol>
]]></content>
      
        <categories>
            
            <category> 数据抓取 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mongodb </tag>
            
            <tag> python </tag>
            
            <tag> aqi </tag>
            
            <tag> 数据 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[nodejs+mongodb获取pm2.5数据]]></title>
      <url>http://localhost:4000/blog/2015/11/29/2015-11-29-nodejs+mongodb%E8%8E%B7%E5%8F%96pm2.5%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<p><em>特别感谢<a href="http://pm25.in/" target="_blank" rel="external">pm2.5</a>提供接口</em><br>因为返回的数据直接就是[{},{}]格式，所以偷懒直接用mongodb来存储了。<br><a id="more"></a></p>
<h1 id="nodejs代码"><a href="#nodejs代码" class="headerlink" title="nodejs代码"></a>nodejs代码</h1><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">//aqi.js</div><div class="line">var http = <span class="built_in">require</span>(<span class="string">"http"</span>),url = <span class="built_in">require</span>(<span class="string">"url"</span>),MongoClient = <span class="built_in">require</span>(<span class="string">'mongodb'</span>).MongoClient, <span class="built_in">assert</span> = <span class="built_in">require</span>(<span class="string">'assert'</span>),fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line">var dataURL = <span class="string">"http://www.pm25.in/api/querys/aqi_ranking.json?token="</span>;</div><div class="line">http.get(dataURL, <span class="function"><span class="keyword">function</span><span class="params">(res)</span></span>&#123;</div><div class="line">    res.setEncoding(<span class="string">"utf-8"</span>);</div><div class="line">    var <span class="built_in">date</span>=new Date();</div><div class="line">    var <span class="built_in">time</span>=<span class="built_in">date</span>.getFullYear()+<span class="string">"-"</span>+(<span class="built_in">date</span>.getMonth()+<span class="number">1</span>)+<span class="string">"-"</span>+<span class="built_in">date</span>.getDate()+<span class="string">" "</span>+<span class="built_in">date</span>.getHours()+<span class="string">":"</span>+<span class="built_in">date</span>.getMinutes();</div><div class="line">    var result=[];</div><div class="line">    res.on(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span><span class="params">(chunk)</span></span>&#123;</div><div class="line">        result.push(chunk);</div><div class="line">    &#125;)</div><div class="line">    .on(<span class="string">"end"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">        result=JSON.parse(result.join(<span class="string">""</span>));</div><div class="line">        var url = <span class="string">'mongodb://localhost:27017/aqi'</span>;</div><div class="line">        //写入日志文件 绝对路径，因为在cmd下是在C:/windows/system32/下执行的</div><div class="line">        fs.<span class="built_in">open</span>(<span class="string">'D:/Nodejs/aqilog.log'</span>, <span class="string">'a+'</span>,<span class="function"><span class="keyword">function</span> <span class="params">(err,fd)</span></span> &#123;</div><div class="line">            <span class="keyword">if</span> (err) &#123;</div><div class="line">               <span class="keyword">return</span> fs.<span class="built_in">write</span>(fd,<span class="built_in">time</span>+<span class="string">" "</span>+err); </div><div class="line">            &#125;</div><div class="line">            fs.<span class="built_in">write</span>(fd,<span class="built_in">time</span>+<span class="string">" 获取数据成功\r\n"</span>);   </div><div class="line">            fs.<span class="built_in">close</span>(fd);</div><div class="line">        &#125;);</div><div class="line">        MongoClient.connect(url, <span class="function"><span class="keyword">function</span><span class="params">(err, db)</span></span> &#123;</div><div class="line">            var collection = db.collection(<span class="string">'cityaqi'</span>);</div><div class="line">            collection.insertMany(result,<span class="function"><span class="keyword">function</span><span class="params">(inserterr, result)</span></span> &#123;</div><div class="line">                fs.<span class="built_in">open</span>(<span class="string">'D:/Nodejs/aqilog.log'</span>, <span class="string">'a+'</span>,<span class="function"><span class="keyword">function</span> <span class="params">(err,fd)</span></span> &#123;</div><div class="line">                    <span class="keyword">if</span> (err) &#123;</div><div class="line">                       <span class="keyword">return</span> fs.<span class="built_in">write</span>(fd,<span class="built_in">time</span>+<span class="string">" "</span>+err); </div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span>(inserterr)&#123;</div><div class="line">                        fs.<span class="built_in">write</span>(fd,<span class="built_in">time</span>+<span class="string">" 条记录写入失败"</span>+inserterr+<span class="string">"\r\n"</span>);   </div><div class="line">                    &#125;<span class="keyword">else</span>&#123;</div><div class="line">                        fs.<span class="built_in">write</span>(fd,<span class="built_in">time</span>+<span class="string">" "</span>+result.insertedCount+<span class="string">"条记录写入成功\r\n"</span>);   </div><div class="line">                    &#125;</div><div class="line">                    </div><div class="line">                    fs.<span class="built_in">close</span>(fd);</div><div class="line">                &#125;);</div><div class="line">                db.<span class="built_in">close</span>();</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><em>需要先安装mongodb和nodejs npm</em><br>把mongodb安装成服务,在cmd下cd到mongodb的bin目录下<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod --dbpath F:\<span class="keyword">data</span> --logpath=F:\<span class="keyword">data</span>\<span class="built_in">log</span>\mongodb.<span class="built_in">log</span> --install</div></pre></td></tr></table></figure></p>
<p>然后win+r 输入services.msc，在window服务里启动mongodb就ok了，</p>
<p>nodejs需要安装 <a href="http://mongodb.github.io/node-mongodb-native/2.0/" target="_blank" rel="external">mongodb插件</a>;<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install mongodb   <span class="comment">//安装在当前目录就好了，不需要-g</span></div></pre></td></tr></table></figure></p>
<p>在windows下需要每个小时执行一次，用windows的计划任务，一开始只能设置一天启动一次，然后建立任务后在属性-触发器那修改成每小时重复一次，持续24小时<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//g</span>etCityAQI.bat</div><div class="line">node D:\Nodejs\aqi.js   <span class="regexp">//</span>node需要在系统的PATH目录</div><div class="line"><span class="keyword">exit</span>                     <span class="regexp">//</span>退出cmd窗口，不然程序不会退出，后续的任务就不会重复执行了</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> pm2.5 </tag>
            
            <tag> mongodb </tag>
            
            <tag> nodejs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript设计模式读书笔记]]></title>
      <url>http://localhost:4000/blog/2015/11/03/2015-11-03-JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="第一章-富有表现力的JavaScript"><a href="#第一章-富有表现力的JavaScript" class="headerlink" title="第一章 富有表现力的JavaScript"></a>第一章 富有表现力的JavaScript</h1><p>JavaScript是弱类型的语言，所有对象和类都是易变的，可以在运行时修改。JavaScript使用设计模式，主要是因为可以提高可维护性、沟通更简单、有一些设计模式能提升性能。<br><a id="more"></a></p>
<h1 id="第二章-接口"><a href="#第二章-接口" class="headerlink" title="第二章 接口"></a>第二章 接口</h1><p>接口提供了一种用以说明一个对象应该具有哪些方法的手段，但并不规定这些方法应该如何实现。在JavaScript中没有提供对接口的内置支持，但是有三种方法可以模仿接口</p>
<ol>
<li><p>用注释描述接口</p>
 <figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line">interface Composite&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">remove</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getChild</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ComInstance</span><span class="params">()</span></span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line">ComInstance.prototype.add=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 这种做法对接口约定的遵守完全依靠自觉，因为没有为确保ComInstance真正实现了正确的方法集而进行检查。</p>
</li>
<li><p>属性检查</p>
 <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ComInstance</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.implementsInterfaces=[<span class="string">'Composite'</span>];   <span class="comment">//这个属性声明这个类实现了哪些接口</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 所有类都用一个属性明确声明自己实现了哪些接口，接口自身还是使用注释，但是可以通过检测这个属性来得知这个类自称实现了什么接口后续的调用就可以通过检测这个属性来判断这个类是否实现了某些接口</p>
</li>
<li><p>鸭式辨型</p>
</li>
</ol>
<p>如果对象具有与接口定义的方法同名的所有方法，那就可以认为它实现了这个接口。可以用一个辅助函数来确保对象具有所有必须的方法。</p>
<h1 id="第三章-封装和信息隐藏"><a href="#第三章-封装和信息隐藏" class="headerlink" title="第三章 封装和信息隐藏"></a>第三章 封装和信息隐藏</h1><ol>
<li>信息隐藏原则<br>封装就是对对象内部数据的表现形式和实现细节进行隐藏</li>
<li><p>创建对象的基本方法<br>1)门户大开型(其实就是构造函数+原型链)</p>
 <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> book=<span class="function"><span class="keyword">function</span><span class="params">(a,b)</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.a=a;</div><div class="line">    <span class="keyword">this</span>.b=b;</div><div class="line">&#125;</div><div class="line">book.prototype.funa=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p> 为了保护内部数据，让取值和赋值可以得到完整性验证，可以添加对应的setAttributeA()、getAttributeA()函数，但是这并不能真正意义上避免直接修改内部属性，这只是一种约定，而且也增加了额外的代码，可以衡量下再决定是否要这么做。<br>2)用命名规范区别私有成员(在一些私有属性和方法前加下划线)这也只是一种约定<br>3)闭包</p>
 <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> book=<span class="function"><span class="keyword">function</span><span class="params">(a,b)</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> a,b;</div><div class="line"></div><div class="line">    <span class="comment">//内部方法</span></div><div class="line">    <span class="keyword">var</span> pa=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">        a=a*<span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//对外的设置内部属性的方法</span></div><div class="line">    <span class="keyword">this</span>.setA=<span class="function"><span class="keyword">function</span><span class="params">(va)</span></span>&#123;</div><div class="line">        a=va;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">this</span>.getA=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> a;</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"><span class="comment">//对外的不需要直接访问内部属性的方法</span></div><div class="line">book.prototype.funa=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> a=<span class="keyword">this</span>.getA();</div><div class="line">    ...</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p> 这种方式,外部就没法直接修改内部属性了,必须通过提供的set方法来设置,在set方法内可以对要设置的值进行检验,可以控制每个属性值都是有效的.但是弊端就是,内部定义的这些变量和方法会在每实例化一个实例时都copy一份,浪费内存（虽然现在内存很廉价）。</p>
</li>
<li><p>更多高级的创建对象模式<br>1)静态方法和属性</p>
 <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Book=(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">//静态私有方法</span></div><div class="line">    <span class="keyword">var</span> count=<span class="number">0</span>;</div><div class="line">    <span class="keyword">var</span> fb=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">        ...</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(a,b)</span></span>&#123;</div><div class="line">        <span class="keyword">var</span> va,vb;</div><div class="line">        <span class="keyword">this</span>.setA=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">            va=a;</div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">this</span>.setA(a);</div><div class="line">        <span class="keyword">this</span>.setB(b);</div><div class="line">        count++;</div><div class="line">    &#125;</div><div class="line">&#125;)();  <span class="comment">//自执行</span></div><div class="line"><span class="comment">//静态公有方法</span></div><div class="line">Book.fc=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> book=Book(<span class="string">'dd'</span>,<span class="string">'cc'</span>);</div></pre></td></tr></table></figure>
<p> 对于不需要访问任何实例属性的方法可以这样设置为静态方法，因为静态方法是和Book类关联在一起的，只会在内存中保存一份，count属性是静态属性，每构造一个实例，就会自动加1，fc也是静态方法，任何实例都可以调用，但是要注意静态方法里不能和实例的属性有关联，否则，任何一个实例修改这个值，会影响到所有实例。</p>
</li>
<li><p>封装的利弊<br>弊端：不能很好的在外部进行单元测试</p>
</li>
</ol>
<h1 id="第四章-继承"><a href="#第四章-继承" class="headerlink" title="第四章 继承"></a>第四章 继承</h1><ol>
<li><p>类式继承(其实就是构造函数+原型链)</p>
 <figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">functon extend(subClass,superClass)&#123;</div><div class="line">    <span class="built_in">var</span> f=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">    f.prototype=superClass.prototype;</div><div class="line">    subClass.prototype=<span class="keyword">new</span> f();</div><div class="line">    subClass.prototype.constructor=subClass();</div><div class="line">    subClass.superclass=superClass.prototype;</div><div class="line">    <span class="keyword">if</span>(superClass.prototype.constructor==<span class="built_in">Object</span>.prototype.constructor)&#123;</div><div class="line">        superClass.prototype.constructor=superClass;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*Class Person*/</span></div><div class="line">funtion Person(name)&#123;</div><div class="line">    <span class="keyword">this</span>.name=name;</div><div class="line">&#125;</div><div class="line">..</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Author</span>(<span class="params">name,book</span>)</span>&#123;</div><div class="line">    Person.call(<span class="keyword">this</span>,name);</div><div class="line">&#125;</div><div class="line">extand(Author,Person);</div></pre></td></tr></table></figure>
</li>
<li><p>原型式继承</p>
 <figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var Person=&#123;</div><div class="line">    name:<span class="string">'li'</span>,</div><div class="line">    friends:[<span class="string">'li'</span>]</div><div class="line">&#125;</div><div class="line">var otherPerson=Object.<span class="built_in">create</span>(Person);  </div><div class="line">//得到一个原型指定super的空对象，所以他可以共享父对象的所有属性</div><div class="line">/* Object.<span class="built_in">create</span>原生支持</div><div class="line">其内部原理就是</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">crate</span><span class="params">(o)</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span><span class="params">()</span></span>&#123;&#125;;</div><div class="line">    F.prototype=o;</div><div class="line">    <span class="keyword">return</span> new F();</div><div class="line">&#125;</div><div class="line">*/</div></pre></td></tr></table></figure>
<p> 在不需要创建构造函数时，只是想让两个对象之间保持相识的时候，可以使用原型式继承，此时friends这个数组(引用类型)是被所有实例共享的。</p>
</li>
<li><p>掺元法（不是严格意义上的继承）<br>在只是想让两个迥然不同的对象之间共用一部分代码的时候，可以使用这个方法</p>
 <figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">var Mixin=&#123;&#125;;</div><div class="line">//定义各种通用函数</div><div class="line">Minin.prototype=&#123;</div><div class="line">    fun1:&#123;</div><div class="line"></div><div class="line">    &#125;,</div><div class="line">    fun2:&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">//ReciveClass 是想要共用代码的对象；</div><div class="line"><span class="keyword">for</span>(methodname <span class="keyword">in</span> Minxin.prototype)&#123;</div><div class="line">    if(!ReciveClass.prototype[methodname])&#123;</div><div class="line">        ReciveClass.prototype[methodname]=Minxin.prototype[methodname];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="第五章-单体模式"><a href="#第五章-单体模式" class="headerlink" title="第五章 单体模式"></a>第五章 单体模式</h1><ol>
<li>单体是一个用来划分命名空间并将一批相关的属性和方法组织在一起的对象，要是可以实例化只能实例化一次。在JavaScript中为了避免全局对象被无意修改，单体模式非常重要，也是非常常用的一种模式。</li>
<li><p>用自执行函数闭包的形式声明私有变量</p>
 <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Book.en=(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> pri=<span class="string">'dd'</span>;  <span class="comment">//私有变量</span></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        a:<span class="string">'ddd'</span>,</div><div class="line">        funa:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    &#125;)();</div></pre></td></tr></table></figure>
</li>
<li><p>惰性加载，就是在单体中添加getInstance()函数，这个函数判断是否已经实例化，没有实例化的话就实例化，否则返回已经实例化的对象，在需要使用单体对象的时候都需要调用getInstance函数，实现按需实例化，节约内存。</p>
</li>
<li>分支技术就是比如在针对浏览器兼容的时候，单体内部嗅探浏览器，然后给出兼容的方法，就不需要每次调用某个功能的时候都去检测浏览器。</li>
</ol>
<h1 id="第六章-方法的链式调用"><a href="#第六章-方法的链式调用" class="headerlink" title="第六章 方法的链式调用"></a>第六章 方法的链式调用</h1><ol>
<li>让类的方法都返回this，是实现链式调用的基本思路，对于需要返回值的取值类函数，可以用传入回调函数的形式避免链路被打断。</li>
</ol>
<h1 id="第七章-工厂模式"><a href="#第七章-工厂模式" class="headerlink" title="第七章 工厂模式"></a>第七章 工厂模式</h1><ol>
<li>工厂模式就是对对象的创建进行包装，使创建对象的具体过程隔离开来，解耦</li>
<li><p>简单工厂模式</p>
 <figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">BicycleFactory=&#123;</div><div class="line">    createBicycle:<span class="function"><span class="keyword">function</span>(<span class="params"><span class="keyword">type</span></span>)</span>&#123;</div><div class="line">        <span class="keyword">switch</span>(<span class="keyword">type</span>)&#123;</div><div class="line">            <span class="keyword">case</span>:<span class="string">'a'</span></div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> a();</div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 优势就在只需要传入一个参数就能得到想要的想要的对象，实现了责任分割，缺点就是在需要添加新产品，扩展就需要修改整个逻辑，一旦整个逻辑一个地方出现了问题，就可能造成整个工厂没法工作。</p>
</li>
<li><p>工厂方法模式</p>
 <figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">BicycleShop=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">BicycleShop.prototype=&#123;</div><div class="line">    sellBicycle=<span class="function"><span class="keyword">function</span>(<span class="params">model</span>)</span>&#123; <span class="comment">//静态方法，所有实例可以共享的方法</span></div><div class="line">        <span class="built_in">var</span> bicycle=<span class="keyword">this</span>.createBicycle(model)</div><div class="line">        ....</div><div class="line">    &#125;</div><div class="line">    createBicycle=<span class="function"><span class="keyword">function</span>(<span class="params">model</span>)</span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'unsupported operation on an abstract class'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">var</span> BicycleShopA=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">extend(BicycleShopA,BicycleShop)  <span class="comment">//继承</span></div><div class="line">BicycleShopA.prototype.createBicycle=<span class="function"><span class="keyword">function</span>(<span class="params">model</span>)</span>&#123;  <span class="comment">//具体实例化生产方法</span></div><div class="line">       <span class="keyword">switch</span>(model)&#123;</div><div class="line">            <span class="keyword">case</span>:<span class="string">'a'</span>:</div><div class="line">                <span class="keyword">new</span> a();</div><div class="line">            ...</div><div class="line">       &#125;    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。抽象类不能用来生产对象，只能派生子类，但是可以有一些静态方法给所有工厂。优势在于扩展性强，要比如要添加一加店，只需再派生一个子类，并实现createBicycle方法就好了，而不是像简单工厂模式那样需要修改整个逻辑。</p>
</li>
<li>抽象工厂方法<br> 为创建一组相关或相互依赖的对象提供一个接口，而且无需指定他们的具体类，就是在工厂方法模式上再抽象一层，抽象工厂里有多个抽象的工厂方法，比如一个工厂里面有生产小米、华为两个品牌的产品，每种品牌又都会生产手机、平板。这个时候就需要抽象一个工厂，里面有两条生产线，一条生产手机、一条生产平板。 <figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Factory=<span class="function"><span class="keyword">function</span></span>()&#123;&#125;;</div><div class="line">Factory.prototype.createFactory=<span class="function"><span class="keyword">function</span></span>(type)&#123;  <span class="comment">//抽象工厂</span></div><div class="line">    <span class="keyword">switch</span>(type)&#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">'phone'</span>:<span class="type"></span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">Factory_Phone</span>();</div><div class="line">        <span class="keyword">case</span> <span class="string">'pad'</span>:<span class="type"></span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">Factory_Pad</span>();</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">Product=<span class="function"><span class="keyword">function</span></span>()&#123;&#125;;</div><div class="line">Product.prototype=&#123;                        <span class="comment">//抽象产品</span></div><div class="line">    createProductApple=<span class="function"><span class="keyword">function</span></span>()&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">Error</span>(<span class="string">'unsupported operation on an abstract class'</span>);</div><div class="line">    &#125;，</div><div class="line">    createProductHuawei=<span class="function"><span class="keyword">function</span></span>()&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">Error</span>(<span class="string">'unsupported operation on an abstract class'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">extend(Factory_Pad,Product)                            <span class="comment">//继承</span></div><div class="line">Factory_Pad.prototype.createProductApple=fucntion()&#123;      <span class="comment">//具体实现</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">PadApple</span>();</div><div class="line">&#125;;</div><div class="line">Factory_Pad.prototype.createProductHuawei=<span class="function"><span class="keyword">function</span></span>()&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">PadHuawei</span>();</div><div class="line">&#125;;</div><div class="line">extend(Factory_Phone,Product);</div><div class="line">Factory_Phone.prototype.createProductApple=fucntion()&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">PhoneApple</span>();</div><div class="line">;</div><div class="line">Factory_Phone.prototype.createProductHuawei=<span class="function"><span class="keyword">function</span></span>()&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">PhoneHuawei</span>();</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//调用</span></div><div class="line">Factory factory = <span class="keyword">new</span> <span class="type">Factory_Pad</span>();</div><div class="line">Apple apple = factory.createProductApple();</div><div class="line">Huawei pad=factory.createProductHuawei();</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="第八章-桥接模式"><a href="#第八章-桥接模式" class="headerlink" title="第八章 桥接模式"></a>第八章 桥接模式</h1><ol>
<li><p>桥接模式就是将抽象和实现隔离开来，使得二则可以灵活的独立变化，js中用的比较多的地方就是回调</p>
 <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="keyword">each</span> = <span class="function"><span class="keyword">function</span> <span class="params">(arr, fn)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">        <span class="keyword">var</span> val = arr[i];</div><div class="line">        <span class="keyword">if</span> (fn.call(val, i, val, arr)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div><div class="line"><span class="keyword">each</span>(arr, <span class="function"><span class="keyword">function</span> <span class="params">(i, v)</span> </span>&#123;</div><div class="line">    arr[i] = v * <span class="number">2</span>;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p> each是抽象的部分，fn就是实现部分，对于数组，遍历后怎么处理每个元素，具体就交由fn来处理，fn是可以替换的。</p>
</li>
</ol>
<h1 id="第九章-组合模式"><a href="#第九章-组合模式" class="headerlink" title="第九章 组合模式"></a>第九章 组合模式</h1><ol>
<li>一种专为创建web上的动态用户界面而量身定制的模式，对组合对象的操作可以传递到每一个子对象，使得代码简化了不少。提高了代码的模块化程度，也便于以后的重构，而且子对象和组合对象经常会用做HTML元素的包装工具，使得我们是对对象进行操作，而不是具体到dom上操作。这种模式适用于存在一批组织成某种层次体系的对象，并且希望对这批对象或其中的一部分对象实施一个操作。比如表单保存、验证，组合模式下，可以执行form.save()，就能实现save所有控件。</li>
<li><p>代码实例(图片库)</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> DynamicGallery=<span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.children=[];</div><div class="line">    ....</div><div class="line">&#125;</div><div class="line"><span class="comment">//定义组合对象和其叶子对象应该实现的接口</span></div><div class="line">DynamicGallery.prototype=&#123;</div><div class="line">    <span class="attr">add</span>:<span class="function"><span class="keyword">function</span>(<span class="params">child</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.children.push(child);</div><div class="line">        <span class="keyword">this</span>.element.appendChild(child.getElement());</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">remove</span>:...</div><div class="line">    hide:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> node,i=<span class="number">0</span>;node=<span class="keyword">this</span>.getChild(i);i++)&#123;</div><div class="line">            node.hide();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.element.style.display=<span class="string">'none'</span>;</div><div class="line">    &#125;</div><div class="line">    show:..</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="comment">//叶子对象</span></div><div class="line"><span class="keyword">var</span> GalleryImage=<span class="function"><span class="keyword">function</span>(<span class="params">src</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.element=<span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</div><div class="line">    <span class="keyword">this</span>.element.src=src;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line">GalleryImage.prototype=&#123;</div><div class="line">    <span class="attr">add</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</div><div class="line">    ...</div><div class="line">    hide:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.element.style.display=<span class="string">'none'</span>;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">show</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.element.sytle.display=<span class="string">''</span>;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">getElement</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.element;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> <em>DynamicGalery可以互相嵌套</em><br> 有一个问题需要注意就是，对组合某个方法的调用会引起对整个组合内的子对象遍历及其方法调用，可能会比较耗性能，在某些情况下需要注意，特别是子对象特别多的情况下。</p>
</li>
</ol>
<h1 id="第十章-门面模式"><a href="#第十章-门面模式" class="headerlink" title="第十章 门面模式"></a>第十章 门面模式</h1><ol>
<li>门面模式有两个作用：一是简化类的接口；二是消除类与使用它的客户代码之间的耦合。可以为执行各种复杂任务提供一个简单的接口，代码更加容易维护和理解。</li>
<li><p>在各种类库中门面模式非常常见。比如事件处理中的各种浏览器兼容处理，非常像适配器模式，但并不是。</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> DED=<span class="built_in">window</span>.DED||&#123;&#125;;</div><div class="line">DED.util=&#123;</div><div class="line">    <span class="attr">stopPropagation</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(e.stopPropagation)&#123;</div><div class="line">            e.shopPropagation();</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            e.cancelBubble=<span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">preventDefault</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(e.preventDefault)&#123;</div><div class="line">            e.preventDefault();</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            e.returnValue=<span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">stopEvent</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">        DED.util.stopPropagation();</div><div class="line">        DED.util.preventDefault();</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>当有一些反复成组出现的代码的时候，就可以考虑使用门面模式了，有助于节省时间和精力，但是不能滥用，不要小题大做，有时更细粒度的函数反而更好，不见得非得组成一个庞杂的门面函数，三思而行。</p>
</li>
</ol>
<h1 id="第十一章-适配器模式"><a href="#第十一章-适配器模式" class="headerlink" title="第十一章 适配器模式"></a>第十一章 适配器模式</h1><ol>
<li>适配器模式用来在现有接口和不兼容的类之间进行适配，比较常用的情况是用来协调两个不同的接口。比如有一个新接口更加高效，但是又不想改动原有接口，就可以在原有接口和新接口之间加一层适配器，使得按旧接口的方式使用新接口的功能，可以避免大规模改写现有代码。</li>
<li>但很多时候其实是需要彻底重写代码的，或者新接口还未定型，那么适配器可能就会面临也需要改动的情况，这样就会增加很多不必要的开销，所以适配器在新旧接口都已经固定了，并且比重写代码更高效就能解决问题的时候适用。</li>
</ol>
<h1 id="第十二章-装饰者模式"><a href="#第十二章-装饰者模式" class="headerlink" title="第十二章 装饰者模式"></a>第十二章 装饰者模式</h1><ol>
<li>动态而又透明的为对象添加功能方法。不修改现有对象或从其派生子类。和组合模式不同，装饰者就是来修改方法的而不是组织子对象的，因为子对象只有一个。</li>
<li>其实就是继承父类但是修改父类的方法，只需要调用父类的构造函数并改写某些方法即可。 <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> TailightDecorator=<span class="function"><span class="keyword">function</span><span class="params">(bicyle)</span></span>&#123;</div><div class="line">    TailightDecorator.superclass.constructor.call(<span class="keyword">this</span>,bicycle);</div><div class="line">&#125;</div><div class="line">extend(TailightDecorator,BicycleDecorator);</div><div class="line">TailightDecorator.prototype.getPrice=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.bicycle.getPrice()+<span class="number">9.00</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> myBicycle=<span class="keyword">new</span> AcmeComfortCruiser();</div><div class="line">myBicycle=<span class="keyword">new</span> TailightDecorator(myBicycle);</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="第十三章-享元模式"><a href="#第十三章-享元模式" class="headerlink" title="第十三章 享元模式"></a>第十三章 享元模式</h1><ol>
<li>这是一种优化模式，适合于解决因创建大量类似对象而累及性能的问题，把大量的独立对象转化为少量的共享对象，就可以降低内存的使用。</li>
<li>比如网页中常见的Tooltip，使用享元模式就可以只创建一个对象，然后把外在数据，比如每个Tooltip的位置、显示的文字等这些因实例而异的属性剥离，变成各个方法的参数，然后只需要创建一个对象，但是可以通过调用函数，传入不同的参数实现各种形式的Tooltip。</li>
<li>享元模式一般有三个步骤：<ol>
<li>将所有外在数据从目标类剥离，变成函数的参数传入，目标类应该依然具有与之前一样的功能，唯一的区别是数据的来源发生了变化。</li>
<li>创建一个用来控制该类的实例化的工厂，这个工厂应该掌握该类所有已创建出来的独一无二的实例，比较常见的做法是用对象字面量是保持对其的引用。</li>
<li>创建一个用来保存外在数据的管理器，该管理器对象负责处理外在数据的种种事宜。一般是一个包含一堆方法的对象，外在数据的输入输出就靠调用其中的方法。</li>
</ol>
</li>
<li>享元模式的目的是优化，而且是优化那种在网页中大量使用的资源密集型对象、并且可以剥离外在数据，剥离后独一无二的对象数目是相对减少了的，不然就没有必要使用享元模式。</li>
<li>享元模式让一个对象分开存储，造成对数据问题的追踪会很困难，维护起来也增加了难度，所以使用的时候要在运行效率和可维护性之间进行权衡。</li>
</ol>
<h1 id="第十四章-代理模式"><a href="#第十四章-代理模式" class="headerlink" title="第十四章 代理模式"></a>第十四章 代理模式</h1><ol>
<li>代理模式也是一种优化模式，JavaScript中的代理模式用于控制对创建或保有开销较大的类会对象的访问。比如有些对象不需要在网页加载时就实例化，可以把它推迟到使用它之前再实例化，而且在使用本地的所有功能而不必操心其实例化的事，它掩盖了推迟本地实例化的逻辑。但是这种模式不能勉强使用，代理任何时候都可以被替换为本地，它会增加项目的复杂性，除非它可以降低代码的冗余程度、提高其模块化程度或运行效率，否则不要使用它。</li>
</ol>
<h1 id="第十五章-观察者模式"><a href="#第十五章-观察者模式" class="headerlink" title="第十五章 观察者模式"></a>第十五章 观察者模式</h1><ol>
<li>观察者模式的使用场合就是当一个对象的改变需要同时改变其它对象，并且它不知道具体有多少对象需要改变的时候。总的来说观察者模式所做的工作就是在解耦，让耦合的双方都依赖于抽象，而不是依赖于具体。从而使得各自的变化都不会影响到另一边的变化。</li>
<li>js中大量使用的事件监听就是观察者模式</li>
</ol>
<h1 id="第十六章-命令模式"><a href="#第十六章-命令模式" class="headerlink" title="第十六章 命令模式"></a>第十六章 命令模式</h1><ol>
<li>本质是封装请求，是一种封装方法调用的方式，用来消除调用操作的对象和实现操作的对象之间的耦合，最简单的命令对象是一个操作和用以调用这个操作的对象的结合体，所有命令对象都有一个执行操作，用来调用命令对象所绑定的操作</li>
<li><p>代码示例（界面中广告的关闭打开操作）</p>
 <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// StopAd command class</span></div><div class="line"><span class="keyword">var</span> StopAd = <span class="function"><span class="keyword">function</span> <span class="params">(adObject)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.ad = adObject;</div><div class="line">&#125;;</div><div class="line">StopAd.prototype.execute = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.ad.stop();</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// StartAd command class</span></div><div class="line"><span class="keyword">var</span> StartAd = <span class="function"><span class="keyword">function</span> <span class="params">(adObject)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.ad = adObject;</div><div class="line">&#125;;</div><div class="line">StartAd.prototype.execute = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.ad.start();</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//使用命令对象</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> ads = getAds();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = ads.length; i &lt; len; i++) &#123;</div><div class="line">    <span class="comment">// Create command objects for starting and stopping the ad</span></div><div class="line">    <span class="keyword">var</span> startCommand = <span class="keyword">new</span> StartAd(ads[i]);</div><div class="line">    <span class="keyword">var</span> stopCommand = <span class="keyword">new</span> StopAd(ads[i]);</div><div class="line"> </div><div class="line">    <span class="comment">// Create the UI elements that will execute the command on click</span></div><div class="line">    <span class="keyword">new</span> UIButton(<span class="string">'Start '</span> + ads[i].name, startCommand);</div><div class="line">    <span class="keyword">new</span> UIButton(<span class="string">'stop '</span> + ads[i].name, stopCommand);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 这样做的结果就是，我只需要实例化一个命令对象，然后调用命令对象的execute方法，而不用考虑adObject的具体实现，解耦调用操作的对象和实现操作的对象。就是在调用者和实际执行者中间封装一层，封装的这一层可以很灵活的实现各种操作。</p>
</li>
</ol>
<h1 id="第十七章-职责链模式"><a href="#第十七章-职责链模式" class="headerlink" title="第十七章 职责链模式"></a>第十七章 职责链模式</h1><ol>
<li>通过实现一个隐式地对请求进行处理的对象组成的链，这其中每个对象都有机会处理请求，并且会传递请求，从而消除请求的发送者和接收者之间的耦合。</li>
<li>借助职责链模式，可以动态的选择由那个对象处理请求，可以比在开发期就动态的指定处理请求的对象高效的多。但是因为接收者是隐式的，所以无法得知具体将有哪个对象处理它，而且不能保证请求一定会被处理，代码调试也会变的更复杂一些。</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>这本书从2015.11.03开始看，到2016.01.06看完，花了64天，基本上是每天看一章，然后就开始敲代码。总体感觉这本书还可以，算是对设计模式有了一个基本的入门吧。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[高性能JavaScript读书笔记]]></title>
      <url>http://localhost:4000/blog/2015/10/30/2015-10-30-%E9%AB%98%E6%80%A7%E8%83%BDJavaScript%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="1-Loading-and-Execution"><a href="#1-Loading-and-Execution" class="headerlink" title="1 Loading and Execution"></a>1 Loading and Execution</h1><p>由于js的加载和执行会阻塞页面其他操作，影响用户体验，所以需要解决这个问题，解决的办法主要还是：</p>
<ol>
<li>script标签的defer（IE），asyc（HTML5）属性，实现这个标签异步加载，不影响其他的下载及页面渲染。</li>
<li>动态创建script标签。</li>
<li>XHR下载js代码，注入到页面中。<a id="more"></a>
<h1 id="2-Data-Access"><a href="#2-Data-Access" class="headerlink" title="2 Data Access"></a>2 Data Access</h1></li>
<li>在同一个函数中需要多次读取同一个对象的属性时，最好将它存入一个局部变量，避免多余的属性查找带来的性能开销。</li>
</ol>
<h1 id="3-DOM-Scripting"><a href="#3-DOM-Scripting" class="headerlink" title="3 DOM Scripting"></a>3 DOM Scripting</h1><ol>
<li>HTML collections每次获取其length属性都会进行查询操作，文档更新时，这个collections会自动更新，所以要将length属性缓存，同时把集合拷贝到数组中也可以提高性能。</li>
<li>会发生重排的情况有：<br>1）添加或删除可见的DOM<br>2）DOM的位置改变<br>3）DOM尺寸改变<br>4）内容改变（文本改版或者图片被另一个不同尺寸的所替代）<br>5）浏览器窗口改变尺寸</li>
<li>获取元素的offsetTop、scrollTop、clientTop序列属性、getComputedStyle()会导致浏览器立即重排，破坏了浏览器自身的性能优化方案（通过队列修改优化重排过程，而不是一次修改就重排一次）。所以不要在布局信息改变时来获取以上属性。</li>
<li>优化方法：<ol>
<li>用修改class的方式来实现批量属性修改；</li>
<li>将元素脱离文档流，作完操作后再插入回文档（隐藏、文档碎片、clone）；</li>
<li>动画元素用绝对定位</li>
</ol>
</li>
</ol>
<h1 id="4-Algorithms-and-Flow-Control"><a href="#4-Algorithms-and-Flow-Control" class="headerlink" title="4 Algorithms and Flow Control"></a>4 Algorithms and Flow Control</h1><ol>
<li>尽量避免使用for-in循环，改善循环性能的最好办法是减少每次迭代中的运算量。</li>
<li>当条件判断很多时，选用switch而不是ifelse，无论从代码易读性还是从性能考虑。</li>
<li>当很多离散数值需要测试判断时，使用查表法可以消除条件判断，提高性能。</li>
</ol>
<h1 id="5-Strings-and-Regular-Expressions"><a href="#5-Strings-and-Regular-Expressions" class="headerlink" title="5 Strings and Regular Expressions"></a>5 Strings and Regular Expressions</h1><ol>
<li>IE7-，字符串连接操作用数组的join会更快。</li>
</ol>
<h1 id="6-Responsive-Interfaces"><a href="#6-Responsive-Interfaces" class="headerlink" title="6 Responsive Interfaces"></a>6 Responsive Interfaces</h1><ol>
<li>js代码运行时间不应该超过100毫秒，对于长耗时的代码，可以用定时器分段执行，从而不会堵塞UI线程。</li>
<li>Web Worker是独立开辟线程，不会影响页面的主线程。纯数据，和用户浏览器UI没有关系的长耗时脚本可以用Web Worker。</li>
</ol>
<h1 id="7-Ajax"><a href="#7-Ajax" class="headerlink" title="7 Ajax"></a>7 Ajax</h1><ol>
<li>对于不需要缓存的资源。可以和服务器端配合，一次请求多个资源，把多个资源打包成一个字符串，然后js接收后再把数据分割，比如一次请求多个图片，可以减少HTTP请求。 </li>
</ol>
<h1 id="8-Programming-Practices"><a href="#8-Programming-Practices" class="headerlink" title="8 Programming Practices"></a>8 Programming Practices</h1><ol>
<li>尽量避免使用eval()和Function()，定时器第一个参数也不要传入字符串，因为这会导致重新启动一个解释器，非常耗费性能。</li>
<li>声明数组和对象尽量使用对象字面量，而不是用构造函数。</li>
<li>对于需要重复判断的条件，比如事件绑定，可以在第一次判定后就覆盖整个函数，后续调用就不需要再判断了，当然这部分判断也可以提前进行。</li>
<li>位运算可以代替很多纯数学操作，比如判断奇偶，用和1进行位与运算就可以代替了，偶数和1进行位与操作结果是0，奇数结果是1。</li>
<li>原生方法是最快的。</li>
</ol>
<h1 id="9-Building-and-Deploying-High-Performance-JavaScript-Applications"><a href="#9-Building-and-Deploying-High-Performance-JavaScript-Applications" class="headerlink" title="9 Building and Deploying High-Performance JavaScript Applications"></a>9 Building and Deploying High-Performance JavaScript Applications</h1><ol>
<li>开发部署过程需要合并、压缩文件，设置缓存时间。</li>
</ol>
<h1 id="10-Tools"><a href="#10-Tools" class="headerlink" title="10 Tools"></a>10 Tools</h1><ol>
<li>网页变慢时，分析资源加载时间及脚本的执行时间，寻找优化点。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[编程题]]></title>
      <url>http://localhost:4000/blog/2015/10/11/2015-10-11-%E7%BC%96%E7%A8%8B%E9%A2%98/</url>
      <content type="html"><![CDATA[<h2 id="1-利用字符重复出现的次数，编写一个方法，实现基本的字符串压缩功能。比如，字符串“aabcccccaaa”经压缩会变成“a2b1c5a3”。若压缩后的字符串没有变短，则返回原先的字符串。"><a href="#1-利用字符重复出现的次数，编写一个方法，实现基本的字符串压缩功能。比如，字符串“aabcccccaaa”经压缩会变成“a2b1c5a3”。若压缩后的字符串没有变短，则返回原先的字符串。" class="headerlink" title="1 利用字符重复出现的次数，编写一个方法，实现基本的字符串压缩功能。比如，字符串“aabcccccaaa”经压缩会变成“a2b1c5a3”。若压缩后的字符串没有变短，则返回原先的字符串。"></a>1 利用字符重复出现的次数，编写一个方法，实现基本的字符串压缩功能。比如，字符串“aabcccccaaa”经压缩会变成“a2b1c5a3”。若压缩后的字符串没有变短，则返回原先的字符串。</h2><a id="more"></a>
<p>方法：</p>
<pre><code><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">def zipString(iniString):</div><div class="line">    i=<span class="number">0</span>;</div><div class="line">    <span class="literal">result</span>='';</div><div class="line">    num=<span class="number">1</span>;</div><div class="line">    currentChar='';</div><div class="line">    <span class="keyword">while</span> i&lt;len(iniString):</div><div class="line">        <span class="keyword">if</span>(i==<span class="number">0</span>):</div><div class="line">            <span class="literal">result</span>+=iniString[i];</div><div class="line">            currentChar=iniString[i];</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">if</span>(iniString[i]==currentChar):</div><div class="line">                num+=<span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                currentChar=iniString[i];</div><div class="line">                <span class="literal">result</span>+=str(num);</div><div class="line">                <span class="literal">result</span>+=currentChar</div><div class="line">                num=<span class="number">1</span>;</div><div class="line">        i+=<span class="number">1</span>;</div><div class="line">    <span class="literal">result</span>+=str(num);</div><div class="line">    <span class="keyword">if</span>(len(<span class="literal">result</span>)&lt;len(iniString)):</div><div class="line"><span class="built_in">        return</span> <span class="literal">result</span>;</div><div class="line">    <span class="keyword">else</span>:</div><div class="line"><span class="built_in">        return</span> iniString;</div></pre></td></tr></table></figure>
</code></pre><h2 id="2-请实现一个算法，确定一个字符串的所有字符是否全都不同。这里我们要求不允许使用额外的存储结构。给定一个string-iniString，请返回一个bool值-True代表所有字符全都不同，False代表存在相同的字符。保证字符串中的字符为ASCII字符。字符串的长度小于等于3000。"><a href="#2-请实现一个算法，确定一个字符串的所有字符是否全都不同。这里我们要求不允许使用额外的存储结构。给定一个string-iniString，请返回一个bool值-True代表所有字符全都不同，False代表存在相同的字符。保证字符串中的字符为ASCII字符。字符串的长度小于等于3000。" class="headerlink" title="2. 请实现一个算法，确定一个字符串的所有字符是否全都不同。这里我们要求不允许使用额外的存储结构。给定一个string iniString，请返回一个bool值,True代表所有字符全都不同，False代表存在相同的字符。保证字符串中的字符为ASCII字符。字符串的长度小于等于3000。"></a>2. 请实现一个算法，确定一个字符串的所有字符是否全都不同。这里我们要求不允许使用额外的存储结构。给定一个string iniString，请返回一个bool值,True代表所有字符全都不同，False代表存在相同的字符。保证字符串中的字符为ASCII字符。字符串的长度小于等于3000。</h2><p>方法：遍历，发现不同就跳出循环，return false</p>
<pre><code><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">def checkDifferent(iniString):</div><div class="line">    <span class="built_in">i</span>=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> <span class="built_in">i</span>&lt;len(iniString):</div><div class="line">        <span class="built_in">j</span>=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> <span class="built_in">j</span>&lt;len(iniString) and (iniString[j]!=iniString[i] or <span class="built_in">i</span>==<span class="built_in">j</span>):</div><div class="line">            <span class="built_in">j</span>+=<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">j</span>!=len(iniString)):</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="built_in">i</span>+=<span class="number">1</span>;</div><div class="line">        </div><div class="line">    <span class="keyword">if</span> <span class="built_in">i</span>!=len(iniString) :</div><div class="line">       <span class="keyword">return</span> False;</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">       <span class="keyword">return</span> True;</div></pre></td></tr></table></figure>
</code></pre><h1 id="3-请实现一个算法，在不使用额外数据结构和储存空间的情况下，翻转一个给定的字符串-可以使用单个过程变量-。给定一个string-iniString，请返回一个string，为翻转后的字符串。保证字符串的长度小于等于5000。"><a href="#3-请实现一个算法，在不使用额外数据结构和储存空间的情况下，翻转一个给定的字符串-可以使用单个过程变量-。给定一个string-iniString，请返回一个string，为翻转后的字符串。保证字符串的长度小于等于5000。" class="headerlink" title="3.请实现一个算法，在不使用额外数据结构和储存空间的情况下，翻转一个给定的字符串(可以使用单个过程变量)。给定一个string iniString，请返回一个string，为翻转后的字符串。保证字符串的长度小于等于5000。"></a>3.请实现一个算法，在不使用额外数据结构和储存空间的情况下，翻转一个给定的字符串(可以使用单个过程变量)。给定一个string iniString，请返回一个string，为翻转后的字符串。保证字符串的长度小于等于5000。</h1><pre><code><figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">def reverseString(iniString):</div><div class="line">    <span class="attr">i=0;</span></div><div class="line">    <span class="keyword">if</span>(len(iniString)%<span class="number">2</span>==<span class="number">0</span>):</div><div class="line">        <span class="attr">tag=len(iniString)/2;</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="attr">tag=int(len(iniString)/2)+1;</span></div><div class="line">    while(i&lt;tag):</div><div class="line">        <span class="attr">temp=iniString[i];</span></div><div class="line">        <span class="attr">t=len(iniString)-1-i;</span></div><div class="line">        <span class="keyword">if</span>(<span class="attr">i==0):</span></div><div class="line">            <span class="attr">iniString=iniString[t]+iniString[1:];</span></div><div class="line">            <span class="attr">iniString=iniString[:len(iniString)-1]+temp;</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="attr">iniString=iniString[0:i]+iniString[t]+iniString[i+1:];</span></div><div class="line">            <span class="attr">iniString=iniString[0:t]+temp+iniString[t+1:];</span></div><div class="line">        i+=<span class="number">1</span>;</div><div class="line">    return iniString;</div></pre></td></tr></table></figure>
</code></pre>]]></content>
      
        <categories>
            
            <category> 笔试 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笔试 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常见排序算法的实现和比较]]></title>
      <url>http://localhost:4000/blog/2015/09/17/2015-09-17-%E5%B8%B8%E8%A7%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%92%8C%E6%AF%94%E8%BE%83/</url>
      <content type="html"><![CDATA[<h2 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1. 冒泡排序"></a>1. 冒泡排序</h2><p>比较相邻的两个元素,前一个比后一个大则交换，一趟下来，最大的就冒到最后面了。<br>    <figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var testArray=[<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">67</span>,<span class="number">2</span>];</div><div class="line">function bubbleSort (argument) &#123;</div><div class="line">    for(var i=<span class="number">0</span>;i&lt;argument.length;i++)&#123;</div><div class="line">        for(var j=<span class="number">0</span>;j&lt;argument.length-i;j++)&#123;</div><div class="line">            if(argument[j]&gt;argument[j+<span class="number">1</span>])&#123;</div><div class="line">                var temp=argument[j];</div><div class="line">                argument[j]=argument[j+<span class="number">1</span>];</div><div class="line">                argument[j+<span class="number">1</span>]=temp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return argument;</div><div class="line">&#125;</div><div class="line">alert(bubbleSort(testArray));</div></pre></td></tr></table></figure></p>
<pre><code>*冒泡排序是稳定的，因为只有前一个比后一个大时才交换位置，相等不交换，时间复杂度是O(n^2)*
</code></pre><a id="more"></a>
<h2 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2. 选择排序"></a>2. 选择排序</h2><p>从第二个开始，都和第一个比，比第一个小则交换位置，一趟下来，最小放在第一个位置<br>    <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectSort</span> <span class="params">(argument)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; argument.length; i++) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = i+<span class="number">1</span>; j &lt; argument.length; j++) &#123;</div><div class="line">            <span class="keyword">if</span>(argument[j] &lt; argument[i]) &#123;</div><div class="line">                <span class="keyword">var</span> temp = argument[j];</div><div class="line">                argument[j] = argument[i];</div><div class="line">                argument[i] = temp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> argument;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><em>选择排序不是稳定的，比如5 8 5 2 9 第一遍的时候一个5会和2交换,两个5的顺序就被破坏了.时间复杂度是O(n^2)</em></p>
<h2 id="3-快速排序"><a href="#3-快速排序" class="headerlink" title="3. 快速排序"></a>3. 快速排序</h2><p>采用分治的思想，一趟排序后就把比标准值小的放在标准值左边，比标准值大的就放在标准值右边。然后再对这标准值左右两半采用同样的方法。过程为:确定一个标准值key，比如为arr[right],然后两边往中间找，只要比key值小，left++,left就会停留在第一个比key大的值，同理，right会停留在第一个比key小的值，这两个值互相交换，直到left&gt;=right，我这里标准值是在右边(左边),则这时标准值和最后的right(left)位交换,则实现了一趟排序。</p>
<ul>
<li>方法1  <figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">function <span class="built_in">quickSort</span>(arr, <span class="keyword">left</span>, <span class="keyword">right</span>) &#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">left</span> &gt;= <span class="keyword">right</span>) &#123;</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">var</span> key = arr[<span class="keyword">right</span>];</div><div class="line">        <span class="keyword">var</span> lp = <span class="keyword">left</span>;</div><div class="line">        <span class="keyword">var</span> rp = <span class="keyword">right</span>;</div><div class="line">        <span class="keyword">while</span>(lp &lt; rp) &#123;</div><div class="line">            <span class="keyword">while</span>(arr[lp] &lt;= key &amp;&amp; lp &lt; rp) &#123;</div><div class="line">                lp++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">while</span>(arr[rp] &gt;= key &amp;&amp; lp &lt; rp) &#123;</div><div class="line">                rp--;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">var</span> temp = arr[lp];</div><div class="line">            arr[lp] = arr[rp];</div><div class="line">            arr[rp] = temp;</div><div class="line">        &#125;</div><div class="line">        temp = arr[<span class="keyword">right</span>];</div><div class="line">        arr[<span class="keyword">right</span>] = arr[rp];</div><div class="line">        arr[rp] = temp;</div><div class="line">        <span class="built_in">quickSort</span>(arr, <span class="keyword">left</span>, lp-<span class="number">1</span>);</div><div class="line">        <span class="built_in">quickSort</span>(arr, rp+<span class="number">1</span>, <span class="keyword">right</span>);</div><div class="line">        <span class="keyword">return</span> arr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><em>时间复制度为O(nlogn),不稳定</em><br><a href="http://wuchong.me/blog/2014/02/09/algorithm-sort-summary/" target="_blank" rel="external">参考文章</a></p>
<ul>
<li>方法2(浪费空间，但是思路更清晰)<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">function <span class="built_in">quickSort</span>(arr) &#123;</div><div class="line">    <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> arr;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> middle = <span class="type">Math</span>.floor(arr.length / <span class="number">2</span>);</div><div class="line">    <span class="keyword">var</span> tag = arr.splice(middle, <span class="number">1</span>)[<span class="number">0</span>];</div><div class="line">    <span class="keyword">var</span> <span class="keyword">left</span> = [];</div><div class="line">    <span class="keyword">var</span> <span class="keyword">right</span> = [];</div><div class="line">    <span class="comment">//console.log(arr);</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">        <span class="keyword">if</span>(arr[i] &lt;= tag) &#123;</div><div class="line">            <span class="keyword">left</span>.push(arr[i]);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">right</span>.push(arr[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">quickSort</span>(<span class="keyword">left</span>).concat([tag], <span class="built_in">quickSort</span>(<span class="keyword">right</span>));</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">52</span>,<span class="number">423</span>,<span class="number">4235</span>,<span class="number">234</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">32</span>];</div><div class="line">console.log(<span class="built_in">quickSort</span>(arr));</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="4-直接插入排序"><a href="#4-直接插入排序" class="headerlink" title="4. 直接插入排序"></a>4. 直接插入排序</h2><p>默认左边是已经排好序的，从第一个开始，两层循环，只要左边的大于右边的就向右移动一个位置，直到出现小于右边第一个数的那个数出现，此时arr[j] = arr[i]<br>    <figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var a = [<span class="number">9</span>,<span class="number">5</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">2</span>]</div><div class="line">function insertSort(arr) &#123;</div><div class="line">    for(var i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</div><div class="line">        var temp = arr[i];</div><div class="line">        for(var j = i<span class="number">-1</span>; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp; j--) &#123;</div><div class="line">            arr[j+<span class="number">1</span>] = a[j];</div><div class="line">        &#125;</div><div class="line">        arr[j + <span class="number">1</span>] = temp;</div><div class="line">    &#125;</div><div class="line">    return arr</div><div class="line">&#125;</div><div class="line">console.log(insertSort(a))</div></pre></td></tr></table></figure></p>
<p><em>时间复杂度为最好的情况是原始数据都已经全部排好序，while循环执行次数是0,时间复复杂度是O(n),最坏的情况是倒序，则时间复杂度是O(n^2),这个排序是稳定的</em></p>
<h2 id="5-希尔排序"><a href="#5-希尔排序" class="headerlink" title="5. 希尔排序"></a>5. 希尔排序</h2><p>是分组进行直接插入排序。因为分组后，没组内是越接近与有序，所以直接插入排序会更快，所以整体的时间复杂度是优于直接插入排序的。</p>
<h2 id="6-堆排序"><a href="#6-堆排序" class="headerlink" title="6. 堆排序"></a>6. 堆排序</h2><p>先创建最大堆，然后把栈顶元素与当前最大堆的最后一个元素交换，最大堆元素个数减一，判断交换元素后的堆是不是最大堆了，如果不是，重建最大堆，然后重复第一步即将栈顶元素和最后一个元素交换。</p>
]]></content>
      
        <categories>
            
            <category> 面试 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 面试 </tag>
            
            <tag> 排序算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript高级程序设计-笔记]]></title>
      <url>http://localhost:4000/blog/2015/09/07/2015-09-07-javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="javascript高级程序设计第二版读书笔记"><a href="#javascript高级程序设计第二版读书笔记" class="headerlink" title="javascript高级程序设计第二版读书笔记"></a>javascript高级程序设计第二版读书笔记</h1><h2 id="1-第二章-script元素"><a href="#1-第二章-script元素" class="headerlink" title="1.第二章 script元素"></a>1.第二章 script元素</h2><ol>
<li>async 实现异步脚本，表示不妨碍其他脚本或资源的下载，两个async脚本的执行顺序是不确定的，所以要确保不会互相依赖。同时这段脚本最好不要修改dom，因为不确定是在DOMContentLoaded事件前发生还是后发生。</li>
<li>defer 表示脚本可以延迟到文档全部加载完成后再执行，延迟脚本<a id="more"></a>
</li>
</ol>
<h2 id="2-第三章-基本概念"><a href="#2-第三章-基本概念" class="headerlink" title="2.第三章 基本概念"></a>2.第三章 基本概念</h2><ol>
<li>ECMAScript5引入了严格模式，IE10+支持;</li>
<li>javascript中共有5中基本数据类型:Null Undefined Number String Boolean和一种复杂类型Object。所有值都是上述类型之一。</li>
<li>typeof是一个操作符，并不是一个函数，返回的值就只有6种可能 </li>
</ol>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>undefined</td>
<td>未定义或未赋值</td>
</tr>
<tr>
<td>number</td>
<td>数字</td>
</tr>
<tr>
<td>string</td>
<td>字符串</td>
</tr>
<tr>
<td>boolean</td>
<td>布尔型</td>
</tr>
<tr>
<td>object</td>
<td>null或者Object</td>
</tr>
<tr>
<td>function</td>
<td>函数</td>
</tr>
</tbody>
</table>
<p>所以可以用typeof来判断一个变量是否定义，也是唯一的一个方法，目前没法区分未定义和未赋值，因为对于js来说，这两种情况等效。</p>
<ol>
<li>Object的每个实例都有一个constructor属性，保存着创建当前实例的函数</li>
<li>递增和递减操作符，一元加减操作符，应用于不同的值的规则<br>1）字符串，使用Number转换后再执行递增或递减操作<br>2）false活true，转换成数字后再执行相应操作<br>3）对象，调用valueOf()方法后再执行相应操作</li>
<li>未指定返回值的函数会返回一个undefined值。</li>
<li>不给构造函数传递参数，可以省略后面那一对括号，比如 var a= new Object;</li>
<li>8进制字面量在严格模式下是无效的，会抛出错误；</li>
<li>浮点数如果小数点后面没有任何数字，或则本身就是一个整数，那会解析成整数。比如var floatNum1=1.;//1;var floatNum2=10.0//10;</li>
<li>Number.MIN_VALUE和Number.MAX_VALUE保存着最小值和最大值5e-324,1.797693e+308.如果超出了范围，返回的是Infinity或则-Infinity.可以使用isFinite来判断某个值值是不是在范围内，如果是会返回true。</li>
<li><p>有三个函数可以把非数值转换为数值：Number(),parseInt(),parseFloat()，后两个只能作用于字符串。Number不够合理，经常使用的是parseInt，忽略字符串前面的空格，直到找到第一个非空格字符，如果第一个不是数字或者负号，会返回NaN，直到遇到非数字字符，只返回前面的数字字符，parseInt 认识十六进制和八进制，但不认识科学计数法。浮点数会转换成整数，parseFloat认识科学计数法，但不认识十六进制和八进制，可以得到浮点数，但是如果是整数，那得到的也是整数为了避免错误的解析，parseInt无论在什么情况下都要带上第二个参数即指定是二进制还是八、十、十六进制，如果第二个参数是省略或者是0，将以十进制来解析，如果小于2或者大于36返回NaN</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Number</span>(<span class="literal">true</span>)==<span class="number">1</span> <span class="comment">//1  false:0;</span></div><div class="line"><span class="built_in">Number</span>(<span class="number">1</span>)==<span class="number">1</span></div><div class="line"><span class="built_in">Number</span>(<span class="literal">null</span>)==<span class="number">0</span>;</div><div class="line"><span class="built_in">Number</span>(<span class="literal">undefined</span>) <span class="comment">//NaN</span></div><div class="line"><span class="built_in">Number</span>(<span class="string">""</span>)==<span class="number">0</span></div><div class="line"><span class="built_in">Number</span>(<span class="string">"12n"</span>) <span class="comment">//NaN</span></div><div class="line"><span class="built_in">Number</span>(<span class="string">"0xf"</span>)==<span class="number">15</span> 有效的<span class="number">16</span>进制会转成十进制整数</div><div class="line"><span class="built_in">parseInt</span>(<span class="string">"AF"</span>,<span class="number">16</span>) <span class="comment">//175</span></div><div class="line"><span class="built_in">parseInt</span>(<span class="string">"AF"</span>) <span class="comment">//NaN</span></div><div class="line"><span class="built_in">parseFloat</span>(<span class="string">"10.0"</span>)<span class="comment">//10</span></div><div class="line"><span class="built_in">parseFloat</span>(<span class="string">"090.5"</span>)<span class="comment">//90.5</span></div><div class="line">其余全是<span class="literal">NaN</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="3-第四章-变量、作用域、内存问题"><a href="#3-第四章-变量、作用域、内存问题" class="headerlink" title="3.第四章 变量、作用域、内存问题"></a>3.第四章 变量、作用域、内存问题</h2><ol>
<li>基本类型值在内存中占据固定大小空间，放在栈内存中，Object放在堆内存中。</li>
<li>2012年后所有的现代浏览器都是使用标记-清除算法进行内存管理，每隔一段时间就会从根开始，遍历所有对象，获得能获取和不能获取的对象，不能获取的对象将会被回收。离开作用域的值会被标记为可以回收，下一次垃圾回收时将被回收。</li>
</ol>
<h2 id="4-第五章-引用类型"><a href="#4-第五章-引用类型" class="headerlink" title="4.第五章 引用类型"></a>4.第五章 引用类型</h2><ol>
<li>ECMAScript5新增Array.isArray()函数来检测数组.</li>
<li>数组的valueOf()返回的还是数组，toString()返回的是逗号分隔的字符串。</li>
<li>new Array(3)得到的是[]，构造函数只是设置了length属性，但是真正的数组并没有生成。new Array(“3”)得到的是[‘3’]，new Array(1,2,3)得到的是[1,2,3]。用Array构造函数可以省略new操作符。[1,2,]这样声明在现代浏览器中会生成length为2的数组，但是在IE8-会生成[1,2,undefined]</li>
<li>prototype是保存所有实例方法的真正所在，不可枚举。</li>
<li><p>基本类型值不是对象，比如字符串和数字,但是它们有方法，可以通过基本包装类型.原理是这样的：</p>
 <figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s=<span class="string">"dddd"</span>;</div><div class="line"><span class="keyword">var</span> s2=s.substring(<span class="number">2</span>);</div><div class="line"></div><div class="line"><span class="comment">//其实后台会自动完成以下处理</span></div><div class="line"><span class="keyword">var</span> s=<span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"dddd"</span>);  <span class="comment">//String Number Boolean就是基本包装类型</span></div><div class="line"><span class="keyword">var</span> s2.s.subtring(<span class="number">2</span>);   <span class="comment">//显示创建的话得到的实例为object，不建议这么使用。</span></div><div class="line">s=<span class="keyword">null</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>slice和substring 第二个参数是指定子字符串最后一个字符后面的位置,即这个位置的字符不会进入字符串。substr第二个参数指定的是返回的字符串个数。substring第一个参数比第二个参数大时，会自动交换两个参数的值。</p>
</li>
<li>slice会把传入的负值与字符串长度相加。substring会把所有负值参数都转换为0。substr会把第一个负的参数加上字符串长度，第二个负的参数为0，因为第二个参数是指定要返回的字符串个数，传入负值，所以应该为0;</li>
<li>Math.ceil()向上舍入 Math.floor()向下舍入 Math.round()四舍五入 </li>
<li>encodeURI主要用于对整个URI进行编码,不会对本身属于URI的特殊字符进行编码,比如冒号、正斜杠、问号、井号。encodeURIComponent()主要用于对URI的某一段进行编码.会对它发现的所有非标准字符进行编码。相应的有decodeURI和decodeURIComponent方法.</li>
<li>利用apply可以把数组变成一个个参数传递给函数的特性，利用Math.max方法可以快速求得数组的最大值,最小值也是一样的方法。<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var num=[<span class="number">1</span>,<span class="number">23</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</div><div class="line">Math.max.apply(Math,num);  <span class="comment">//第一个参数可以是null undefined</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="5-第六章-面向对象的程序设计"><a href="#5-第六章-面向对象的程序设计" class="headerlink" title="5.第六章 面向对象的程序设计"></a>5.第六章 面向对象的程序设计</h2><h3 id="1-创建对象的方法"><a href="#1-创建对象的方法" class="headerlink" title="1. 创建对象的方法"></a>1. 创建对象的方法</h3><p>1) 工厂模式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> o=<span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">    o.name=name;</div><div class="line">    o.age=age;</div><div class="line">    <span class="keyword">return</span> o;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> person1=createPerson(<span class="string">"lidonglin"</span>,<span class="number">23</span>);</div></pre></td></tr></table></figure></p>
<p><em>缺点</em>：没法解决对象识别，即没法知道一个对象的类型<br>2) 构造函数模式<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(name,age)</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.name=name;</div><div class="line">    <span class="keyword">this</span>.age=age;</div><div class="line">    <span class="keyword">this</span>.sayname=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">        alert(<span class="keyword">this</span>.name);</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> person=<span class="keyword">new</span> Person(<span class="string">"lidonglin"</span>,<span class="number">23</span>);</div><div class="line">alert(person <span class="keyword">instanceof</span> Person); <span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<p><em>缺点</em>：sayname方法在每次创建一个Person对象实例会都重新创建一个，没法共享,浪费内存。<br>3) 原型模式<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">Person.prototype.name=<span class="string">"lidonglin"</span>;</div><div class="line">Person.prototype.age=<span class="number">23</span>;</div><div class="line">Person.prototype.sayName=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.name);</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> person1=<span class="keyword">new</span> Person();</div><div class="line">person1.sayName(); <span class="comment">//lidonglin</span></div></pre></td></tr></table></figure></p>
<p><em>说明1:</em> 只要创建了一个新函数，默认会给该函数创建一个prototype属性，这个属性指向函数的原型对象。同时，默认所有的原型对象都自动有一个constructor属性，这个属性包含一个指向prototype属性所在的函数的指针。即Person.prototype.constructor指向Person。调用构造函数得到的实例，在chrome ff safari中内部包含一个指针,这个指针指向构造函数的原型,即person.<strong>proto</strong>指向Person.prototype 所以实例和构造函数没有直接的联系。实例会继承原型的constructor属性，所以实例的constructor指向构造函数.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">aa</span> (<span class="params">argument</span>) </span>&#123;</div><div class="line">        <span class="comment">// body...</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> b=<span class="keyword">new</span> aa();</div><div class="line"><span class="built_in">console</span>.log(b.__proto__===aa.prototype); <span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(b.constructor===aa);         <span class="comment">//true b的constructor是继承来的</span></div><div class="line"><span class="built_in">console</span>.log(b.prototype);                <span class="comment">//undefined</span></div><div class="line"><span class="built_in">console</span>.log(aa.__proto__);               <span class="comment">//</span></div><div class="line"><span class="built_in">console</span>.log(aa.prototype);</div></pre></td></tr></table></figure></p>
<p><em>说明2:</em> 可以简单的用一个包含所有属性和方法的对象字面量来重写整个原型对象。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Person.prototype=&#123;</div><div class="line">    name:<span class="string">"lidonglin"</span>,</div><div class="line">    age:<span class="number">29</span>,</div><div class="line">    sayName:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">        alert(<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>这样做的结果就是constructor属性不再指向Person了，这样就隔断了实例和最初原型对象之间的关系。<br><em>缺点</em>：如果原型中有引用类型值的属性的话，那一个实例改变这个属性值，会改变所有实例中的这个值。<br>4）组合使用构造函数模式和原型模式<br>实例属性放在构造函数中，共享属性和方法放在原型模式中</p>
<pre><code><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(name,age)</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.name=name;</div><div class="line">    <span class="keyword">this</span>.age=age;</div><div class="line">&#125;</div><div class="line">Person.prototype=&#123;</div><div class="line">    constructor:Person,</div><div class="line">    sayName:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">        alert(<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><h3 id="2-继承的各种实现方法："><a href="#2-继承的各种实现方法：" class="headerlink" title="2. 继承的各种实现方法："></a>2. 继承的各种实现方法：</h3><p>1)原型链：<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span></span>()&#123;</div><div class="line">    <span class="built_in">this</span>.color=[<span class="string">"red"</span>,<span class="string">"blue"</span>];</div><div class="line">&#125;</div><div class="line">SubType.prototype=<span class="keyword">new</span> <span class="type">SuperType</span>();</div><div class="line"><span class="keyword">var</span> instance1=<span class="keyword">new</span> <span class="type">SubType</span>();</div><div class="line">instance1.color.push(<span class="string">"yellow"</span>);</div><div class="line">alert(instance1.color);        <span class="comment">//red,blue,yellow</span></div><div class="line"><span class="keyword">var</span> instance2=<span class="keyword">new</span> <span class="type">SubType</span>();</div><div class="line">alert(instance2.color)         <span class="comment">//red,blue,yellow</span></div></pre></td></tr></table></figure></p>
<p>这种方法的问题就是，如果超类有引用型属性，那这个属性会被所有的SubType实例共享，一个实例修改这个属性，其他实例也会有同样的效果。所有很少单独使用。</p>
<p>2)借用构造函数：<br>就是在子类型构造函数内部调用超类型构造函数，这样子类型就会拥有超类型的所有属性了，各个实例是各自拥有属性的副本，不会相互影响，和原型链相比还有有一个优势就是可以传入参数，存在的一个问题就是方法都在构造函数中，就没有函数复用了，因此也很少单独使用。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span><span class="params">(name)</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.name=name;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span><span class="params">(age)</span></span>&#123;</div><div class="line">     Super.call(<span class="keyword">this</span>，“lidonglin”);</div><div class="line">     <span class="keyword">this</span>.age=age;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>tips:</strong>为了确保SuperType的构造函数不会重写子类型的属性，在调用超类型的构造函数之后，再定义子类型自由的属性。<br>3)原型链+借用构造函数法：<br>使用原型链实现对原型属性和方法的继承，通过构造函数实现对实例属性的继承。解决了前两个方法的不足之处，其实就是优势互补。是最常用的继承模式。<br>4)原型式继承<br>    <figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var Person=&#123;</div><div class="line">    name:<span class="string">'li'</span>,</div><div class="line">    friends:[<span class="string">'li'</span>]</div><div class="line">&#125;</div><div class="line">var otherPerson=Object.<span class="built_in">create</span>(Person);  //得到一个原型指定super的空对象，所以他可以共享父对象的所有属性</div><div class="line">/* Object.<span class="built_in">create</span>原生支持</div><div class="line">其内部原理就是</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">crate</span><span class="params">(o)</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span><span class="params">()</span></span>&#123;&#125;;</div><div class="line">    F.prototype=o;</div><div class="line">    <span class="keyword">return</span> new F();</div><div class="line">&#125;</div><div class="line">*/</div></pre></td></tr></table></figure></p>
<pre><code>在不需要创建构造函数时，只是想让两个对象之间保持相识的时候，可以使用原型式继承，此时friends这个数组(引用类型)是被所有实例共享的。
</code></pre><h3 id="3-函数内的this指针问题："><a href="#3-函数内的this指针问题：" class="headerlink" title="3.函数内的this指针问题："></a>3.函数内的this指针问题：</h3><p>this对象是在运行时基于函数的执行环境绑定的，在全局函数中，this指向window，当函数作为某个对象的方法调用时，this执行调用这个方法的对象，匿名函数的执行环境具有全局性。通常指向window。如果是普通的调用函数，那函数内部的this指针指向的是全局变量，即window对象。如果是构造函数的话，那this指针指向的就是构造出来的对象实例。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name=<span class="string">"donglin"</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayName</span><span class="params">(name)</span></span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.name);      </div><div class="line">&#125;</div><div class="line">sayName(<span class="string">"ab"</span>);</div><div class="line"><span class="comment">//运行结果是：donglin</span></div><div class="line"> <span class="keyword">var</span> name=<span class="string">"donglin_g"</span></div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">sayName</span><span class="params">(name)</span></span>&#123;</div><div class="line">         <span class="keyword">this</span>.name=name;</div><div class="line">         alert(<span class="keyword">this</span>.name);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> oo=<span class="keyword">new</span> sayName(<span class="string">"ab"</span>);</div><div class="line"><span class="comment">//运行结果：ab</span></div></pre></td></tr></table></figure></p>
<p><strong><em>匿名函数中的this指针：</em></strong><br>下面代码中匿名函数中的this就是指向window对象，并不会指向外部作用域对象。因为函数调用的时候，活动对象会自动获得this，arguments这两个对象，而此时调用匿名函数，this首先搜索自身作用域，此时this就是window，所以不会再向上搜索。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name=<span class="string">"the window"</span>;</div><div class="line"><span class="keyword">var</span> object=&#123;</div><div class="line">            name:<span class="string">"the object"</span>,</div><div class="line">            getName:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">                 <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">alert(object.getName()());</div><div class="line"><span class="comment">//运行结果是 "the window"</span></div></pre></td></tr></table></figure></p>
<p>为了实现能访问外部作用域的this，把外部作用域中的this对象保存在一个闭包能够访问到的变量里，就可以让闭包访问该对象了。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name=<span class="string">"the window"</span>;</div><div class="line"><span class="keyword">var</span> object=&#123;</div><div class="line">            name:<span class="string">"the object"</span>,</div><div class="line">            getName:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">                <span class="keyword">var</span> that=<span class="keyword">this</span>;</div><div class="line">                 <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">                    <span class="keyword">return</span> that.name;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">alert(object.getName()());</div><div class="line"><span class="comment">//运行结果是 "the object"</span></div></pre></td></tr></table></figure></p>
<p><strong><em>tips:</em></strong>构造函数和普通函数的唯一区别，就在于调用它们的方式不对，任何函数，只要通过new操作符来调用，那他就可以成为构造函数，不通过new操作符，那就是普通函数。<br>时间绑定函数中的this指向时间处理程序对应的dom对象.<br>Object.create函数不会调用构造函数<br>当把函数A作为值传递给一个函数时，函数A里的this会变为window,但是可以通过bind将实例和方法一切传递给函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params"></span>) </span>&#123; &#125; </div><div class="line">Thing.prototype.foo = <span class="string">"bar"</span>; </div><div class="line">Thing.prototype.logFoo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;      </div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doIt</span>(<span class="params">method</span>) </span>&#123;</div><div class="line">      method();</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing();</div><div class="line">doIt(thing.logFoo.bind(thing)); <span class="comment">//logs bar</span></div></pre></td></tr></table></figure></p>
<p>bind可以代替任何一个函数或者方法的this,即便它没有赋值给实例的初始prototype<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Thing.prototype.foo = <span class="string">"bar"</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">logFoo</span>(<span class="params">aStr</span>) </span>&#123;</div><div class="line">     <span class="built_in">console</span>.log(aStr, <span class="keyword">this</span>.foo);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing();</div><div class="line">logFoo.bind(thing)(<span class="string">"using bind"</span>); <span class="comment">//logs "using bind bar"</span></div><div class="line">logFoo.apply(thing, [<span class="string">"using apply"</span>]); <span class="comment">//logs "using apply bar"</span></div><div class="line">logFoo.call(thing, <span class="string">"using call"</span>); <span class="comment">//logs "using call bar"</span></div><div class="line">logFoo(<span class="string">"using nothing"</span>); <span class="comment">//logs "using nothing undefined"</span></div></pre></td></tr></table></figure></p>
<h2 id="6-第七章-函数表达式"><a href="#6-第七章-函数表达式" class="headerlink" title="6.第七章 函数表达式"></a>6.第七章 函数表达式</h2><ol>
<li>递归函数应该始终使用arguments.callee来递归地调用自身，不要使用函数名–函数名可能会发生变化，argument.callee是一个指向正在执行的函数的指针</li>
<li><p>每个函数在被调用时，会创建一个执行环境及相应的作用域链。然后使用arguments和其他命名参数来初始化函数的活动对象。函数调用时都会自动取得两个特殊变量：this和arguments,内部函数在搜索这两个变量时,只会搜索到其活动对象为止,因此永远不可能直接访问外部函数中的这两个变量.因此下面这个实例的匿名函数在执行时,活动对象中this是就是全局变量window，所以返回的是the window</p>
 <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name=<span class="string">"the window"</span>;</div><div class="line"><span class="keyword">var</span> obj=&#123;</div><div class="line">    name:<span class="string">"my object"</span>,</div><div class="line">    getNameFunc:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name</div><div class="line">        &#125; </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">alert(obj.getNameFunc()());   <span class="comment">//the window</span></div></pre></td></tr></table></figure>
<p> 可以把外部函数的this保存在一个匿名函数可以访问的变量中,即使在返回后，that也引用这外部函数中的this,所以这是就会返回”my object”</p>
 <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">getNameFunc:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> that=<span class="keyword">this</span>;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> that.name;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">alert(obj.getNameFunc()());   <span class="comment">//my object</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="7-第八章-BOM对象"><a href="#7-第八章-BOM对象" class="headerlink" title="7.第八章 BOM对象"></a>7.第八章 BOM对象</h2><ol>
<li>修改window.location、location.href会调用location.assign()方法，所以这三个操作效果是一样的，并会在历史记录中生成一条记录，用replace（）方法就不会生成新纪录。location.reload()重新加载,但是给true参数后,则会从服务器重新加载,否则可能从缓存中加载.</li>
<li>localtion中所有属性有：</li>
</ol>
<table>
<thead>
<tr>
<th>属性名</th>
<th>例子</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>hash</td>
<td>#main</td>
<td>返回url中的hash,没有就返回空</td>
</tr>
<tr>
<td>host</td>
<td>www.ldllidonglin.github.io:80</td>
<td>带端口号</td>
</tr>
<tr>
<td>hostname</td>
<td>www.ldllidonglin.github.io</td>
<td>不带端口号</td>
</tr>
<tr>
<td>href</td>
<td><a href="http://www.ldllidonglin.github.io" target="_blank" rel="external">http://www.ldllidonglin.github.io</a></td>
<td>完整url。localtion.toString()也返回这个值</td>
</tr>
<tr>
<td>port</td>
<td>80</td>
<td>端口号</td>
</tr>
<tr>
<td>protool</td>
<td>http</td>
<td>协议</td>
</tr>
<tr>
<td>search</td>
<td>?q=javascript</td>
<td>返回查询字符串</td>
</tr>
</tbody>
</table>
<ol>
<li>navigator中appCodeName通常都是Mozilla</li>
<li>history无法获取用户访问过的url，但是可以go(n) forward() back()实现后退前进，有一个length属性保存这该窗口所有历史记录，第一次打开页面时为0，go函数参数可以是字符串，会跳转到最近的那个包含这段字符串的连接，可以向前或者向后.</li>
</ol>
<h2 id="8-第九章-客户端检测"><a href="#8-第九章-客户端检测" class="headerlink" title="8 第九章 客户端检测"></a>8 第九章 客户端检测</h2><ol>
<li>能力检测，必须检测实际用到的特性</li>
<li>至今基于webkit的浏览器，都在ua中表示为Mozilla/5.0 和基于GecKo引擎的浏览器一致.</li>
<li><p>ua检测浏览器和引擎的代码</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> client=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> engine=&#123;</div><div class="line">        <span class="attr">ie</span>:<span class="number">0</span>,</div><div class="line">        <span class="attr">gecko</span>:<span class="number">0</span>,</div><div class="line">        <span class="attr">webkit</span>:<span class="number">0</span>,</div><div class="line">        <span class="attr">khtml</span>:<span class="number">0</span>,</div><div class="line">        <span class="attr">opera</span>:<span class="number">0</span>,</div><div class="line"></div><div class="line">        <span class="comment">//具体的版本</span></div><div class="line">        ver:<span class="literal">null</span></div><div class="line">    &#125;;</div><div class="line">    <span class="comment">//浏览器</span></div><div class="line">    <span class="keyword">var</span> browser=&#123;</div><div class="line">        <span class="attr">ie</span>:<span class="number">0</span>,</div><div class="line">        <span class="attr">firefox</span>:<span class="number">0</span>,</div><div class="line">        <span class="attr">konq</span>:<span class="number">0</span>,</div><div class="line">        <span class="attr">opera</span>:<span class="number">0</span>,</div><div class="line">        <span class="attr">chrome</span>:<span class="number">0</span>,</div><div class="line"></div><div class="line">        <span class="attr">ver</span>:<span class="literal">null</span></div><div class="line">    &#125;;</div><div class="line">    <span class="comment">//平台、设备和操作系统</span></div><div class="line">    <span class="keyword">var</span> system=&#123;</div><div class="line">        <span class="attr">win</span>:<span class="literal">false</span>,</div><div class="line">        <span class="attr">mac</span>:<span class="literal">false</span>,</div><div class="line">        <span class="attr">x11</span>:<span class="literal">false</span>,</div><div class="line"></div><div class="line">        <span class="comment">//移动设备</span></div><div class="line">        iphone:<span class="literal">false</span>,</div><div class="line">        <span class="attr">ipod</span>:<span class="literal">false</span>,</div><div class="line">        <span class="attr">ipad</span>:<span class="literal">false</span>,</div><div class="line">        <span class="attr">ios</span>:<span class="literal">false</span>,</div><div class="line">        <span class="attr">android</span>:<span class="literal">false</span>,</div><div class="line">        <span class="attr">nokiaN</span>:<span class="literal">false</span>,</div><div class="line">        <span class="attr">winMobile</span>:<span class="literal">false</span>,</div><div class="line"></div><div class="line">        <span class="comment">//游戏系统</span></div><div class="line">        wii:<span class="literal">false</span>,</div><div class="line">        <span class="attr">ps</span>:<span class="literal">false</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> ua = navigator.userAgent;</div><div class="line">    <span class="comment">//首先检测opera,因为在ua中没法检测出opera</span></div><div class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.opera)&#123;</div><div class="line">        engine.ver=browser.ver=<span class="built_in">window</span>.opera.version();</div><div class="line">        engine.opera=browser.opera=<span class="built_in">parseFloat</span>(engine.ver);</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="regexp">/AppleWebKit\/(\S+)/</span>.test(ua))&#123;     <span class="comment">//判断是否是webit内核</span></div><div class="line">        engine.ver=<span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</div><div class="line">        engine.webkit=<span class="built_in">parseFloat</span>(engine.ver);</div><div class="line"></div><div class="line">        <span class="comment">//再确定是Chrome还是Safari</span></div><div class="line">        <span class="keyword">if</span>(<span class="regexp">/Chrome\/(\S+)/</span>.test(ua))&#123;</div><div class="line">            browser.ver=<span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</div><div class="line">            browser.chrome=<span class="built_in">parseFloat</span>(browser.ver);</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/Version\/(\S+)/</span>.test(ua))&#123;</div><div class="line">            browser.ver = <span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</div><div class="line">            browser.safari = <span class="built_in">parseFloat</span>(browser.ver);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="comment">//近似地确定版本号</span></div><div class="line">            <span class="keyword">var</span> safariVersion = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (engine.webkit &lt; <span class="number">100</span>)&#123;</div><div class="line">                safariVersion = <span class="number">1</span>;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (engine.webkit &lt; <span class="number">312</span>)&#123;</div><div class="line">                safariVersion = <span class="number">1.2</span>;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (engine.webkit &lt; <span class="number">412</span>)&#123;</div><div class="line">                safariVersion = <span class="number">1.3</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                safariVersion = <span class="number">2</span>;</div><div class="line">            &#125;</div><div class="line">            browser.safari = browser.ver = safariVersion;</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="regexp">/KHTML\/(\S+)/</span>.test(ua)||<span class="regexp">/Konqueror\/([^;]+)/</span>.test(ua))&#123;</div><div class="line">        engine.ver=browser.ver=<span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</div><div class="line">        engine.khtml=browser.konq=<span class="built_in">parseFloat</span>(engine.ver);</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="regexp">/rv:([^\)]+)\) Gecko\/\d&#123;8&#125;/</span>.test(ua))&#123;</div><div class="line">        engine.ver=<span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</div><div class="line">        engine.gecko=<span class="built_in">parseFloat</span>(engine.ver);</div><div class="line">        <span class="comment">//确定是不是Firefox</span></div><div class="line">        <span class="keyword">if</span>(<span class="regexp">/Firefox\/(\S+)/</span>.test(ua))&#123;</div><div class="line">            browser.ver=<span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</div><div class="line">            browser.firefox=<span class="built_in">parseFloat</span>(browser.ver);</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="regexp">/MSIE ([^;]+)/</span>.test(ua))&#123;</div><div class="line">        engine.ver=browser.ver=<span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</div><div class="line">        engine.ie=browser.ie=<span class="built_in">parseFloat</span>(engine.ver);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//检测平台</span></div><div class="line">    <span class="keyword">var</span> p=navigator.platform;</div><div class="line">    system.win=p.indexOf(<span class="string">"Win"</span>)==<span class="number">0</span>;</div><div class="line">    system.mac=p.indexOf(<span class="string">"Mac"</span>)==<span class="number">0</span>;</div><div class="line">    system.x11=p.indexOf(<span class="string">"X11"</span>)||(p.indexOf(<span class="string">"Linux"</span>)==<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="comment">//检测 Windows 操作系统</span></div><div class="line">    <span class="keyword">if</span> (system.win)&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="regexp">/Win(?:dows )?([^do]&#123;2&#125;)\s?(\d+\.\d+)?/</span>.test(ua))&#123;</div><div class="line">            <span class="keyword">if</span> (<span class="built_in">RegExp</span>[<span class="string">"$1"</span>] == <span class="string">"NT"</span>)&#123;</div><div class="line">                <span class="keyword">switch</span>(<span class="built_in">RegExp</span>[<span class="string">"$2"</span>])&#123;</div><div class="line">                    <span class="keyword">case</span> <span class="string">"5.0"</span>:</div><div class="line">                        system.win = <span class="string">"2000"</span>;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> <span class="string">"5.1"</span>:</div><div class="line">                        system.win = <span class="string">"XP"</span>;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> <span class="string">"6.0"</span>:</div><div class="line">                        system.win = <span class="string">"Vista"</span>;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> <span class="string">"6.1"</span>:</div><div class="line">                        system.win = <span class="string">"7"</span>;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">default</span>:</div><div class="line">                        system.win = <span class="string">"NT"</span>;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">RegExp</span>[<span class="string">"$1"</span>] == <span class="string">"9x"</span>)&#123;</div><div class="line">                system.win = <span class="string">"ME"</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                system.win = <span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//移动设备</span></div><div class="line">    system.iphone = ua.indexOf(<span class="string">"iPhone"</span>) &gt; <span class="number">-1</span>;</div><div class="line">    system.ipod = ua.indexOf(<span class="string">"iPod"</span>) &gt; <span class="number">-1</span>;</div><div class="line">    system.ipad = ua.indexOf(<span class="string">"iPad"</span>) &gt; <span class="number">-1</span>;</div><div class="line">    system.nokiaN = ua.indexOf(<span class="string">"NokiaN"</span>) &gt; <span class="number">-1</span>;</div><div class="line">    <span class="comment">//windows mobile</span></div><div class="line">    <span class="keyword">if</span> (system.win == <span class="string">"CE"</span>)&#123;</div><div class="line">        system.winMobile = system.win;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (system.win == <span class="string">"Ph"</span>)&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="regexp">/Windows Phone OS (\d+.\d+)/</span>.test(ua))&#123;;</div><div class="line">            system.win = <span class="string">"Phone"</span>;</div><div class="line">            system.winMobile = <span class="built_in">parseFloat</span>(<span class="built_in">RegExp</span>[<span class="string">"$1"</span>]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//检测 iOS 版本</span></div><div class="line">    <span class="keyword">if</span> (system.mac &amp;&amp; ua.indexOf(<span class="string">"Mobile"</span>) &gt; <span class="number">-1</span>)&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="regexp">/CPU (?:iPhone )?OS (\d+_\d+)/</span>.test(ua))&#123;</div><div class="line">            system.ios = <span class="built_in">parseFloat</span>(<span class="built_in">RegExp</span>.$<span class="number">1.</span>replace(<span class="string">"_"</span>, <span class="string">"."</span>));</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            system.ios = <span class="number">2</span>; <span class="comment">//不能真正检测出来，所以只能猜测</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//检测 Android 版本</span></div><div class="line">    <span class="keyword">if</span> (<span class="regexp">/Android (\d+\.\d+)/</span>.test(ua))&#123;</div><div class="line">        system.android = <span class="built_in">parseFloat</span>(<span class="built_in">RegExp</span>.$<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//游戏系统</span></div><div class="line">    system.wii = ua.indexOf(<span class="string">"Wii"</span>) &gt; <span class="number">-1</span>;</div><div class="line">    system.ps = <span class="regexp">/playstation/i</span>.test(ua);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">engine</span>:engine,</div><div class="line">        <span class="attr">browser</span>:browser,</div><div class="line">        <span class="attr">system</span>:system</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">&#125;();</div></pre></td></tr></table></figure>
</li>
<li><p>优先使用能力检测，在需要知道平台和确切浏览器的时候才用ua检测</p>
</li>
</ol>
<h2 id="9-第10章-DOM"><a href="#9-第10章-DOM" class="headerlink" title="9 第10章 DOM"></a>9 第10章 DOM</h2><ol>
<li>文档对象模型(DOM)是HTML和XML文档的编程接口</li>
<li>cloneNode在IE8-会复制绑定在元素上的事件，其他浏览器都不会。</li>
<li>document对象是HTMLDocument(继承自Document类型)的一个实例,Document节点nodeType是9,nodeName是“#docuemnt”,nodeValue是null。文档只有一个子节点，就是<html>元素，document.documentElement可以访问到。document.body指向body元素</html></li>
<li>document.domain设置为”wrox.com”后，就不能再设置为”p2p.wrox.com”。</li>
<li>getElementsByTagName得到的是HTMLCollection支持按名称访问，及可以向方括号中传入字符串，比如images[“myImage”],或者使用namedItem(“myImage”);</li>
<li>取得所有元素可以使用getElementsByTagName(“*”);</li>
<li>document对象上有几个特殊集合 </li>
</ol>
<table>
<thead>
<tr>
<th>name</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>document.forms</td>
<td>所有表单</td>
</tr>
<tr>
<td>document.images</td>
<td>所有的img元素</td>
</tr>
<tr>
<td>document.links</td>
<td>带href属性的a元素</td>
</tr>
<tr>
<td>document.anchors</td>
<td>带name属性的a元素</td>
</tr>
</tbody>
</table>
<ol>
<li>div.getAttribute(“class”)==div.className。getAttribute可以取得自定义特性，自定义特性应该加上data-前缀。直接以点号获取是没法获取到自定义属性的。</li>
<li>有两类特色的属性，一是style，getAttribute得到的是css文本，但是直接用点号获取的是一个对象。二是onclick,getAttribute得到的是js代码的字符串,直接用点号访问获取的是一个js函数。</li>
<li>一般情况下不使用getAttribute这个函数，只有在获取自定义特性值时才使用这个函数.</li>
<li>element.childNodes在IE8-是不会包括元素之间的空白符的，IE9+和其他浏览器会.</li>
<li>Text节点nodeName是#text,nodeValue==data是其包含文本;text.length==text.nodeValue.length==text.data.length属性包含字符数目(换行符的长度==3);text.appendData(text)可以将text文本添加到末尾;设置nodeValue时,html为被转义,所以直接nodeValue=”\<strong\>other\</strong\>“;不会出现dom节点;createTextNode(“\<strong\>hello\</strong\>“)可以创建文本节点;node.normalize()方法可以将多个文本节点合并成一个节点。</li>
<li>DocumentFragment可以在需要多次修改dom是使用，createDocumentFragment()创建文档碎片，然后把需要插入的节点插入到文档碎片中，然后再向DOM中一次性插入文档碎片.</li>
</ol>
<h2 id="10-第11章-DOM扩展"><a href="#10-第11章-DOM扩展" class="headerlink" title="10 第11章 DOM扩展"></a>10 第11章 DOM扩展</h2><ol>
<li>对DOM的两个主要扩展就是SelectorsAPI和HTML5,前者是增加了querySelector()、querySelectorAll()、matchesSelector()三个方法。后者就是增加了getElementsByClassName()、innerHTML属性;outerHTML是包含自身的。</li>
<li>insertAdjacentHTML(),第一个参数有4个值:beforebegin、afterbegin、beforeend、afterend.分别是元素前、元素内第一个位置、元素内最后一个位置、元素后;</li>
<li>在需要遍历元素的时候，因为childNode在很多浏览器是会包括文本节点的，所以可以使用children属性，他只包括元素节点，但是IE8-会包括注释节点。</li>
<li>innerText和outerText在读取文本值的时候效果是一样的。都是对象起始和结束标签内的所有文本，包括子节点的。但是在设置文本的时候，outerText会连带把标签本身都替换了。fireFox不支持innerText,也没有outerText,innerText的作用可以用textContent代替。</li>
</ol>
<h2 id="11-第12章-DOM2和DOM3"><a href="#11-第12章-DOM2和DOM3" class="headerlink" title="11 第12章 DOM2和DOM3"></a>11 第12章 DOM2和DOM3</h2><ol>
<li>对于使用短划线的css属性名，必须转成驼峰大小写形式，才能通过JavaScript来访问.float是例外，IE8-下是styleFloat,现代浏览器已经支持直接使用style.float来访问了.</li>
<li>document.defaultView.getComputedStyle(myDiv,null)可以获得计算后的样式,第二个参数支持伪元素字符串，比如”:after”;IE8-没有这个方法，但是可以用myDiv.currentStyle来获得计算后的样式，没有border属性。因为css属性的默认值在不同浏览器有可能不同，所以如果需要某个特定属性的默认值，应该手工指定.</li>
<li><p>document.styleSheets获得link和style设置的样式表。也可以通过获取link和style标签来获得样式表对象，IE8-使用element.styleSheet，其他支持element.sheet。假设要获得页面中第一个样式表中的第一个样式规则，代码可以如下</p>
 <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var sheet = document.styleSheets[<span class="number">0</span>];</div><div class="line">var rules = sheet.cssRules <span class="params">||</span> sheet.rules; <span class="regexp">//</span>取得规则列表</div><div class="line">var rule = rules[<span class="number">0</span>]; <span class="regexp">//</span>取得第一条规则</div><div class="line">alert(rule.selectorText); <span class="regexp">//</span><span class="string">"div.box"</span></div><div class="line">alert(rule.style.cssText); <span class="regexp">//</span>完整的 CSS 代码</div><div class="line">alert(rule.style.backgroundColor); <span class="regexp">//</span><span class="string">"blue"</span></div><div class="line">alert(rule.style.width); <span class="regexp">//</span><span class="string">"100px"</span></div><div class="line">alert(rule.style.height); <span class="regexp">//</span><span class="string">"200px"</span></div><div class="line">sheet.insertRule(<span class="string">"body &#123; background-color: silver &#125;"</span>, <span class="number">0</span>); <span class="regexp">//</span>DOM 方法</div></pre></td></tr></table></figure>
</li>
<li><p>dom的offsetWidth和offsetHeight属性包括边框和内边距。offsetLeft和offsetTop表示和已经定位的父容器(relative、absolute)的距离。clientWidth和clientHeight是内容+内边距，不包括边框。clientLeft和clientTop就是边框的宽度</p>
</li>
<li>元素自带getBoundingClientRect(),这个方法返回一个矩形对象,自带left、top、right、bottom属性,chrome高级版本还会给出width和height属性,给出了元素在页面中相对视口的位置.width=right-left,height=bottom-top;IE8-文档左上角坐标是(2,2),需要处理兼容性。</li>
<li>DOM2提供了遍历和范围的接口，NodeIterator和TreeWalker可以对DOM执行深度优先的遍历。范围是选择DOM结构中特定部分，然后再实行相应的操作。IE8-只支持文本范围.</li>
</ol>
<h2 id="12-第13章-事件"><a href="#12-第13章-事件" class="headerlink" title="12 第13章 事件"></a>12 第13章 事件</h2><ol>
<li>DOM事件流中，IE首先提出冒泡，Netscape提出捕获。在IE9+ 及其他浏览器中，都支持冒泡和捕获。规范规定在捕获阶段，目标是不会触发事件的，但是IE9+和其他浏览器都会在捕获阶段触发事件对象上的事件。所以就有两个机会在目标对象上操作事件。</li>
<li>element.onclick是DOM0级事件，同时被认为是元素方法，所以事件处理函数是在element的作用域中运行的。而且是冒泡的。同时event对象是window下的一个属性</li>
<li>DOM2级事件用addEventListener()和removeEventListener()来制定和删除事件处理程序。也是在元素作用域内运行的，第三个参数默认是false，为冒泡阶段执行。可添加多个事件处理函数，按顺序执行。添加匿名函数无法移除，因为移除必须和添加时使用的参数相同才行。</li>
<li>IE8-只支持冒泡，而且它是使用attachEvent()和detachEvent()来指定和移除的。而且事件处理程序作用域是window。添加多个处理函数时，触发顺序和堆栈一样。会传递一个参数event到事件处理函数中</li>
<li><p>以下是夸浏览器的事件处理程序：</p>
 <figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> EventUtil=&#123;</div><div class="line">    addHandler:<span class="keyword">function</span>(element,<span class="keyword">type</span>,handler)&#123;</div><div class="line">        <span class="keyword">if</span>(element<span class="variable">.addEventListener</span>)&#123;            <span class="comment">//chrome ...之类的浏览器方式</span></div><div class="line">            element<span class="variable">.addEventListener</span>(<span class="keyword">type</span>,handler,false);<span class="comment">//默认是false</span></div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(element<span class="variable">.attachEvent</span>)&#123;           <span class="comment">//IE</span></div><div class="line">            element<span class="variable">.attachEvent</span>(<span class="string">"on"</span>+<span class="keyword">type</span>,handler);  <span class="comment">//IE不支持捕获</span></div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            element[<span class="string">"on"</span>+<span class="keyword">type</span>]=handler;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    removeHandler:<span class="keyword">function</span>(element,<span class="keyword">type</span>,handler)&#123;</div><div class="line">        <span class="keyword">if</span>(element<span class="variable">.removeEventListener</span>)&#123;</div><div class="line">            element<span class="variable">.removeEventListener</span>(<span class="keyword">type</span>,handler,false);</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(element<span class="variable">.detachEvent</span>)&#123;</div><div class="line">            element<span class="variable">.detachEvent</span>(<span class="string">"on"</span>+<span class="keyword">type</span>,handler)&#123;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            element[<span class="string">"on"</span>+<span class="keyword">type</span>]=<span class="literal">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    getEvent:<span class="keyword">function</span>(<span class="keyword">event</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">event</span>?<span class="keyword">event</span>:window<span class="variable">.event</span>;</div><div class="line">    &#125;,</div><div class="line">    getTarget:<span class="keyword">function</span>(<span class="keyword">event</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">event</span><span class="variable">.target</span>||<span class="keyword">event</span><span class="variable">.srcElement</span>;</div><div class="line">    &#125;,</div><div class="line">    getRelatedTarget:<span class="keyword">function</span>(<span class="keyword">event</span>)&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">event</span><span class="variable">.relatedTarget</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">event</span><span class="variable">.relatedTarget</span>;</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">event</span><span class="variable">.toElement</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">event</span><span class="variable">.toElement</span>;</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">event</span><span class="variable">.fromElement</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">event</span><span class="variable">.fromElement</span>;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    preventDefault:<span class="keyword">function</span>(<span class="keyword">event</span>)&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">event</span><span class="variable">.preventDefault</span>)&#123;</div><div class="line">            <span class="keyword">event</span><span class="variable">.preventDefault</span>();</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">event</span><span class="variable">.returnValue</span>=false;   直接<span class="keyword">return</span> false;也是可以的</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    stopPropagation:<span class="keyword">function</span>(<span class="keyword">event</span>)&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">event</span><span class="variable">.stopPropagation</span>)&#123;</div><div class="line">            <span class="keyword">event</span><span class="variable">.stopPropagation</span>();</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">event</span><span class="variable">.cancelBubble</span>=true;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    getRelatedTarget: <span class="keyword">function</span>(<span class="keyword">event</span>)&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">event</span><span class="variable">.relatedTarget</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">event</span><span class="variable">.relatedTarget</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">event</span><span class="variable">.toElement</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">event</span><span class="variable">.toElement</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">event</span><span class="variable">.fromElement</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">event</span><span class="variable">.fromElement</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    getWheelDelta: <span class="keyword">function</span>(<span class="keyword">event</span>)&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">event</span><span class="variable">.wheelDelta</span>)&#123;</div><div class="line">            <span class="keyword">return</span> (client<span class="variable">.engine</span><span class="variable">.opera</span> &amp;&amp; client<span class="variable">.engine</span><span class="variable">.opera</span> &lt; <span class="number">9</span><span class="variable">.5</span> ?</div><div class="line">                -<span class="keyword">event</span><span class="variable">.wheelDelta</span> : <span class="keyword">event</span><span class="variable">.wheelDelta</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> -<span class="keyword">event</span><span class="variable">.detail</span> * <span class="number">40</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    getCharCode: <span class="keyword">function</span>(<span class="keyword">event</span>)&#123;</div><div class="line">        <span class="keyword">if</span> (typeof <span class="keyword">event</span><span class="variable">.charCode</span> == <span class="string">"number"</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">event</span><span class="variable">.charCode</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">event</span><span class="variable">.keyCode</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>img对象在设置了src后就会开始下载，但是script对象只有在设置了src并添加到文档中后才会开始下载。这两个都有load事件，但是IE8-不支持script上的load事件</p>
</li>
<li>event.clientX和event.clientY是视口坐标，pageX和pageY是页面坐标。IE8-支持pageX但是可以通过视口坐标和scroll坐标计算得到。screenX是屏幕坐标。offetX和offetY是相对于目标元素边界的坐标</li>
<li>针对mouseover和mouseout有event.relatedTarget这个属性来获得相关元素，IE8-可以用fromElement和toElement来获得。</li>
<li>mousewheel时间有一个wheelData，向前是120的倍数，向后是-120的倍数。Firefox是在event.detail中，向前是-3的倍数，向后是3的倍数。</li>
<li>键盘事件中，keydown是按下任意键，keypress是字符键，随后触发文本事件textInput事件，再触发文keyup事件。event.keyCode对应着键盘的上字符的ASCII码,用String.fromCharCode可以获得字符，但是对于特殊字符和小键盘上的需要特殊处理。小键盘对应着小写字母，比如小键盘上的1，对应着a。textInput事件的event属性上有data属性对应着输入的字符，inputMethod属性对应着输入方式，只有按下能够输入实际字符的键时才会触发</li>
<li>减少内存占用和有优化性能有两个方式：事件委托和在不需要的时候移除事件处理程序。移除事件处理程序时需要注意当移除DOM时，如果这个DOM绑定了事件处理程序，在移除前需先移除其绑定的事件处理程序。</li>
</ol>
<h2 id="13-第14章-表单脚本"><a href="#13-第14章-表单脚本" class="headerlink" title="13 第14章 表单脚本"></a>13 第14章 表单脚本</h2><ol>
<li>通过document.forms可以获得页面中所有表单，表单元素有length属性表示表单中控件的数量。elements属性是表单中所有控件的集合。reset()重置所有控件为默认值;submit()为提交表单。</li>
<li>submit按钮或者图片按钮就可以提交表单，此时会触发表单的submit事件，就可以在相应的事件处理函数中进行相应处理，阻止默认事件就可以阻止表单提交。在这里可以处理重复提交的问题。</li>
<li>表单中的控件都有focus和blur方法，可以在页面的load事件中，调用第一个表单字段的focus()方法，使焦点转移到第一个字段。</li>
<li>文本框有select方法和select事件，value属性既是文本框中的输入文本。要取得选中的文本，HTML5有text.selectionStart和selectionEnd两个属性，所以text.value.substring(text.selectionStart,text.selectionEnd)可以获得选中的文本，但是IE8-不支持这两个属性，可以使用document.selection.createRange().text来获得。</li>
<li><p>选择部分文本的跨浏览器方法：</p>
 <figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="title">selectText</span>(textbox, startIndex, stopIndex)&#123;</div><div class="line">    if (textbox.setSelectionRange)&#123;</div><div class="line">        textbox.setSelectionRange(startIndex, stopIndex);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (textbox.createTextRange)&#123;                 //IE8-</div><div class="line">        var <span class="keyword">range</span> = textbox.createTextRange();</div><div class="line">        <span class="keyword">range</span>.collapse(<span class="literal">true</span>);</div><div class="line">        <span class="keyword">range</span>.moveStart(<span class="string">"character"</span>, startIndex);</div><div class="line">        <span class="keyword">range</span>.moveEnd(<span class="string">"character"</span>, stopIndex - startIndex);</div><div class="line">        <span class="keyword">range</span>.<span class="keyword">select</span>();</div><div class="line">    &#125;</div><div class="line">    textbox.focus();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>操作剪贴板有copy paste等事件，event.clipboardData.setData()、getData()可以对剪贴板进行操作。复制选中的文本到剪贴板中代码如下</p>
 <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.target.nodeName === <span class="string">'INPUT'</span> || <span class="keyword">this</span>.target.nodeName === <span class="string">'TEXTAREA'</span>) &#123;</div><div class="line">    <span class="keyword">this</span>.target.select();</div><div class="line">    <span class="keyword">this</span>.selectedText = <span class="keyword">this</span>.target.value;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">var</span> range = document.createRange();</div><div class="line">    <span class="keyword">var</span> selection = window.getSelection();</div><div class="line"></div><div class="line">    range.selectNodeContents(<span class="keyword">this</span>.target);</div><div class="line">    selection.addRange(range);</div><div class="line">    <span class="keyword">this</span>.selectedText = selection.toString();</div><div class="line">&#125;</div><div class="line">document.execCommand(<span class="string">"copy"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>选择框有options属性保存着所有option，selectedIndex是选中项的索引，多选只保存第一项的值，没有选中的话是-1，size属性可以设置选择框中可见的行数，默认是0；其type属性不是select-one就是select-multiple。value属性由当前选中项决定，首先是选中项的value属性，既是是设定的空值或者空字符串，但是如果没有设定value属性，那就是该选中项的文本（IE8除外），多选只会取第一项。change事件只要选中了选项就会触发和其他表单不一样。</p>
</li>
<li>option有一个index属性保存着这个选项在option中的索引。selected是一个是否被选中的布尔值。</li>
<li>selectbox2.appendChild(selectbox1.options[0])；这段代码将会把原来的元素从其父节点中移除，然后添加到指定的位置</li>
<li>富文本编辑器有两种方式，1是在页面中嵌入一个包含空HTML页面的iframe，必须在页面加载完后，通过设置designMode=‘on’，那这个页面就可以被编辑。2是给任何元素设置contenteditable=true，然后这个元素包含的任何文本内容就都可以编辑了，利用document.exeCommand()可以对该区域执行很多操作。queryCommandState()可以返回是否对选中文本执行了某个操作。</li>
<li>富文本编辑很多时候是使用iframe而非表单控件实现，所以要提交富文本编辑器中的html就需要添加一个隐藏的表单字段，然后从iframe中提出出innerHTML赋给这个表单字段的value。</li>
</ol>
<h2 id="14-第15章-使用canvas绘图"><a href="#14-第15章-使用canvas绘图" class="headerlink" title="14 第15章 使用canvas绘图"></a>14 第15章 使用canvas绘图</h2><ol>
<li><p>使用canvas要先给它这是height和width，canvas上是有两套width和height值的，在css上只能设置这个dom的大小，而不能改变绘图区域的大小，默认是300*150，直接在canvas标签上设置是既可以更改dom大小，又可以更改绘图区域大小。如果不直接在canvas上设置width和height，而只在css上设置，则会拉伸绘图的内容，比如</p>
 <figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">canvas&#123;</div><div class="line"><span class="symbol">    width:</span><span class="number">600</span>px;</div><div class="line"><span class="symbol">    height:</span> <span class="number">300</span>px;</div><div class="line">&#125;</div><div class="line"><span class="params">&lt;canvas&gt;</span><span class="params">&lt;/canvas&gt;</span></div><div class="line">js..</div><div class="line">context.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">300</span>,<span class="number">150</span>);</div></pre></td></tr></table></figure>
<p> 实际出来的效果是把这个绘制的300<em>150大小的矩形拉伸到600</em>300了。布满整个DOM,DOM大小是600*300。</p>
</li>
<li>context可以调用save方法，把所有的设置比如颜色，线宽等保存进入一个栈结构，要想回到之前保存的设置，就可以调用restore()方法。</li>
<li>webgl视口坐标原点在canvas元素的左下角，x轴和y轴的正方向分别是向右和向上。<br>改变视口大小可以使用gl.viewport(0,0,drawing.widht,drawing.height)；视口内部的坐标原点在视口的中心点。</li>
<li>webgl一般不会抛出错误，为了知道是否有错误发生，必须在调用某个可能出错的方法后，手动调用gl.getError()方法，获得错误。</li>
</ol>
<h2 id="15-第16章-HTML5脚本编程"><a href="#15-第16章-HTML5脚本编程" class="headerlink" title="15 第16章 HTML5脚本编程"></a>15 第16章 HTML5脚本编程</h2><ol>
<li>postMessage方法，可以向当前页面中的iframe或者当前页弹出的窗口发送消息。 然后接收方window对象上有message事件，可以监听这个事件作接收消息的处理。</li>
<li>拖动先触发dragstart事件，然后不断触发drag事件，当某个元素被拖动到一个有效的放置目标上时，会依次发生dragenter、dragover、dragleave事件，如果放置在目标元素中，会触发drop中。</li>
<li>dragstart事件中可以调用event.dataTransfer.setData(“text”,”some text”)；在drop中也可以调用getData来获取数据。</li>
<li>HTML5为所有HTML元素规定了一个draggable属性，表示元素是否可以拖动，图像和链接的draggable属性自动被设置成了true，其他的都是false。IE10+支持</li>
</ol>
<h2 id="16-第17章-错误处理与调试"><a href="#16-第17章-错误处理与调试" class="headerlink" title="16 第17章 错误处理与调试"></a>16 第17章 错误处理与调试</h2><ol>
<li>ECMA3引入了try-catch语句，catch语句返回一个error对象，它有message、name属性。同时可以在后面添加finally子句，这个子句是一定会执行的，甚至在try或者catch里又return语句，也不能阻止finally子句的执行。</li>
<li>将错误上报可以使用img的src属性来发送请求，把错误信息当参数发送get请求。</li>
</ol>
<h2 id="17-第18章-JavaScript和XML"><a href="#17-第18章-JavaScript和XML" class="headerlink" title="17 第18章 JavaScript和XML"></a>17 第18章 JavaScript和XML</h2><h2 id="18-第19章-E4X"><a href="#18-第19章-E4X" class="headerlink" title="18 第19章 E4X"></a>18 第19章 E4X</h2><h2 id="19-第20章-JSON"><a href="#19-第20章-JSON" class="headerlink" title="19 第20章 JSON"></a>19 第20章 JSON</h2><ol>
<li>JSON可以表示简单值、对象、数组三种类型的值，不支持undefined</li>
<li>JSON属性值必须加双引号，对象可以不用。</li>
<li>JSON.stringify()第二个参数可以实现过滤功能，可以是一个数组也可以是一个函数。如果是一个数组，那数组内的元素就是要过滤得到的属性名，如果是一个函数，那会传给函数两个参数，属性名和属性值。返回属性值，如果返回的是undefined，那这个属性会被删除掉。第三个参数用于控制缩进和空白符，传入一个数字表示空白符的长度，最长为10，如果传入的是一个字符串，则这个字符串被用作缩进字符。</li>
<li>JSON.parse()也可以接收第二个参数，是一个函数，传给这个函数的两个参数是属性名和属性值。返回属性值。</li>
</ol>
<h2 id="20-第21章-Ajax与Comet"><a href="#20-第21章-Ajax与Comet" class="headerlink" title="20 第21章 Ajax与Comet"></a>20 第21章 Ajax与Comet</h2><ol>
<li>默认情况下，在发送XHR请求的同时，还会发送以下头部信息</li>
</ol>
<table>
<thead>
<tr>
<th>name</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>Accept</td>
<td>浏览器能够处理的内容类型。</td>
</tr>
<tr>
<td>Accept-Charset</td>
<td>浏览器能够显示的字符集。</td>
</tr>
<tr>
<td>Accept-Encoding</td>
<td>浏览器能够处理的压缩编码。</td>
</tr>
<tr>
<td>Accept-Language</td>
<td>浏览器当前设置的语言。</td>
</tr>
<tr>
<td>Connection</td>
<td>浏览器与服务器之间连接的类型。</td>
</tr>
<tr>
<td>Cookie</td>
<td>当前页面设置的任何 Cookie。</td>
</tr>
<tr>
<td>Host</td>
<td>发出请求的页面所在的域 。</td>
</tr>
<tr>
<td>Referer</td>
<td>发出请求的页面的URI。注意，HTTP规范将这个头部字段拼写错了，而为保证与规范一致，也只能将错就错了。（这个英文单词的正确拼法应该是 referrer。）</td>
</tr>
<tr>
<td>User-Agent</td>
<td>浏览器的用户代理字符串。</td>
</tr>
</tbody>
</table>
<ol>
<li>可以在open之后，send之前调用setRequestHeader方法，设置自定义的请求头信息。getRequestHeader()可以获得相应的相应头部信息。getAllResponseHeader()则可以取得一个包含所有头部信息的长字符串。</li>
<li>xhr2增加了FormData，new FormData()可以直接append值对，然后把FormData传给send方法，发送到服务端。方便之处在于不必明确的在xhr对象上设置请求头部。</li>
<li>xhr2还增加了timeout属性，在给timeout属性设置一个值后，如果在规定的时间没有接收到相应，就会触发timeout事件。</li>
<li>xhr2还增加了overrideMimeType方法，用于重写xhr相应的MIME类型。</li>
<li>进度事件，progress事件的event.target属性是xhr对象，但是增加了lengthComputable表示进度信息是否可用的布尔值、position表示已经接收的字节数、totalSize表示总字节数三个属性。onpress需在open之前添加</li>
<li>xhr对象使用CORS来实现跨域，但是不能使用setRequestHeader设置自定义头部，不能发送和接收cookie，调用getAllResponseHeader方法会放回空字符串</li>
<li>Comet是对Ajax的进一步扩展，让服务器几乎能够实时地向客户端推送数据，实现手段主要有长轮询和HTTP流。</li>
<li>Web Sockets是一种与服务器进行全双工、双向通信的信道，不使用HTTP协议，而使用自定义的协议。也必须使用不同的Web服务器。可以只经过一次http请求，就可以做到源源不断的消息传送。</li>
</ol>
<h2 id="21-第22章-高级技巧"><a href="#21-第22章-高级技巧" class="headerlink" title="21 第22章 高级技巧"></a>21 第22章 高级技巧</h2><ol>
<li><p>可以创建作用域安全的构造函数，确保在缺少new操作符时调用构造函数不会改变错误的环境对象，因为直接调用函数时，this对象是window，而使用new操作符时，this指向新创建的对象实例。</p>
 <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(name,age,job)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>（<span class="keyword">this</span> <span class="keyword">instanceof</span> Person)&#123;</div><div class="line">        <span class="keyword">this</span>.name=name;</div><div class="line">        <span class="keyword">this</span>.age=age;</div><div class="line">        <span class="keyword">this</span>.job=job;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(name,age,job);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>大量if语句时，可以采用惰性载入，即在第一次调用的过程中，该函数会被覆盖为另外一个按合适方式执行的函数，这样，第二次调用这个函数时，就不会再经过多次的if了</p>
 <figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createXHR</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> XMLHttpRequest!=<span class="string">"undefined"</span>)&#123;</div><div class="line">        createXHR=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">        &#125;;</div><div class="line">    &#125;...</div><div class="line">    ...</div><div class="line">    <span class="keyword">return</span> createXHR();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>定时器代码是放在一个等待区域，直到时间间隔到了以后，此时将代码添加到JavaScript的处理队列中，等待下一次JavaScript进程空闲时被执行，setTimeout() setInterval()里的this指向window；</p>
</li>
<li><p>函数绑定，一个bind函数接收一个函数和一个环境，返回一个在给定环境中调用给定函数的函数。并且将所有参数原封不动的传递过去。现在ECMA5已经原生给所有函数都增加了bind函数，IE9+支持。可以直接fn.bind(context);</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">fn,context</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> fn.apply(context,<span class="built_in">arguments</span>);</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>函数柯里化和函数绑定一样提供了动态创建函数功能，返回一个函数，下面是一个复杂的bind函数</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">fn, context</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">2</span>);  <span class="comment">//剩余参数</span></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> innerArgs = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);  <span class="comment">//返回函数接收的参数</span></div><div class="line">        <span class="keyword">var</span> finalArgs = args.concat(innerArgs);</div><div class="line">        <span class="keyword">return</span> fn.apply(context, finalArgs);</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="22-第23章-离线应用于客户端存储"><a href="#22-第23章-离线应用于客户端存储" class="headerlink" title="22 第23章 离线应用于客户端存储"></a>22 第23章 离线应用于客户端存储</h2><ol>
<li>开发离线应用第一步是要知道设备是在线还是离线，navigator.onLine属性为true就是表示设备可以上网。同时window上还可以绑定online和offline两个事件。</li>
<li>html标签中的manifest属性指定缓存描述文件的地址。</li>
<li><p>CookieUtil代码</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> CookieUtil = &#123;</div><div class="line">    <span class="attr">get</span>: <span class="function"><span class="keyword">function</span> (<span class="params">name</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> cookieName = <span class="built_in">encodeURIComponent</span>(name) + <span class="string">"="</span>,</div><div class="line">        cookieStart = <span class="built_in">document</span>.cookie.indexOf(cookieName),</div><div class="line">        cookieValue = <span class="literal">null</span>;</div><div class="line">        <span class="keyword">if</span> (cookieStart &gt; <span class="number">-1</span>)&#123;</div><div class="line">            <span class="keyword">var</span> cookieEnd = <span class="built_in">document</span>.cookie.indexOf(<span class="string">";"</span>, cookieStart);</div><div class="line">            <span class="keyword">if</span> (cookieEnd == <span class="number">-1</span>)&#123;</div><div class="line">                cookieEnd = <span class="built_in">document</span>.cookie.length;</div><div class="line">            &#125;</div><div class="line">            cookieValue = <span class="built_in">decodeURIComponent</span>(<span class="built_in">document</span>.cookie.substring(cookieStart+ cookieName.length, cookieEnd));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cookieValue;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">set</span>: <span class="function"><span class="keyword">function</span> (<span class="params">name, value, expires, path, domain, secure</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> cookieText = <span class="built_in">encodeURIComponent</span>(name) + <span class="string">"="</span> +<span class="built_in">encodeURIComponent</span>(value);</div><div class="line">        <span class="keyword">if</span> (expires <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123;</div><div class="line">            cookieText += <span class="string">"; expires="</span> + expires.toGMTString();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (path) &#123;</div><div class="line">            cookieText += <span class="string">"; path="</span> + path;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (domain) &#123;</div><div class="line">            cookieText += <span class="string">"; domain="</span> + domain;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (secure) &#123;</div><div class="line">            cookieText += <span class="string">"; secure"</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">document</span>.cookie = cookieText;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">unset</span>: <span class="function"><span class="keyword">function</span> (<span class="params">name, path, domain, secure</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.set(name, <span class="string">""</span>, <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>), path, domain, secure);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>使用sessionStorage和localStorage会触发storage事件。localStorage一般限制是5MB</p>
</li>
<li>IndexDB是一种类似SQL数据库的结构化数据存储机制。但是它的数据不是保存在表中，而是保存在对象存储空间中，可以存储大量数据</li>
</ol>
<h2 id="23-第24章-最佳实践"><a href="#23-第24章-最佳实践" class="headerlink" title="23 第24章 最佳实践"></a>23 第24章 最佳实践</h2><ol>
<li>编写可维护的js代码<br>1）首先代码约定，函数尽量使用动词开头，因为js中变量松散，所以变量命名时可以在名字前加一个或多个字符表示数据类型。<br>2）js和html尽量分离，css和js也要尽量分离，js控制css尽量使用更改样式类的形式来实现，而不是直接修改特定样式。应用逻辑和事件处理程序相分离。<br>3）不要为实例或者原型添加属性和方法，永远不修改不由你拥有的对象。<br>4）需要多处使用的值都可以抽取为常量，比如URLs，最好使用一个公共地方来存放所有URL，用户界面字符串应该被抽取出来，以方便国际化。</li>
<li>JavaScript性能优化<br>1）避免全局查找，将在一个函数中多次用到的全局变量存储为局部变量<br>2）避免使用with语句，因为会增加作用域的长度，增加查找作用域的时间，解决办法也是用局部变量<br>3）减少属性查找，因为属性查找要遍历会对原型链中拥有改名称的属性进行一次搜索，多次用到的属性，可以存储在局部变量中。<br>4）优化循环，使用减值迭代，简化终止条件，简化循环体<br>5）当循环次数是确定的，消除循环，使用多次函数调用可能更快。<br>6）使用eval()或者setTimeout传一个字符串参数时，都会重新启动一个解释器来解析新的代码，尽量避免使用。<br>7）尽量使用数组和对象的字面量表达方式来消除不必要的语句。<br>8）优化DOM操作，使用documentFragment来优化插入操作。使用innerHTML来创建DOM节点要比原生createElement再appendChild更快。最小化访问HTMLCollection的次数，因为它是一个动态，每一次访问，它都会查询一次。尽量使用事件代理。</li>
</ol>
<h2 id="24-第25章-新兴的API"><a href="#24-第25章-新兴的API" class="headerlink" title="24 第25章 新兴的API"></a>24 第25章 新兴的API</h2><ol>
<li><p>requestAnimationFrame实现平滑的动画循环</p>
 <figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function updateProgress()&#123;</div><div class="line">    var <span class="keyword">div </span>= document.getElementById(<span class="string">"status"</span>)<span class="comment">;</span></div><div class="line">    <span class="keyword">div.style.width </span>= (parseInt(<span class="keyword">div.style.width, </span><span class="number">10</span>) + <span class="number">5</span>) + <span class="string">"%"</span><span class="comment">;</span></div><div class="line">    if (<span class="keyword">div.style.left </span>!= <span class="string">"100%"</span>)&#123;</div><div class="line">        mozRequestAnimationFrame(updateProgress)<span class="comment">;</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">mozRequestAnimationFrame(updateProgress)<span class="comment">;</span></div></pre></td></tr></table></figure>
</li>
<li><p>pageVisibility API可以让开发人员指导页面是否可见，并且有visibilitychange事件，当文档可见性变化时，触发该事件。</p>
</li>
<li>geolocation实现了地理定位</li>
<li>File API在IE10+上实现了访问计算机中的文件，file控件的event.target.files保存着用户选中的文件列表，每个对象有name，size，type，lastModifiedDate字符串。FileReader实现的异步文件读取机制。所以有progress、error、load等事件。error.code是错误码，对应错误信息。可以读取部分内容。</li>
<li>结合拖放API和File API可以实现读取、上传拖放的文件。</li>
<li>window.performance.navigator包含着好几个属性，比如redirectCount页面加载前的重定向次数。type，表示刚刚发生的导航类型。window.timing也是一个对象，这个对象的属性都是时间戳，navigatorStart表示开始导航到当前页面的时间，fetchStart开始通过GET取得页面的时间，connectStart和connetEnd浏览器连接到服务器的时间等等，通过这些时间值，就可以全面了解页面在被加载到浏览器的过程中都经历了哪些阶段，哪些阶段是影响性能的瓶颈。目前IE10+和chrome支持。</li>
<li>Web Workers可以运行异步JavaScript代码，避免阻塞用户界面。new一个worker，然后通过postMessage方法传数据给worker，worker通过onmessage来监听，同时也用postMessage来向页面发送消息，worker内不能操作DOM，一般用来处理比较耗时的操作比如复杂计算等。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript语言精粹笔记]]></title>
      <url>http://localhost:4000/blog/2015/09/03/2015-09-04-javascript%E8%AF%AD%E8%A8%80%E7%B2%BE%E7%B2%B9%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="第一章-精华"><a href="#第一章-精华" class="headerlink" title="第一章 精华"></a>第一章 精华</h1><p>JavaScript中非常糟糕的一点就是依赖全局变量来连接，所有单元的顶级变量都最终挂载global这个全局变量中。</p>
<h1 id="第二章-语法"><a href="#第二章-语法" class="headerlink" title="第二章 语法"></a>第二章 语法</h1><p>空白符通常没有意义，标识符必须以字母开头，同时不能使用保留字，对象字面量中的属性名也不能出现保留字<br><a id="more"></a></p>
<h1 id="第三章-对象"><a href="#第三章-对象" class="headerlink" title="第三章 对象"></a>第三章 对象</h1><ol>
<li>属性名如果是合法的标识符不需要用引号括住，不合法的“first-name”就需要。</li>
<li>从undefined的成员属性中取值会导致TypeError异常，避免出现这样的情况，可以用&amp;&amp;符号来避免。比如a.b&amp;&amp;a.b.name，如果a.b是undefined，那自然会返回undefined</li>
<li>用delete删除对象的属性，可能会让来自原型链中的属性透现出来。</li>
</ol>
<h1 id="第四章-函数"><a href="#第四章-函数" class="headerlink" title="第四章 函数"></a>第四章 函数</h1><ol>
<li>函数对象的原型是Function.prototype。该原型对象本身的原型是Object.prototype</li>
<li>如果函数调用时在前面加了new，但是返回值不是一个对象，则会返回this，即改函数对象。 </li>
</ol>
<h1 id="第五章-继承"><a href="#第五章-继承" class="headerlink" title="第五章 继承"></a>第五章 继承</h1><ol>
<li>new 运算符执行过程大概是： <figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="literal">that</span>=Object.create(<span class="keyword">this</span>.prototype);</div><div class="line"><span class="keyword">var</span> other=<span class="keyword">this</span>.apply(<span class="literal">that</span>,arguments);</div><div class="line"><span class="keyword">return</span> (<span class="keyword">typeof</span> other===<span class="string">'object'</span>&amp;&amp;other)||<span class="literal">that</span>;</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="第六章-数组"><a href="#第六章-数组" class="headerlink" title="第六章 数组"></a>第六章 数组</h1><ol>
<li>数组可以包含任意混合类型的值。</li>
<li>length属性值是这个数组最大整数属性名加上1，并不等于数组里的元素的个数。设置更大的length不会给数组分配更多的空间，但把length设小，将会把所有大于等于新length的属性删除。</li>
<li>[]后置下标运算符把它所含的表达式转换成一个字符串。如果该表达式有toString方法，就使用该方法，字符串将被用作属性名，不会改变length，如果字符串是一个大于等于当前length，小于2^32-1的正整数，那length会被设置为新的下标加1。</li>
</ol>
<h1 id="第七章-正则表达式"><a href="#第七章-正则表达式" class="headerlink" title="第七章 正则表达式"></a>第七章 正则表达式</h1><ol>
<li><p>匹配一个url的正则表达式</p>
 <figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/^<span class="comment">(?:([A-Za-z]+)</span>:)?<span class="comment">(\/&#123;0,3&#125;)</span><span class="comment">([0-9.\-A-Za-z]+)</span><span class="comment">(?::(\d+)</span>)?<span class="comment">(?:\/([^?#]*)</span>)?<span class="comment">(?:\?([^#]*)</span>)?<span class="comment">(?:#(.*)</span>)?$/</div></pre></td></tr></table></figure>
</li>
<li><p>\1是指向分组1所捕获到的文本的一个引用，它可以在正则表达式中引用，用来匹配后续的文本。</p>
</li>
<li>正则表达式分组有四种，捕获型()、非捕获型(?:)、向前正向匹配(?=)、向前负向匹配(?!)。</li>
</ol>
<h1 id="第八章-方法"><a href="#第八章-方法" class="headerlink" title="第八章 方法"></a>第八章 方法</h1><ol>
<li>regexp.exec是最强大的也是最慢的方法，如果是全局查找的话，regexp.lastIndex将被设置为该匹配后的第一个字符的位置，不成功会重置为0，如果是用循环调用exec去查询一个字符串，如果提前退出了这个循环，再次进入的时候必须把regexp.lastIndex重置为0，因为^因子仅匹配lastIndex为0的情况。</li>
<li>regexp.test不要使用g标示</li>
<li>string.match(regexp)如果regexp带有g标识，那么它生成一个包含所有匹配的数组。</li>
<li>string.replace(searchValue,replaceValue)如果第一个参数是一个字符串，那只会在第一次出现的地方被替换。第一个参数是regexp，并且带有g标识，就将会替换所有匹配。如果replaceValue如果是一个函数，那每遇到一次匹配，函数就会被调用一次，函数返回的字符串会被用作替换文本。</li>
<li>string.search方法和indexOf方法类似，接受一个正则表达式对象作为参数，返回第一个匹配首字符位置，没有则返回-1，且忽略g标示。</li>
<li><p>parseInt()总是要带上进制的参数，因为parseInt(“08”)===0,因为这里它识别“08”按照八进制进行转换。正确的是parseInt(“08”,10)。在遇到非数字时会停止解析，所以parseInt(“16”)==parseInt(“16yd”);<br>7.</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> <span class="literal">NaN</span>===<span class="string">"number"</span>  <span class="comment">//true   </span></div><div class="line"><span class="literal">NaN</span>===<span class="literal">NaN</span>  <span class="comment">//false</span></div></pre></td></tr></table></figure>
</li>
<li><p>js中为false的值有0 NaN “” false null undefined，undefined和NaN的值是可以被改变的。</p>
 <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="string">''</span>==<span class="string">'0'</span> <span class="comment">//false</span></div><div class="line"><span class="number">0</span>==<span class="string">''</span>   <span class="comment">//true</span></div><div class="line"><span class="number">0</span>==<span class="string">'0'</span>  <span class="comment">//true</span></div><div class="line"><span class="literal">false</span>==<span class="string">'false'</span> <span class="comment">//false</span></div><div class="line"><span class="literal">false</span>==<span class="string">'0'</span>     <span class="comment">//true</span></div><div class="line"><span class="literal">false</span>==<span class="literal">undefined</span>  <span class="comment">//false</span></div><div class="line"><span class="literal">false</span>=<span class="literal">null</span>        <span class="comment">//false</span></div><div class="line"><span class="literal">null</span>==<span class="literal">undefined</span>   <span class="comment">//true</span></div><div class="line"><span class="string">' \t\r\n '</span>==<span class="number">0</span>     <span class="comment">//true</span></div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jquery </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据可视化的一些资源整理]]></title>
      <url>http://localhost:4000/blog/2015/07/19/2015-06-23-%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%9A%84%E4%B8%80%E4%BA%9B%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<p>1:<a href="http://datavlab.org" target="_blank" rel="external">http://datavlab.org</a>  由淘宝可视化团队发起，意在为可视化的爱好者提供了解可视化，实践可视化，讨论可视化的渠道<br>2 <a href="http://vis.pku.edu.cn/weibova/weiboevents/" target="_blank" rel="external">http://vis.pku.edu.cn/weibova/weiboevents/</a> 北大袁晓如教授带领的团队的一个微博分析的工具，用来分析微博还是可以的。他们还有相关的作品，官方网站：<a href="http://vis.pku.edu.cn" target="_blank" rel="external">http://vis.pku.edu.cn</a><br>3 <a href="http://www.cad.zju.edu.cn/home/vagblog/" target="_blank" rel="external">http://www.cad.zju.edu.cn/home/vagblog/</a> 浙江大学可视化分析小组博客<br>4 <a href="http://selection.datavisualization.ch" target="_blank" rel="external">http://selection.datavisualization.ch</a> 里面就包含了众多的可视化工具D3.js<br> CargoDB之类的<br>5 图表类就比较多了：<br>1.Echarts:<a href="http://echarts.baidu.com/index.html" target="_blank" rel="external">http://echarts.baidu.com/index.html</a><br>2.ECharts-X(三维可视化)<a href="http://echarts.baidu.com/x/doc/index.html" target="_blank" rel="external">http://echarts.baidu.com/x/doc/index.html</a><br>3.HightCharts 专业图表，和地图结合的比较少<br>4 jChartFX <a href="http://www.jchartfx.com/" target="_blank" rel="external">http://www.jchartfx.com/</a></p>
]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据可视化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端面试总结]]></title>
      <url>http://localhost:4000/blog/2015/07/16/2015-07-16-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h1 id="前端面试总结"><a href="#前端面试总结" class="headerlink" title="前端面试总结"></a>前端面试总结</h1><p>个人前端BAT暑期实习面试题总结和从朋友同学那打听来的题，既可以准备笔试面试，也可以对自己的基础知识查漏补缺<br><a id="more"></a></p>
<h2 id="1-position的值各是什么意思？"><a href="#1-position的值各是什么意思？" class="headerlink" title="1. position的值各是什么意思？"></a>1. position的值各是什么意思？</h2><p>(1)static:HTML元素的默认值，即没有定位，元素出现在正常的流中。静态定位的元素不会受到top left bottom right z-index 这些值的影响。<br>(2)fixed:元素的位置相对于浏览器窗口是固定位置。即使窗口是滚动的它也不会移动,元素的位置通 过 “left”, “top”, “right” 以及 “bottom”属性进行规定。fixed定位 使元素的位置与文档流无关,因此不占据空间。fixed定位的元素和其他元素重叠<br>(3)relative:相对定位元素的定位是相对其正常位置,它原本所占的空间不会改变,。<br>(4)absolute:生成绝对定位的元素，相对于static定位以外的第一个父元素进行定位。元素的位置通过”left”，”top”， “right” 以及 “bottom” 属性进行规定。与文档流无关 ，因此不占据空间。</p>
<h2 id="2-跨域的方法有哪些，及其原理"><a href="#2-跨域的方法有哪些，及其原理" class="headerlink" title="2. 跨域的方法有哪些，及其原理"></a>2. 跨域的方法有哪些，及其原理</h2><p>(1)jsonp是用script标签的src属性是不跨域的这一性质，所以其实是封装了这个功能而已，jquery会创建一个script标签，把src的地址指向后端，src会带一个callback参数，一般是一个函数名，后端根据这个请求，获取参数，然后把需要返回的数据包裹在这个函数内，前端获得了这些js代码，就会执行这个callback，自然就把数据传到客户端了。只支持GET请求<a href="http://www.nowamagic.net/librarys/veda/detail/224" target="_blank" rel="external">参考文档</a>。缺陷是只支持GET，并且参数都在url中，url的大小是有限制的。<br>(2)cors(cross-origin resource sharing)就是服务端加上一句 header(“Access-Control-Allow-Origin:<em>“); 支持所有请求，但是兼容性不太好，支持IE9+,chrome3+。 如果需要携带cookie，那么需要加上header(“Access-Control-Allow-Credentials”, true)。同时，origin不能为\</em>，必须为单个host，一般为请求的origin。<br>(3)window.name.一个窗口window的生命周期内，窗口载入的页面共享一个window.name,每个页面都有读写权限,<br>data.html里面就写上window.name=”data..”;然后在a.html里用一个隐藏的iframe载入data.html,然后在a.html里用js把iframe的src设为同源的一个页面。<br>(4)修改document.domain的方法只适用于不同子域的框架间的交互。比如<a href="http://www.example.com/a.html和" target="_blank" rel="external">http://www.example.com/a.html和</a> http:example.com/b.html 在两个页面中都修改document.domain为”example.com”<br>(5)img标签的src也是不跨域的，所以可以<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">img</span>.src=“http:<span class="comment">//example.com/data?value=123。</span></div></pre></td></tr></table></figure></p>
<p>但是这种方法只能用来发送请求.<br>(6)HTML5有一个postMessage(data,origin)方法，可以向当前页面中的iframe或者当前页弹出的窗口发送消息<br>(7)最佳实践，嵌套一个同域的iframe，然后使用postMessage通信，请求交由同域的iframe里发送，结果通过postMessage发送回来。</p>
<h2 id="3-meta标签都有那些属性和值？"><a href="#3-meta标签都有那些属性和值？" class="headerlink" title="3. meta标签都有那些属性和值？"></a>3. meta标签都有那些属性和值？</h2><p>属性主要有name和http-equiv,content 属性始终要和 name 属性或 http-equiv 属性一起使用。name属性主要有author、description、keywords。使用带有 http-equiv<br>属性的 &lt; meta &gt; 标签时，服务器将把名称/值对添加到发送给浏览器的内头部。主要有expires<br>(网页到期时间)、Set-Cookie、content-Type(content=”text/html; charset=gb2312”),<br>refresh(自动刷新 http-equiv=”refresh”content=”5; url=<a href="http://www.111cn.net/" target="_blank" rel="external">http://www.111cn.net/</a>“)<br>js可以实现自动刷新的方法: Javascript刷新页面 的几种方法：<br>    1 history.go(0)<br>    2 location.reload()<br>    3 location=location<br>    4 location.assign(location)<br>    5 document.execCommand(‘Refresh’)<br>    6 window.navigate(location)<br>    7 location.replace(location)<br>    8 document.URL=location.href  </p>
<h2 id="4-css3中动画有哪些属性可以实现？"><a href="#4-css3中动画有哪些属性可以实现？" class="headerlink" title="4. css3中动画有哪些属性可以实现？"></a>4. css3中动画有哪些属性可以实现？</h2><p>1)animation: myfirst 5s;<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span></div><div class="line">&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">background</span>:red;</div><div class="line">    <span class="attribute">animation</span>:myfirst <span class="number">5s</span>;</div><div class="line">    <span class="attribute">animation-name</span>: myfirst;</div><div class="line">    <span class="attribute">animation-duration</span>: <span class="number">5s</span>;</div><div class="line">    <span class="attribute">animation-timing-function</span>: linear;</div><div class="line">    <span class="attribute">animation-delay</span>: <span class="number">2s</span>;</div><div class="line">    <span class="attribute">animation-iteration-count</span>: infinite;</div><div class="line">    <span class="attribute">animation-direction</span>: alternate;</div><div class="line">    <span class="attribute">animation-play-state</span>: running;</div><div class="line">    <span class="attribute">-moz-animation</span>:myfirst <span class="number">5s</span>; <span class="comment">/* Firefox */</span></div><div class="line">    <span class="attribute">-webkit-animation</span>:myfirst <span class="number">5s</span>; <span class="comment">/* Safari and Chrome */</span></div><div class="line">    <span class="attribute">-o-animation</span>:myfirst <span class="number">5s</span>; <span class="comment">/* Opera */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">keyframes</span> myfirst</div><div class="line">&#123;</div><div class="line">    <span class="selector-tag">from</span> &#123;<span class="attribute">background</span>:red;&#125;</div><div class="line">    <span class="selector-tag">to</span> &#123;<span class="attribute">background</span>:yellow;&#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">keyframes</span> myfirst</div><div class="line">&#123;</div><div class="line">    0%   &#123;<span class="attribute">background</span>: red;&#125;</div><div class="line">    25%  &#123;<span class="attribute">background</span>: yellow;&#125;</div><div class="line">    50%  &#123;<span class="attribute">background</span>: blue;&#125;</div><div class="line">    100% &#123;<span class="attribute">background</span>: green;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="http://www.w3cplus.com/css3/CSS3-animation.html" target="_blank" rel="external">CSS动画</a><br>2)css3中的transition transform</p>
<h2 id="5-响应式布局有哪些方法"><a href="#5-响应式布局有哪些方法" class="headerlink" title="5. 响应式布局有哪些方法"></a>5. 响应式布局有哪些方法</h2><ol>
<li>media query</li>
<li>内容居中</li>
</ol>
<h2 id="6-网站性能优化有哪些方法"><a href="#6-网站性能优化有哪些方法" class="headerlink" title="6. 网站性能优化有哪些方法"></a>6. 网站性能优化有哪些方法</h2><h3 id="优化静态资源加载速度"><a href="#优化静态资源加载速度" class="headerlink" title="优化静态资源加载速度"></a>优化静态资源加载速度</h3><ol>
<li>合并静态资源，减少http请求数量，减少整体的请求时间。图片sprites(合并图片，然后用CSS background-position等属性制定图片位置的方法）</li>
<li>减少静态的体积，减少资源的下载时间。压缩代码，比如js css等代码进行压缩，图片压缩。</li>
<li>优化资源本身的请求速度。比如使用cdn,内容分发网络，即把内容都分布在各个节点，客户端就可以找最快的节点进行下载。同时有利于并发请求，因为一次对同一个网站的并发请求数是有限制的。</li>
<li>使用HTTP缓存，直接从缓存中读取，就直接不需要发起请求了。如果需要极致的优化，可以使用localStorage，缓存静态资源。</li>
<li>静态资源使用无cookie的域。<h3 id="渲染优化"><a href="#渲染优化" class="headerlink" title="渲染优化"></a>渲染优化</h3></li>
<li>css 放在head js放在body后，因为如果放在前面的话，页面会等js加载完才渲染</li>
<li>延迟加载，一些不需要在首屏出现的内容比如图片可以延迟加载，加快首屏的渲染时间，提升用户体验。</li>
<li>同构，后端使用nodejs直接支出首屏。<h3 id="代码层面的优化"><a href="#代码层面的优化" class="headerlink" title="代码层面的优化"></a>代码层面的优化</h3></li>
<li>减少DOM数量</li>
<li>使用DocumentFragment减少DOM的插入操作，减少重排</li>
<li>使用修改className的形式修改css样式，而不是用js一个一个属性进行修改，减少重绘</li>
<li>对于会频繁触发重排的动画元素，使其position为absolute或者fixed，可以减少对其他元素的影响。</li>
<li>尽量减少使用全局变量，因为全局变量不会被回收，会一直在内存中。<br><a href="http://coolshell.cn/articles/6470.html" target="_blank" rel="external">参考文档1</a><br><a href="http://www.ha97.com/2710.html" target="_blank" rel="external">参考文档2</a><br><a href="https://segmentfault.com/a/1190000003646305" target="_blank" rel="external">参考文档3</a></li>
</ol>
<h2 id="7-数据库查询优化方法"><a href="#7-数据库查询优化方法" class="headerlink" title="7. 数据库查询优化方法"></a>7. 数据库查询优化方法</h2><ol>
<li>建索引</li>
<li>查询语句的优化，比如避免全盘扫描之类的。</li>
</ol>
<h2 id="8-HTML5-css3中有哪些特性，session和本地存储、cookie的区别"><a href="#8-HTML5-css3中有哪些特性，session和本地存储、cookie的区别" class="headerlink" title="8. HTML5 css3中有哪些特性，session和本地存储、cookie的区别?"></a>8. HTML5 css3中有哪些特性，session和本地存储、cookie的区别?</h2><p>HTML5:语义化标签(header nav footer article) audio video canvas svg localstorage sessionStorage 地理定位 新的表单控件比如date time email等</p>
<p>css3:transform:translate rotate scale skew matrix,transition,animation,text-shadow,border-radius,box-shadow，新增伪类<br>p:first-of-type 选择属于其父元素的首个 p 元素的每个 p 元素。<br>p:last-of-type  选择属于其父元素的最后 p 元素的每个 p 元素。<br>p:only-of-type  选择属于其父元素唯一的 p 元素的每个 p 元素。<br>p:only-child    选择属于其父元素的唯一子元素的每个 p 元素。<br>p:nth-child(2)  选择属于其父元素的第二个子元素的每个 p 元素。<br>:enabled  :disabled 控制表单控件的禁用状态。<br>:checked        单选框或复选框被选中。</p>
<p>session是在服务端,会在一段时间后消失，cookie是在客户端，会在每次请求时被发送到服务端，所以可以在服务端被读取和修改，cookie有实效性、大小有限制，localStorage不可以被后端读取，无实效性，可以达到5M。sessionStorage当前浏览器窗口关闭就自动删除</p>
<h2 id="9-什么是模块化开发，以及为什么要进行模块化开发"><a href="#9-什么是模块化开发，以及为什么要进行模块化开发" class="headerlink" title="9. 什么是模块化开发，以及为什么要进行模块化开发"></a>9. 什么是模块化开发，以及为什么要进行模块化开发</h2><p>解决命名冲突和文件依赖，异步加载模块的话，还可以提高性能。可以实现模块的版本管理。每个模块单独一个文件，极大的提高了可维护性。接入已有的功能模块，开发不存在的功能模块。</p>
<h2 id="10-MVVM"><a href="#10-MVVM" class="headerlink" title="10. MVVM"></a>10. MVVM</h2><p>就是Model View ViewModel，都是MV*,ViewModel负责逻辑控制，View没有业务逻辑，<br>它采用双向绑定（data-binding）：View的变动，自动反映在ViewModel上。Anjularjs 就是MVVM模式。</p>
<h2 id="11-清楚浮动有哪些方法"><a href="#11-清楚浮动有哪些方法" class="headerlink" title="11. 清楚浮动有哪些方法?"></a>11. 清楚浮动有哪些方法?</h2><p><a href="http://www.iyunlu.com/view/css-xhtml/55.html" target="_blank" rel="external">参考文章</a><br><a href="http://www.zhangxinxu.com/wordpress/2010/01/%E5%AF%B9overflow%E4%B8%8Ezoom%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%A4%E8%AF%86/" target="_blank" rel="external">参考文章2</a>;<br>其实都是触发父元素的<a href="http://www.w3.org/TR/CSS21/visuren.html#block-formatting" target="_blank" rel="external">BFC</a>，然后让它重新计算高度，解决高度塌陷的问题。</p>
<ol>
<li><p>在浮动元素末尾添加一个空的标签例如或者用br标签， 因为它有 clear=“all | left | right | none” 属性</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="selector-tag">div</span> style=”<span class="attribute">clear</span>:both”&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>父元素设置 overflow 除了visible 以外的值（hidden，auto，scroll ）</p>
</li>
<li><p>父元素使用:after 伪元素</p>
 <figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.clearfix</span>:after &#123;</div><div class="line">    <span class="attribute">content</span>:<span class="string">"."</span>; <span class="attribute">display</span>:block; <span class="attribute">height</span>:<span class="number">0</span>; <span class="attribute">visibility</span>:hidden; <span class="attribute">clear</span>:both; </div><div class="line">&#125;</div><div class="line"><span class="selector-class">.clearfix</span> &#123; *zoom:<span class="number">1</span>; &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>父元素 float 除了none以外的值 </p>
</li>
<li>父元素display (table-cell，table-caption，inline-block) </li>
<li>父元素position（absolute，fixed）<br>最好的方法是：after伪元素，后三种方法会影响整个的布局，而我们的目的只是清除浮动而已，所以用一个伪元素是最好的方法。</li>
</ol>
<h2 id="12-解释下js的原型链-封装-继承"><a href="#12-解释下js的原型链-封装-继承" class="headerlink" title="12. 解释下js的原型链? 封装 继承"></a>12. 解释下js的原型链? 封装 继承</h2><p>javascript每一个对象A都有一个私有变量prototype指向另一个对象B，B对象就是A的原型，B也和A一样，依次类推，直到这个私有变量为null，这样就形成一个链条。这样就是A继承B。<br>js中可以定义命名空间，但是这个命名空间其实就是一个包含属性、方法、对象的对象。和其他对象没有区别。js实现继承，最好是使用构造函数加原型链的方式，可以获得原型的方法，但是并不知道方法的具体实现，这样就实现了封装和继承。<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript#Encapsulation" target="_blank" rel="external">MDN的说明</a><br><a href="http://blog.csdn.net/james521314/article/details/8645815" target="_blank" rel="external">js实现继承</a></p>
<h2 id="13-ES6新特性"><a href="#13-ES6新特性" class="headerlink" title="13. ES6新特性"></a>13. ES6新特性</h2><p><a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">阮一峰的文章</a><br><a href="https://github.com/ruanyf/es-checker" target="_blank" rel="external">ES6功能检测库</a></p>
<ol>
<li>箭头( =&gt; )。是匿名函数定义的缩写，比如element.addEventListener(‘click’, (e) =&gt; console.log(e)); </li>
<li>Class类。语法糖，其实还是基于原型链</li>
<li>String Array Math Number等内置对象增加了一些函数，比如String.include(),Array.find() Number.isNaN() 等</li>
<li>模块化加载器，可以export import</li>
<li>let关键字实现了块级作用域，const实现了常量。let跟var的区别在于let能限定变量在当前块的作用域下。</li>
<li>函数支持默认参数、剩余参数、参数展开为数组</li>
<li>模板字符串</li>
<li>原生提供promise</li>
<li>添加Map和Set数据结构</li>
<li>yield生成器，执行到yield时就会停止，直到调用next方法，就会执行一步，遇到yield又会停止。</li>
<li>Iterator构造函数，传入想要迭代其值的对象，然后调用next。如果是数组，返回的数组第一个元素是索引，如果是对象，第一个元素是属性名，第二个是属性值。</li>
</ol>
<h2 id="14-js中如何检测未定义的变量"><a href="#14-js中如何检测未定义的变量" class="headerlink" title="14. js中如何检测未定义的变量?"></a>14. js中如何检测未定义的变量?</h2><p>tyepof a===”undefined”   //定义了但没赋值也是true，但是定义了没有赋值和没有定义对于我们来说是一样的，因为你都没法在上面进行操作，只能赋值。</p>
<h2 id="15-解释下js中的闭包"><a href="#15-解释下js中的闭包" class="headerlink" title="15. 解释下js中的闭包?"></a>15. 解释下js中的闭包?</h2><p>闭包就是能够读取其他函数内部变量的函数。可以把闭包简单理解成”定义在一个函数A内部的函数B”。然后把这个函数Breturn，在外部调用这个函数B时，这个函数就可以调用A函数内的变量。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span><span class="params">()</span></span>&#123;</div><div class="line">　　　　<span class="keyword">var</span> n=<span class="number">999</span>;</div><div class="line">　　　　<span class="function"><span class="keyword">function</span> <span class="title">f2</span><span class="params">()</span></span>&#123;</div><div class="line">　　　　　　alert(n); </div><div class="line">　　　　&#125;</div><div class="line">　　　　<span class="keyword">return</span> f2;</div><div class="line">　　&#125;</div><div class="line">　　<span class="keyword">var</span> result=f1();</div><div class="line">　　result(); <span class="comment">// 999</span></div></pre></td></tr></table></figure></p>
<p>闭包还有一个作用就是可以让变量保存在内存中，比如<br>这是不用闭包的代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFunctions</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">        result[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> i;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>结果是result里面的值全是10，并没有达到我们想要的结果。<br>这是使用闭包的代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFunctions</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">        result[i] = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span> num;</div><div class="line">            &#125;;</div><div class="line">        &#125;(i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="16-尽可能的说明下ajax的工作原理？"><a href="#16-尽可能的说明下ajax的工作原理？" class="headerlink" title="16. 尽可能的说明下ajax的工作原理？"></a>16. 尽可能的说明下ajax的工作原理？</h2><p>ajax 的全称是Asynchronous JavaScript and XML。异步请求<br>ajax的原理简单来说就是利用XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，<br>XMLHttpRequest这个对象的属性。它的属性有：</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>onreadystatechange</td>
<td>每次状态改变所触发事件的事件处理程序。</td>
</tr>
<tr>
<td>responseText</td>
<td>从服务器进程返回数据的字符串形式。</td>
</tr>
<tr>
<td>responseXML</td>
<td>从服务器进程返回的DOM兼容的文档数据对象。</td>
</tr>
<tr>
<td>status</td>
<td>从服务器返回的数字代码，比如常见的404（未找到）和200（已就绪）</td>
</tr>
<tr>
<td>status Text</td>
<td>伴随状态码的字符串信息</td>
</tr>
<tr>
<td>readyState</td>
<td>对象状态值(0 (未初始化) 对象已建立，但是尚未初始化（尚未调用open方法）1 (初始化) 对象已建立，尚未调用send方法。 2 (发送数据) send方法已调用，但是当前的状态及http头未知。3 (数据传送中) 已接收部分数据，因为响应及http头不全，这时通过responseBody和responseText获取部分数据会出现错误。4 (完成) 数据接收完毕此时可以通过通过responseXml和responseText获取完整的回应数据)</td>
</tr>
</tbody>
</table>
<p>对于XmlHttpRequest的两个方法，open和send，其中open方法指定了：<br>a、向服务器提交数据的类型，即post还是get。<br>b、请求的url地址和传递的参数。<br>c、传输方式，false为同步，true为异步。默认为true。如果是异步通信方式(true)，客户机就不等待服务器的响应；如果是同步方式(false)，客户机就要等到服务器返回消息后才去执行其他操作。我们需要根据实际需要来指定同步方式，在某些页面中，可能会发出多个请求，甚至是有组织有计划有队形大规模的高强度的request，而后一个是会覆盖前一个的，这个时候当然要指定同步方式。<br>Send方法用来发送请求。<br>在IE和非IE下创建XmlHttpRequest有点区别<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreateXmlHttp</span></span>() &#123;</div><div class="line"></div><div class="line">    <span class="comment">//非IE浏览器创建XmlHttpRequest对象</span></div><div class="line">    <span class="keyword">if</span> (window.XmlHttpRequest) &#123;</div><div class="line">        xmlhttp = <span class="keyword">new</span> <span class="type">XmlHttpRequest</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//IE浏览器创建XmlHttpRequest对象</span></div><div class="line">    <span class="keyword">if</span> (window.ActiveXObject) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            xmlhttp = <span class="keyword">new</span> <span class="type">ActiveXObject</span>(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span> (e) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                xmlhttp = <span class="keyword">new</span> <span class="type">ActiveXObject</span>(<span class="string">"msxml2.XMLHTTP"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">catch</span> (ex) &#123; &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="17-基本的http状态码有哪些，各代表什么意思？"><a href="#17-基本的http状态码有哪些，各代表什么意思？" class="headerlink" title="17. 基本的http状态码有哪些，各代表什么意思？"></a>17. 基本的http状态码有哪些，各代表什么意思？</h2><table>
<thead>
<tr>
<th>状态码</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>200</td>
<td>请求ok</td>
</tr>
<tr>
<td>301</td>
<td>请求的资源被永久的移到新位置Moved Permanently</td>
</tr>
<tr>
<td>302</td>
<td>请求的资源临时被移到新位置</td>
</tr>
<tr>
<td>303</td>
<td>请求可以在另一个URI上找到，并且使用get方式</td>
</tr>
<tr>
<td>304</td>
<td>请求的资源没有变化，请求不会返回内容，将使用缓存 Not Modified</td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
</tr>
<tr>
<td>500</td>
<td>服务器错误 Internal Server Error</td>
</tr>
<tr>
<td>502</td>
<td>网关错误 Bad Gateway</td>
</tr>
<tr>
<td>503</td>
<td>服务器不可用 Service Unavailable</td>
</tr>
<tr>
<td>504</td>
<td>超时 Gateway Timeout</td>
</tr>
</tbody>
</table>
<h2 id="18-‘-’和‘-’有什么区别？"><a href="#18-‘-’和‘-’有什么区别？" class="headerlink" title="18. ‘==’和‘===’有什么区别？"></a>18. ‘==’和‘===’有什么区别？</h2><p>‘==’会做类型转换  ‘0’==0   //true<br>但是  ‘0’===0  //false<br>所以永远不要用==</p>
<h2 id="19-CSS预处理器有哪些？"><a href="#19-CSS预处理器有哪些？" class="headerlink" title="19. CSS预处理器有哪些？"></a>19. CSS预处理器有哪些？</h2><p>sass less</p>
<h2 id="20-js文件的异步加载"><a href="#20-js文件的异步加载" class="headerlink" title="20. js文件的异步加载"></a>20. js文件的异步加载</h2><ol>
<li>带有 defer 属性的script标签可以放置在文档的任何位置。对应的 JavaScript 文件将在页面解析到script标签时开始下载，但不会执行，直到 DOM 加载完成，即onload事件触发前才会被执行。当一个带有 defer 属性的 JavaScript 文件下载时，它不会阻塞浏览器的其他进程，因此这类文件可以与其他资源文件一起并行下载。</li>
<li>HTML 5 为script标签定义了一个新的扩展属性：async。它的作用和 defer 一样，能够异步地加载和执行脚本，不因为加载脚本而阻塞页面的加载。</li>
<li>动态script标签</li>
<li>用xhr，用一个动态 script 元素将 JavaScript 代码注入页面。</li>
</ol>
<h2 id="21-get和post的区别"><a href="#21-get和post的区别" class="headerlink" title="21. get和post的区别"></a>21. get和post的区别</h2><p>最主要的区别就是一个是用来获取数据的，一个是用来更新数据的<br><a href="http://blog.csdn.net/howeverpf/article/details/10363835" target="_blank" rel="external">get和post的真正区别</a><br>url长度是webserver的限制，不是get的限制。至于安全，post把数据放在body中传输，一抓包还不是一样的可以看到，根本不是本质区别。有一点小区别，就是get请求可以被缓存，有浏览历史，可被收藏为书签</p>
<h2 id="22-null和undefined的区别"><a href="#22-null和undefined的区别" class="headerlink" title="22. null和undefined的区别"></a>22. null和undefined的区别</h2><p>null表示”没有对象”，即该处不应该有值。典型用法是：<br>（1） 作为函数的参数，表示该函数的参数不是对象。<br>（2） 作为对象原型链的终点。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.getPrototypeOf(<span class="built_in">Object</span>.prototype)</div><div class="line"><span class="comment">// null</span></div></pre></td></tr></table></figure></p>
<p><em>null转为数字时为0 Number(null)===0 但是parseInt(null)为NaN Number(undefined)为NaN</em><br>undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。典型用法是：<br>（1）变量被声明了，但没有赋值时，就等于undefined。<br>（2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。<br>（3）对象没有赋值的属性，该属性的值为undefined。<br>（4）函数没有返回值时，默认返回undefined。<br><a href="http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html" target="_blank" rel="external">阮一峰的文章</a></p>
<h2 id="23-commonJS规范"><a href="#23-commonJS规范" class="headerlink" title="23. commonJS规范"></a>23. commonJS规范</h2><p><a href="http://javascript.ruanyifeng.com/nodejs/commonjs.html" target="_blank" rel="external">参考文章</a><br>CommonJS是服务器模块的规范，Node.js采用了这个规范。<br>根据CommonJS规范，一个单独的文件就是一个模块。每一个模块都是一个单独的作用域，也就是说，在一个文件定义的变量（还包括函数和类），都是私有的，对其他文件是不可见的。<br>每个文件的对外接口是module.exports对象。这个对象的所有属性和方法，都可以被其他文件导入。<br>require方法用于在其他文件加载这个接口<br>每个模块都有一个module变量，该变量指向当前模块。module不是全局变量，而是每个模块都有的本地变量。<br>CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。AMD规范则是非同步加载模块，允许指定回调函数。由于Node.js主要用于服务器编程，模块文件一般都已经存在于本地硬盘，所以加载起来比较快，不用考虑非同步加载的方式，所以CommonJS规范比较适用。但是，如果是浏览器环境，要从服务器端加载模块，这时就必须采用非同步模式，因此浏览器端一般采用AMD规范。</p>
<h2 id="24-什么是xss攻击和csrf攻击"><a href="#24-什么是xss攻击和csrf攻击" class="headerlink" title="24. 什么是xss攻击和csrf攻击"></a>24. 什么是xss攻击和csrf攻击</h2><p>XSS攻击：跨站脚本攻击(Cross Site Scripting)。<br>它与SQL注入攻击类似，SQL注入攻击中以SQL语句作为用户输入，从而达到查询/修改/删除数据的目的，而在xss攻击中，通过插入恶意脚本，比如对于那种没有实现输入过滤评论，可以在评论内容中注入js代码，等评论展现在其他用户浏览器中的时候，这段js代码就可以获取该用户的cookie等信息，实现对用户游览器的控制。预防方法就是对用户的输入过滤，html标签肯定要过滤或者转义。<br>CSRF（Cross-site request forgery跨站请求伪造）利用网站对用户标识的信任。欺骗用户的浏览器发送HTTP请求给目标站点，这个请求是带有用户的cookie的。另外可以通过IMG标签会触发一个GET请求，可以利用它来实现CSRF攻击。比如登陆A银行网站，产生了cookie，然后在没有登出A网站的情况下访问B网站，B网站要求发送一个请求到A，比如是发送一个转账请求，那这时就发生了转账操作，攻击实现。<a href="http://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html" target="_blank" rel="external">参考文章</a>.预防方法：表达增加hash后的cookie，后端验证。增加验证码。每个表单都带一个随机值，后端验证这个随机值。</p>
<h2 id="25-事件冒泡及事件委托原理"><a href="#25-事件冒泡及事件委托原理" class="headerlink" title="25. 事件冒泡及事件委托原理"></a>25. 事件冒泡及事件委托原理</h2><p>DOM事件流包括事件捕获阶段、处于目标阶段、事件冒泡阶段三个阶段，默认情况下都是在冒泡阶段处理事件。如下所示，第三个参数为true则表示使用捕获阶段处理，默认为false。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"ch"</span>).addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>  (<span class="params">argument</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"ch"</span>);</div><div class="line">&#125;,<span class="literal">true</span>);</div></pre></td></tr></table></figure></p>
<p>事件冒泡，就是在当前元素发生的事件，为往父元素冒泡传递，直到window。<br>事件委托是事件冒泡的一个应用，绑定事件到父元素，在事件处理中判断是哪个元素发生的，再作处理。这样可以减少绑定元素的个数，也不必担心子节点被替换后或者新增加子节点可能需要进行重新的事件绑定。因为事件的捕获和后续代码的执行已经完全委托给了其父节点。如果页面中含有大量元素需要绑定事件，这样做会减少事件绑定数量，为浏览器减负，无疑会提高页面性能。<br><em>以下事件不冒泡：blur、focus、load、unload。</em><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//阻止事件冒泡函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">stopBubble</span>(<span class="params">e</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (e &amp;&amp; e.stopPropagation)</div><div class="line">        e.stopPropagation()</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="built_in">window</span>.event.cancelBubble=<span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="26-快排的javascript实现"><a href="#26-快排的javascript实现" class="headerlink" title="26.快排的javascript实现"></a>26.快排的javascript实现</h2><p>在一个数组内移动，标准值取最右边的元素，从left开始，逐个和right位置的值比较，小的则插入sIndex(这个值在最开始为0)，zIndex++，即把小于标准值的数从0开始逐个插入，把比他小的值都查好了，那下一个zIndex自然就是标准值的位置，这样就把比标准值小的都在标准值左边，比标准值大的都在右边，然后递归，递归中，left&gt;right时，停止。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//快速排序</span></div><div class="line">   <span class="keyword">var</span> testArr=[<span class="number">10</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">13</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">21</span>,<span class="number">24</span>,<span class="number">123</span>,<span class="number">12</span>,<span class="number">3</span>];</div><div class="line">   function <span class="built_in">quickSort</span> (arr,<span class="keyword">left</span>,<span class="keyword">right</span>) &#123;</div><div class="line">       <span class="keyword">if</span> (<span class="keyword">left</span> &gt; <span class="keyword">right</span>) &#123;</div><div class="line">           <span class="keyword">return</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">var</span> length=arr.length;</div><div class="line">       <span class="keyword">var</span> sIndex=<span class="keyword">left</span>;</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="keyword">left</span>;i&lt;<span class="keyword">right</span>;i++)&#123;</div><div class="line">           <span class="keyword">if</span>(arr[i]&lt;arr[<span class="keyword">right</span>])&#123;</div><div class="line">               <span class="built_in">swap</span>(arr,i,sIndex);</div><div class="line">               sIndex++;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="built_in">swap</span>(arr,sIndex,<span class="keyword">right</span>);</div><div class="line">       <span class="built_in">quickSort</span>(arr,<span class="number">0</span>,sIndex-<span class="number">1</span>);</div><div class="line">       <span class="built_in">quickSort</span>(arr,sIndex+<span class="number">1</span>,<span class="keyword">right</span>);</div><div class="line">   &#125;</div><div class="line">   function <span class="built_in">swap</span> (arr,i,j) &#123;</div><div class="line">       <span class="keyword">var</span> temp=arr[i];</div><div class="line">       arr[i]=arr[j];</div><div class="line">       arr[j]=temp;</div><div class="line">   &#125;</div><div class="line">   <span class="built_in">quickSort</span>(testArr,<span class="number">0</span>,testArr.length-<span class="number">1</span>);</div><div class="line">   console.log(testArr);</div></pre></td></tr></table></figure></p>
<h2 id="27-javascript中实现私有变量和私有方法"><a href="#27-javascript中实现私有变量和私有方法" class="headerlink" title="27.javascript中实现私有变量和私有方法"></a>27.javascript中实现私有变量和私有方法</h2><p>1）构造函数中使用var声明的变量和方法。<br>存在问题，一是构造函数中的私有变量在prototype中没法访问。二是内存消耗，每次new一个新对象时，私有函数都会重新创建一个，最好的应该是共享同一个私有函数。<br>2) 使用闭包，return一个原型对象，这个原型对象是可以访问内部私有变量。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//构建一个原型对象</span></div><div class="line">Person.prototype = (<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/******私有方法定义*****/</span></div><div class="line"></div><div class="line">    <span class="comment">//通过var定义</span></div><div class="line">    <span class="keyword">var</span> toStr = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="string">" is "</span> + <span class="keyword">this</span>.age</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//直接定义</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">privateMethod</span><span class="params">()</span></span>&#123;</div><div class="line">        console.log(<span class="string">"in private method"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;<span class="comment">//返回的这个函数会返回一个原型对象</span></div><div class="line">        constructor:Person,<span class="comment">//把原型的constructor属性设置到正确的构造函数</span></div><div class="line"></div><div class="line">        <span class="comment">/*******公有方法*******/</span></div><div class="line">        printInfo:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">            console.log(<span class="string">"printing info:"</span>,toStr.call(<span class="keyword">this</span>));</div><div class="line">        &#125;,</div><div class="line"></div><div class="line">        publicMethod:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">            privateMethod.call(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;)();<span class="comment">//注意这里的括号表示立刻执行此匿名函数，返回原型对象</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//test case</span></div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">'Jaskey'</span>,<span class="number">24</span>);</div><div class="line">p.printInfo();<span class="comment">//printing info: Jaskey is 24</span></div><div class="line">p.publicMethod();<span class="comment">// in private method</span></div><div class="line">p.toStr();<span class="comment">//"undefined is not a function"</span></div></pre></td></tr></table></figure></p>
<p><a href="http://jaskey.github.io/blog/2015/03/04/js-private-methods/" target="_blank" rel="external">参考博文</a>;</p>
<h2 id="28-HTTP和HTTPS的区别，如何优化HTTPS的性能"><a href="#28-HTTP和HTTPS的区别，如何优化HTTPS的性能" class="headerlink" title="28 HTTP和HTTPS的区别，如何优化HTTPS的性能"></a>28 HTTP和HTTPS的区别，如何优化HTTPS的性能</h2><p>HTTPS 就是在安全的传输层SSL之上发送HTTP请求的，传输正式的内容之前会先进行ssl连接，客户端和服务端互相确认，建立信任之后，会对接下来的传输进行加密。<br>HTTPS对速度的影响主要在协议交互所增加的网络和加密解密相关的计算耗时<br>解决办法：1）在发送syn包的时候也捎上应用层的数据；2）复用session，就是建立SSL连接的时候，保存session，利用session信息提前完成握手，简化握手；3）复用HTTP请求管道，多个请求一起发送。4）优化公私钥计算的算法，或者利用GPU来运算实现加速。</p>
<h2 id="29-tcp三次握手，四次挥手"><a href="#29-tcp三次握手，四次挥手" class="headerlink" title="29 tcp三次握手，四次挥手"></a>29 tcp三次握手，四次挥手</h2><p>1.客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态<br>2.服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；<br>3.客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。</p>
<p>在断开连接的时候会进行4次挥手<br>1.客户端A发送一个FIN，用来关闭客户A到服务器B的数据传送。客户端进入FIN-WAIT-1状态<br>2.服务器B收到这个FIN，它发回一个ACK，确认序号为收到的序号加1。和SYN一样，一个FIN将占用一个序号。服务端进入CLOSE-WAIT状态，客户端A进入FIN-WAIT-2状态<br>3.服务器B关闭与客户端A的连接，发送一个FIN给客户端A。 服务端进入LAST-ACK状态<br>4.客户端A收到后发回ACK报文确认关闭，并将确认序号设置为收到序号加1。进入TIME-WAIT状态，等待30秒后进入CLOSE状态，服务端进入CLOSE状态。</p>
<h2 id="30-原生ajax请求"><a href="#30-原生ajax请求" class="headerlink" title="30 原生ajax请求"></a>30 原生ajax请求</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xmlHttp;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createxmlHttpRequest</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.ActiveXObject)&#123;</div><div class="line">        xmlHttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>); <span class="comment">//IE 5 6已经不用兼容了</span></div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest)</div><div class="line">        xmlHttp=<span class="keyword">new</span> XMLHttpRequest();</div><div class="line">    &#125;</div><div class="line">    xmlHttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(xmlHttp.readyState=<span class="number">4</span>&amp;&amp;xmlHttp.status==<span class="number">200</span>)&#123;</div><div class="line">            xmlHttp.responseText  <span class="comment">//纯文本</span></div><div class="line">            xmlHttp.responseXML    <span class="comment">//xml文档</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="31-一个先递增再递减的数组，怎么获取最大值"><a href="#31-一个先递增再递减的数组，怎么获取最大值" class="headerlink" title="31 一个先递增再递减的数组，怎么获取最大值"></a>31 一个先递增再递减的数组，怎么获取最大值</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">function findMax(arr,<span class="keyword">left</span>,<span class="keyword">right</span>)&#123;</div><div class="line">    <span class="keyword">if</span>((<span class="keyword">right</span>-<span class="keyword">left</span>)==<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">return</span> arr[<span class="keyword">left</span>]&gt;arr[<span class="keyword">right</span>]?arr[<span class="keyword">left</span>]:arr[<span class="keyword">right</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> middle=<span class="type">Math</span>.floor((<span class="keyword">left</span>+<span class="keyword">right</span>)/<span class="number">2</span>);</div><div class="line">    <span class="keyword">if</span>(arr[middle]&gt;arr[middle-<span class="number">1</span>]&amp;&amp;arr[middle]&gt;arr[middle+<span class="number">1</span>])&#123;</div><div class="line">        <span class="keyword">return</span> arr[middle];</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">if</span>(arr[middle]&lt;arr[middle+<span class="number">1</span>])&#123;</div><div class="line">             <span class="keyword">return</span> findMax(arr,middle,<span class="keyword">right</span>);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> findMax(arr,<span class="keyword">left</span>,middle);</div><div class="line">       &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> result=findMax(arrTest,<span class="number">0</span>,arrTest.length-<span class="number">1</span>);</div><div class="line">alert(result);</div></pre></td></tr></table></figure>
<h2 id="32-从地址栏输入url到页面展现，详细描述下这个过程"><a href="#32-从地址栏输入url到页面展现，详细描述下这个过程" class="headerlink" title="32 从地址栏输入url到页面展现，详细描述下这个过程"></a>32 从地址栏输入url到页面展现，详细描述下这个过程</h2><ol>
<li>浏览器通过url知道了请求协议和请求的资源。当协议或者请求不合法时，会把输入框中的文字转给搜索引擎</li>
<li>拉取浏览器的cache，看是否需要更新，否则直接后去缓存。主要看Expires时间、cache设置和浏览器设置.</li>
<li>看输入的地址是否在HSTS(HTTP严格传输安全)列表，在的话会使用https访问,不在则会使用http请求。</li>
<li>转换非ASCII的Unicode字符，浏览器检查输入是否含有不是 a-z， A-Z，0-9， - 或者 . 的字符，如果有的话，浏览器会对主机名部分使用 Punycode 编码</li>
<li>DNS查询。浏览器检查域名是否在缓存当中,如果缓存中没有,就去调用 gethostbyname 库函数（操作系统不同函数也不同）进行查询gethostbyname函数在试图进行DNS解析之前首先检查域名是否在本地Hosts里,Hosts的位置不同的操作系统有所不同,如果gethostbyname没有这个域名的缓存记录,也没有在hosts里找到,它将会向DNS服务器发送一条DNS查询请求。</li>
<li>获得ip和端口号后，就会相应ip所在的服务器通过tcp连接发送请求。</li>
<li>浏览器接收HTTP响应，或许关闭TCP连接，或许用于其他请求</li>
<li>浏览器检查这次响应是否重定向(3XX 状态码),如果是重定向,浏览器会重新发送一次请求,或是一次授权请求(401)错误请求(4XX 和 5XX)等等,如果是错误请求会展现错误页。这些和正常响应（2XX）的处理有所不同。</li>
<li>请求成功会返回一个数据包和比如要不要缓存、更新时间、压缩编码方式之类的信息。</li>
<li>取得内容后，如果要缓存则进行缓存，然后开始解码。开始解析html,创建DOM树,接着开始下载javacript css 那些需要html解析完才下载的外部资源.</li>
<li>通过DOM树和css，创建渲染树，计算每个节点的css样式，得到需要展现在浏览器中的框框。</li>
<li>将渲染树得到的布局绘制到屏幕中。<br><a href="http://fex.baidu.com/blog/2014/05/what-happen/" target="_blank" rel="external">参考文章</a>;</li>
</ol>
<h2 id="33请求头和返回头各有些什么信息"><a href="#33请求头和返回头各有些什么信息" class="headerlink" title="33请求头和返回头各有些什么信息"></a>33请求头和返回头各有些什么信息</h2><p>一个请求头<br>GET /mumue/archive/2012/04/23/2467072.html HTTP/1.1<br>Host: www.cnblogs.com<br>Connection: keep-alive<br>Cache-Control: max-age=0<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,<em>/</em>;q=0.8<br>Upgrade-Insecure-Requests: 1<br>User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.85 Safari/537.36<br>Referer: <a href="https://www.google.com.hk/" target="_blank" rel="external">https://www.google.com.hk/</a><br>Accept-Encoding: gzip, deflate, sdch<br>Accept-Language: zh-CN,zh;q=0.8,en;q=0.6<br>Cookie: CNZZDATA1255778100=388437504-1442227353-null%7C1442227353; _ga=GA1.2.1845097067.1442111906; _gat=1<br>If-Modified-Since: Tue, 15 Sep 2015 07:16:13 GMT</p>
<p>一个返回头<br>HTTP/1.1 200 OK<br>Date: Tue, 15 Sep 2015 07:19:07 GMT<br>Content-Type: text/html; charset=utf-8<br>Connection: keep-alive<br>Vary: Accept-Encoding<br>Cache-Control: private, max-age=10<br>Expires: Tue, 15 Sep 2015 07:19:09 GMT<br>Last-Modified: Tue, 15 Sep 2015 07:18:59 GMT<br>X-UA-Compatible: IE=10<br>Content-Length: 34031</p>
<h2 id="34-各种排序算法的时间空间复杂度和稳定性"><a href="#34-各种排序算法的时间空间复杂度和稳定性" class="headerlink" title="34 各种排序算法的时间空间复杂度和稳定性"></a>34 各种排序算法的时间空间复杂度和稳定性</h2><p>参见<a href="http://ldllidonglin.github.io/blog/2015/09/17/2015-09-17-常见排序算法的实现和比较/" target="_blank" rel="external">这篇文章</a>;</p>
<h2 id="35-从100个数字中选10个不重复的数。"><a href="#35-从100个数字中选10个不重复的数。" class="headerlink" title="35 从100个数字中选10个不重复的数。"></a>35 从100个数字中选10个不重复的数。</h2><ol>
<li><p>直接随机选取，选中一个数后，将这个数从原数组删除</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomSelect</span> (<span class="params">arr,count</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> result=[];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;count;i++)&#123;</div><div class="line">        <span class="keyword">var</span> index=<span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*arr.length);</div><div class="line">        <span class="keyword">var</span> d=arr[index];</div><div class="line">        result.push(d);</div><div class="line">        arr.splice(index,<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> arr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>随机打乱原数组顺序，返回前10个</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomSelect</span> <span class="params">(arr,count)</span></span> &#123;</div><div class="line">    arr.<span class="built_in">sort</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> Math.<span class="built_in">random</span>()<span class="number">-0.5</span>;</div><div class="line">        &#125;);</div><div class="line">    <span class="keyword">return</span> arr.slice(<span class="number">0</span>,count);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="36-有一个生成均匀1-5随机数的函数，怎么生成同等概率的1-7"><a href="#36-有一个生成均匀1-5随机数的函数，怎么生成同等概率的1-7" class="headerlink" title="36 有一个生成均匀1-5随机数的函数，怎么生成同等概率的1-7"></a>36 有一个生成均匀1-5随机数的函数，怎么生成同等概率的1-7</h2><p>如果a &gt; b，那么一定可以用Randa去实现Randb，所以现在必须用rand5得到一个比7更大的随机数，然后再来时实现rand7.<br>5*(rand5()-1)+rand5()  可以均匀得到1-25，然后从1-21取模，就可以得到1-7了<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function rand7()&#123;</div><div class="line">    x=<span class="number">25</span>;</div><div class="line">    while(x&gt;<span class="number">21</span>)&#123;</div><div class="line">        x=<span class="number">5</span>*(rand5()<span class="number">-1</span>)+rand5();</div><div class="line">    &#125;</div><div class="line">    return x%<span class="number">7</span>+<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">计算概率x=<span class="number">1</span></div><div class="line">p(x=<span class="number">1</span>)=<span class="number">3</span>/<span class="number">25</span>+(<span class="number">4</span>/<span class="number">25</span>)*<span class="number">3</span>/<span class="number">25</span>+(<span class="number">4</span>/<span class="number">25</span>)^<span class="number">2</span>*<span class="number">3</span>/<span class="number">25.</span>..</div><div class="line">=(<span class="number">3</span>/<span class="number">25</span>)*(<span class="number">1</span>-(<span class="number">4</span>/<span class="number">25</span>)^n)/(<span class="number">1</span><span class="number">-4</span>/<span class="number">25</span>)  <span class="comment">//等比数列</span></div><div class="line">=(<span class="number">3</span>/<span class="number">25</span>)*(<span class="number">25</span>/<span class="number">21</span>)</div><div class="line">=<span class="number">1</span>/<span class="number">7</span></div></pre></td></tr></table></figure></p>
<p>通用的方法是randb=a*(randa()-1)+randa</p>
<h2 id="37-查找两个节点最近的子节点"><a href="#37-查找两个节点最近的子节点" class="headerlink" title="37 查找两个节点最近的子节点"></a>37 查找两个节点最近的子节点</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">commonParentNode</span><span class="params">(oNode1, oNode2)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(oNode1.contains(oNode2))&#123;</div><div class="line">        <span class="keyword">return</span> oNode1;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> commonParentNode(oNode1.parentNode,oNode2);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="37-从一个未知结构的HTML文档里面筛选出最多的三个标签"><a href="#37-从一个未知结构的HTML文档里面筛选出最多的三个标签" class="headerlink" title="37 从一个未知结构的HTML文档里面筛选出最多的三个标签"></a>37 从一个未知结构的HTML文档里面筛选出最多的三个标签</h2><p>非常笨的方法，从document开始遍历，记录在obj中，同时比较得到最多的三个标签。<br><figure class="highlight inform7"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">var tagObj=&#123;&#125;;</div><div class="line">    var top3Dom=<span class="comment">[]</span>;</div><div class="line">    function getNode (dom) &#123;</div><div class="line">        var childs=dom.children;</div><div class="line">        if(childs)&#123;</div><div class="line">            for(var i=0;i&lt;childs.length;i++)&#123;</div><div class="line">                if(!tagObj<span class="comment">[childs<span class="comment">[i]</span>.tagName]</span>)&#123;</div><div class="line">                    tagObj<span class="comment">[childs<span class="comment">[i]</span>.tagName]</span>=1;</div><div class="line">                    if(top3Dom.length&lt;3)&#123;</div><div class="line">                        var having=false;</div><div class="line">                        for(var j=0;j&lt;top3Dom.length;j++)&#123;</div><div class="line">                            if(childs<span class="comment">[i]</span>.tagName==top3Dom<span class="comment">[j]</span>)&#123;</div><div class="line">                                having=true;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                        if(!having)&#123;</div><div class="line">                            top3Dom.push(childs<span class="comment">[i]</span>.tagName);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                &#125;else&#123;</div><div class="line">                    tagObj<span class="comment">[childs<span class="comment">[i]</span>.tagName]</span>+=1;</div><div class="line">                    if(childs<span class="comment">[i]</span>.tagName==top3Dom<span class="comment">[0]</span>)&#123;</div><div class="line">                    &#125;else if(childs<span class="comment">[i]</span>.tagName==top3Dom<span class="comment">[1]</span>)&#123;</div><div class="line">                        </div><div class="line">                    &#125;else if(childs<span class="comment">[i]</span>.tagName==top3Dom<span class="comment">[2]</span>)&#123;</div><div class="line"></div><div class="line">                    &#125;else if(tagObj<span class="comment">[childs<span class="comment">[i]</span>.tagName]</span>&gt;tagObj<span class="comment">[top3Dom<span class="comment">[0]</span>]</span>)&#123;</div><div class="line">                        top3Dom<span class="comment">[0]</span>=childs<span class="comment">[i]</span>.tagName;</div><div class="line">                    &#125;else if(tagObj<span class="comment">[childs<span class="comment">[i]</span>.tagName]</span>&gt;tagObj<span class="comment">[top3Dom<span class="comment">[1]</span>]</span>)&#123;</div><div class="line">                        top3Dom<span class="comment">[1]</span>=childs<span class="comment">[i]</span>.tagName;</div><div class="line">                    &#125;else if(tagObj<span class="comment">[childs<span class="comment">[i]</span>.tagName]</span>&gt;tagObj<span class="comment">[top3Dom<span class="comment">[2]</span>]</span>)&#123;</div><div class="line">                        top3Dom<span class="comment">[2]</span>=childs<span class="comment">[i]</span>.tagName;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                getNode(childs<span class="comment">[i]</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    getNode(document);</div><div class="line">    console.log(tagObj);</div><div class="line">    console.log(top3Dom);</div></pre></td></tr></table></figure></p>
<h2 id="38-两栏布局或者三栏布局左边固定，右边自适应"><a href="#38-两栏布局或者三栏布局左边固定，右边自适应" class="headerlink" title="38 两栏布局或者三栏布局左边固定，右边自适应"></a>38 两栏布局或者三栏布局左边固定，右边自适应</h2><ol>
<li><p>两栏布局，一侧定宽，一侧自适应<br> 1)float+margin:原理是左侧固定的div设置float后，下面的right就上去了，然后设置margin-left,因为宽度会默认为剩下的宽度，所以可以自适应</p>
 <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#<span class="attribute">left</span>&#123;</div><div class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">width</span>:<span class="number">300px</span>;</div><div class="line">    <span class="attribute">float</span>:left;</div><div class="line">    <span class="attribute">background-color</span>:yellow;</div><div class="line">&#125;</div><div class="line">#<span class="attribute">right</span>&#123;</div><div class="line">    <span class="attribute">margin-left</span>:<span class="number">300px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">background-color</span>:blue;</div><div class="line">&#125;</div><div class="line">&lt;<span class="selector-tag">div</span> id=<span class="string">"left"</span>&gt;&lt;/div&gt;</div><div class="line">&lt;<span class="selector-tag">div</span> id=<span class="string">"right"</span>&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>
<p> 2)absolute+margin:原理是一样的，position:absolute，是left脱离文档流，那right就顶上去了，然后给right设置margin-left;因为宽度会默认为剩下的宽度，所以可以自适应</p>
 <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#<span class="attribute">left</span>&#123;</div><div class="line">    <span class="attribute">position</span>:absolute;</div><div class="line">    <span class="attribute">left</span>:<span class="number">0px</span>;</div><div class="line">    <span class="attribute">top</span>:<span class="number">0px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">width</span>:<span class="number">300px</span>;</div><div class="line">    <span class="attribute">background-color</span>:yellow;</div><div class="line">&#125;</div><div class="line">#<span class="attribute">right</span>&#123;</div><div class="line">    <span class="attribute">margin-left</span>:<span class="number">300px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">background-color</span>:blue;</div><div class="line">&#125;</div><div class="line">&lt;<span class="selector-tag">div</span> id=<span class="string">"left"</span>&gt;<span class="attribute">left</span>&lt;/div&gt;</div><div class="line">&lt;<span class="selector-tag">div</span> id=<span class="string">"right"</span>&gt;<span class="attribute">right</span>&lt;/div&gt;</div></pre></td></tr></table></figure>
<p> 3)float+负margin;这要增加一个float,width是100%的dom，然后里面放置right，dom下面放置left。正常流的话，right会和这个dom重叠，这时给right设置margin-left，然后给left设置float，同时margin-left:-100%，那left就会回退到dom的左边，因为正常情况下是在dom的下方的，因为dom的width是100%，但是margin-left=-100%，所以left就会到right空出的那个区域。</p>
 <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">#box&#123;</div><div class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">        <span class="attribute">float</span>: left;</div><div class="line">&#125;</div><div class="line">#<span class="attribute">right</span>&#123;</div><div class="line">        <span class="attribute">background-color</span>: blue;</div><div class="line">        <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">        <span class="attribute">margin-left</span>: <span class="number">300px</span>;</div><div class="line">&#125;</div><div class="line">#<span class="attribute">left</span>&#123;</div><div class="line">        <span class="attribute">background-color</span>: yellow;</div><div class="line">        <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">        <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">        <span class="attribute">float</span>: left;</div><div class="line">        <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line">&lt;<span class="selector-tag">div</span> id=<span class="string">"box"</span>&gt;</div><div class="line">    &lt;<span class="selector-tag">div</span> id=<span class="string">"right"</span>&gt;<span class="attribute">right</span>&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div&gt;<span class="attribute">left</span>&lt;/div&gt;</div><div class="line"><span class="number">4</span>）<span class="attribute">flex</span></div></pre></td></tr></table></figure>
<p> .container {</p>
<pre><code>display: flex;
</code></pre><p> }<br> .left {</p>
<pre><code>width: 300px;
</code></pre><p> }<br> .right {</p>
<pre><code>flex: 1;
</code></pre><p> }<br> <div class="container"></div></p>
<pre><code>&lt;div class=&quot;left&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;right&quot;&gt;&lt;/div&gt;
</code></pre><p> </p>
 <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"> </div></pre></td></tr></table></figure>
</li>
<li><p>三栏布局，两侧固定，中间自适应<br> 1)自身浮动,浮动脱离文档流，然后中间区域用margin实现和左右的距离</p>
 <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">.<span class="attribute">left</span>&#123;</div><div class="line">    <span class="attribute">float</span>:left;</div><div class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">&#125;</div><div class="line">.main&#123;</div><div class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</div><div class="line">    <span class="attribute">margin</span>:<span class="number">0</span> <span class="number">100px</span>;</div><div class="line">&#125;</div><div class="line">.<span class="attribute">right</span>&#123;</div><div class="line">    <span class="attribute">float</span>:right;</div><div class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">&#125;</div><div class="line">&lt;<span class="selector-tag">div</span> id=<span class="string">"left"</span>&gt;&lt;/div&gt;</div><div class="line">&lt;<span class="selector-tag">div</span> id=<span class="string">"right"</span>&gt;&lt;/div&gt;</div><div class="line">&lt;<span class="selector-tag">div</span> id=<span class="string">"main"</span>&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>
<p> 2)margin负值法。首先，中间的主体要使用双层标签。外层div宽度100%显示，并且浮动（本例左浮动，下面所述依次为基础），内层div为真正的主体内容，含有左右210像素的margin值。左栏与右栏都是采用margin负值定位的，左栏左浮动，margin-left为-100%，由于前面的div宽度100%与浏览器，所以这里的-100%margin值正好使左栏div定位到了页面的左侧；右侧栏也是左浮动，其margin-left也是负值，大小为其本身的宽度即200像素。</p>
 <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"main"</span>&gt;</div><div class="line">    &lt;<span class="selector-tag">div</span> class=<span class="string">"body"</span>&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"left"</span>&gt;&lt;/div&gt;</div><div class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"right"</span>&gt;&lt;/div&gt;</div><div class="line">.main&#123;</div><div class="line">    <span class="attribute">float</span>:left;</div><div class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line">.body&#123;</div><div class="line">    <span class="attribute">margin</span>:<span class="number">0</span> <span class="number">210px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line">.<span class="attribute">left</span>&#123;</div><div class="line">    <span class="attribute">float</span>:left;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">margin-left</span>:-<span class="number">100%</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line">.<span class="attribute">right</span>&#123;</div><div class="line">    <span class="attribute">float</span>:left;</div><div class="line">    <span class="attribute">margin-left</span>:-<span class="number">200px</span>;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 3)绝对定位</p>
 <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"left"</span>&gt;&lt;/div&gt;</div><div class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"right"</span>&gt;&lt;/div&gt;</div><div class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"main"</span>&gt;&lt;/div&gt;</div><div class="line">.main&#123;</div><div class="line">    <span class="attribute">margin</span>:<span class="number">0</span> <span class="number">210px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line">.<span class="attribute">left</span>&#123;</div><div class="line">    <span class="attribute">position</span>:absolute;</div><div class="line">    <span class="attribute">left</span>:<span class="number">0px</span>;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line">.<span class="attribute">right</span>&#123;</div><div class="line">    <span class="attribute">position</span>:absolute;</div><div class="line">    <span class="attribute">right</span>:<span class="number">0px</span>;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="39-图片轮播，点击切换"><a href="#39-图片轮播，点击切换" class="headerlink" title="39 图片轮播，点击切换"></a>39 图片轮播，点击切换</h2><h2 id="40-赋值坑、代码题"><a href="#40-赋值坑、代码题" class="headerlink" title="40 赋值坑、代码题"></a>40 赋值坑、代码题</h2><ol>
<li>坑一 <figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var a = &#123;n:<span class="number">1</span>&#125;<span class="comment">;  </span></div><div class="line">var <span class="keyword">b </span>= a<span class="comment">; // 持有a，以回查  </span></div><div class="line">a.x = a = &#123;n:<span class="number">2</span>&#125;<span class="comment">;  </span></div><div class="line">alert(a.x)<span class="comment">;// --&gt; undefined  </span></div><div class="line">alert(<span class="keyword">b.x);// </span>--&gt; &#123;n:<span class="number">2</span>&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>原理：解析器会先找到 a 和 a.x 的指针.如果已有指针，那么不改变它.如果没有指针，即那个变量还没被申明,那么就创建它,指向null.<br>a 是有指针的，指向 {n:1}；a.x 是没有指针的，所以创建它，指向 null。<br>然后把上面找到的指针，都指向最右侧赋的那个值，即 {n:2}。<br>所以给a.x赋值时，是给a原来指向的那个x属性，因为b=a，所以b中有这个x属性.但是a被赋值为{n:2}了，所以a.x为undefined。</p>
<ol>
<li>坑二 <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> a=b=<span class="number">10</span>; </div><div class="line">  &#125;)();</div><div class="line">  alert(<span class="keyword">typeof</span> a) <span class="comment">//undefined</span></div><div class="line">  alert(<span class="keyword">typeof</span> b)  <span class="comment">//number;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>从右向左赋值，给b赋值时，没有var，所以自动升级为全局变量，而a是局部变量。</p>
<ol>
<li>&amp;&amp;和|| <figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">alert(<span class="number">1</span>||<span class="number">2</span>);  <span class="comment">//1</span></div><div class="line">alert(<span class="number">1</span>&amp;&amp;<span class="number">2</span>);   <span class="comment">//2</span></div><div class="line">alert(<span class="number">1</span>&gt;<span class="number">2</span>||<span class="number">2</span>&gt;<span class="number">3</span>); <span class="comment">//false</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="41-常遇到的兼容性问题"><a href="#41-常遇到的兼容性问题" class="headerlink" title="41 常遇到的兼容性问题"></a>41 常遇到的兼容性问题</h2><ol>
<li>绑定事件 IE用atachEvent(“on”+type,fn); chrome 使用addEventListener(type,fn,false);事件移除 removeEventListen,detachEvent,取消冒泡e.stopPropagation() event.cancelBubble=true;获取当前元素 e.currentTarget e.srcElement。阻止默认事件 e.preventDefault() e.returnValue=false;</li>
<li><p>xhr对象，在IE7+及其他浏览器使用new XMLHttpRequest(),否则使用</p>
 <figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.ActiveXObject)&#123;  <span class="regexp">//</span>IE11 <span class="keyword">if</span> (<span class="string">"ActiveXObject"</span> <span class="keyword">in</span> <span class="built_in">window</span>)</div><div class="line">    xhr= <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>很多标签padding和margin的默认值不一致，在css初始的地方加入*{margin:0;padding:0;}</p>
</li>
<li>Chrome和Safari中紧密相连的行内元素换行时会换行显示，并且不会随着布局大小自动换行显示。解决办法加入空格或者换行符。</li>
<li>ios微信中，一个无限循环的transition动画中，长按复制失效，解决办法，要长按之前把动画暂停，长按复制这个逻辑操作结束后恢复动画。</li>
</ol>
<h2 id="42-Cache-Control的设置"><a href="#42-Cache-Control的设置" class="headerlink" title="42 Cache-Control的设置"></a>42 Cache-Control的设置</h2><p>Cache-Control头控制谁在什么条件下可以缓存以及可以缓存多久。<a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching?hl=zh-cn" target="_blank" rel="external">http缓存</a></p>
<ol>
<li>no-cache 表示必须先于服务器确认返回的响应是否被更改，然后才能使用该响应来满足后续的同一个网址的请求，如果有ETag,no-cache会发起往返通信来验证缓存的响应,如果资源未被更改,可以避免下载。</li>
<li>no-store 禁止缓存，每次都会发送请求，下载新的完整响应</li>
<li>public 表示可以缓存，cdn也可以</li>
<li>private 表示例如cdn等中继缓存不能缓存</li>
<li>max-age 缓存有效时间<br>如果要废弃缓存，比如css更新了，给html标记no-cache,给css文件加上版本号或者hash值,所以请求html时，就会请求最新的css。对于没有隐私，比如css可以允许cdn缓存。<br>ETag的作用就是在缓存过期，但是资源又没有更改时，就没有必要重新下载新的，发送请求时带上If-None-Match,服务器会验证，如果一致，则返回304 Not Modified跳过下载。缓存重新启用。</li>
</ol>
<h2 id="43-用css3实现三角形"><a href="#43-用css3实现三角形" class="headerlink" title="43 用css3实现三角形"></a>43 用css3实现三角形</h2><p>实现原理就是用让其余三个border为透明色，具体看<a href="http://www.zhangxinxu.com/wordpress/2010/05/css-border%E4%B8%89%E8%A7%92%E3%80%81%E5%9C%86%E8%A7%92%E5%9B%BE%E5%BD%A2%E7%94%9F%E6%88%90%E6%8A%80%E6%9C%AF%E7%AE%80%E4%BB%8B/" target="_blank" rel="external">这里</a></p>
<pre><code><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#tn&#123;</div><div class="line">    <span class="built_in">width</span>: <span class="number">0px</span>;</div><div class="line">    <span class="built_in">height</span>: <span class="number">0px</span>;</div><div class="line">    <span class="built_in">border</span>: 100px solid;</div><div class="line">    <span class="built_in">border</span>-<span class="built_in">color</span>:#ff3300 <span class="built_in">transparent</span>  <span class="built_in">transparent</span>  <span class="built_in">transparent</span> ;</div><div class="line">&#125;</div><div class="line">&lt;div id=<span class="string">"tn"</span>&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>
</code></pre><h2 id="44-如何检查一个变量是不是数组"><a href="#44-如何检查一个变量是不是数组" class="headerlink" title="44 如何检查一个变量是不是数组"></a>44 如何检查一个变量是不是数组</h2><p>一般情况下使用 instancof就可以判断，但是如下情况就不行了<br>example1:<br>    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>)</span>&#123;&#125;; </div><div class="line">A.prototype = [ ];</div><div class="line"><span class="keyword">var</span> a=<span class="keyword">new</span> A();</div><div class="line">alert( a <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="literal">true</span></div><div class="line">alert(a.constructor);  <span class="comment">//function Array()&#123;[native code]&#125;</span></div></pre></td></tr></table></figure></p>
<p>example2:<br>    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params"></span>)</span>&#123;&#125;;  </div><div class="line">t.prototype  = <span class="built_in">Array</span>.prototype  </div><div class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> t();  </div><div class="line">alert(x <span class="keyword">instanceof</span> <span class="built_in">Array</span>);<span class="comment">//弹出true</span></div></pre></td></tr></table></figure></p>
<p>example3:<br>    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype = &#123;  </div><div class="line">    <span class="attr">splice</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">11</span>)&#125;  </div><div class="line">&#125;;  </div><div class="line"><span class="keyword">var</span> arr = [];  </div><div class="line">alert(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>);<span class="comment">//弹出true,说明与Array的内置原型对象的引用还是保存着的  </span></div><div class="line">alert(arr.splice) <span class="comment">//弹出function splice()&#123; [native code]&#125;;说明上面的改变Array原型指向的代码失效，浏览器静默失败。</span></div></pre></td></tr></table></figure></p>
<p>因为instanceof操作符的原理是如果类的原型与对象原型链上的某一个原型是同一个对象，那么instanceof运算将返回true。所以最保险的方案是：<br>    <figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(Object.prototype.toString.<span class="built_in">call</span>(a)==<span class="string">"[object Array]"</span>)&#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span><span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="45-常见的浏览器内核有哪些"><a href="#45-常见的浏览器内核有哪些" class="headerlink" title="45 常见的浏览器内核有哪些"></a>45 常见的浏览器内核有哪些</h2><p>Trident内核：IE,MaxThon,TT,The World,360,搜狗浏览器等。[又称MSHTML]<br>Gecko内核：Netscape6及以上版本，FF,MozillaSuite/SeaMonkey等<br>Presto内核：Opera7及以上。      [Opera内核原为：Presto，现为：Blink;]<br>Webkit内核：Safari,Chrome等。   [ Chrome的：Blink（WebKit的分支）]</p>
<h2 id="46-给你一个正整数怎么判断它是不是平方数"><a href="#46-给你一个正整数怎么判断它是不是平方数" class="headerlink" title="46 给你一个正整数怎么判断它是不是平方数"></a>46 给你一个正整数怎么判断它是不是平方数</h2><ol>
<li>开方再平方看是否相等</li>
<li>枚举从n/2开始枚举</li>
</ol>
<h2 id="47-两个单链表，怎么判断它们有没有重复节点，如何找到第一个交叉节点。"><a href="#47-两个单链表，怎么判断它们有没有重复节点，如何找到第一个交叉节点。" class="headerlink" title="47 两个单链表，怎么判断它们有没有重复节点，如何找到第一个交叉节点。"></a>47 两个单链表，怎么判断它们有没有重复节点，如何找到第一个交叉节点。</h2><p>判断有没有重复节点，直接各自遍历到尾节点，看尾节点是否相同即可，因为单链表相交必然是Y型相交。时间复杂度是O(m+n),要找第一个交叉节点,遍历两个表,先到null的即为短表，那这时从长表头用指针b开始遍历，直到前一个长表头遍历到null,这时b已经走了两个表的长度差的步数，即此时c指针从短表开始遍历，指针b c会同时到达尾节点，所以当b==c时，这个节点就是第一个交叉节点.</p>
<h2 id="48-马路上在30分钟内有车通过的概率是90-，10分钟内有车通过的概率是多少？"><a href="#48-马路上在30分钟内有车通过的概率是90-，10分钟内有车通过的概率是多少？" class="headerlink" title="48 马路上在30分钟内有车通过的概率是90%，10分钟内有车通过的概率是多少？"></a>48 马路上在30分钟内有车通过的概率是90%，10分钟内有车通过的概率是多少？</h2><p>设10分钟有车通过的概率是x,那30分钟内没有车通过的概率是10%==(1-x)^3,所以x=54%(约等于)</p>
<h2 id="49-有100瓶可乐，其中一瓶有读，喝完60分钟后会拉肚子，最少用几个人喝酒可以找出有毒的这瓶，如果要在60分钟后立即找出有毒的这瓶，怎么找？"><a href="#49-有100瓶可乐，其中一瓶有读，喝完60分钟后会拉肚子，最少用几个人喝酒可以找出有毒的这瓶，如果要在60分钟后立即找出有毒的这瓶，怎么找？" class="headerlink" title="49 有100瓶可乐，其中一瓶有读，喝完60分钟后会拉肚子，最少用几个人喝酒可以找出有毒的这瓶，如果要在60分钟后立即找出有毒的这瓶，怎么找？"></a>49 有100瓶可乐，其中一瓶有读，喝完60分钟后会拉肚子，最少用几个人喝酒可以找出有毒的这瓶，如果要在60分钟后立即找出有毒的这瓶，怎么找？</h2><p>第一个问题，不限时间的话，最少用7个人，第一次一个人喝50瓶，每瓶都喝一点，如果拉肚子，则有毒的这瓶在这50瓶中，如果没有，则在另外50瓶中，这一次就排除了50瓶，然后让第二个人可能存在有毒的50瓶中的25瓶，同理，范围缩小到25，依次让剩下的人喝13 7 4 2 1，所以一共7个人即可。<br>第二个问题，要在60分钟后立即找出有毒的可乐，找7个人，编码为0-6，100瓶可乐编码为1-100，转成二进制，比如36的二进制编码为0100100，那36瓶就给编号为2 5的人喝，这样100瓶全部喝完，60分钟时看那几个人是拉肚子的，比如编码为1 3 6的人拉肚子，那就是1001010这个组合拉肚子了，那说明是74瓶是有毒的。</p>
<h2 id="50-css垂直居中"><a href="#50-css垂直居中" class="headerlink" title="50 css垂直居中"></a>50 css垂直居中</h2><ol>
<li><p>绝对定位，然后margin:auto;top/bottom都为0,直接看代码</p>
 <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.Center-Container</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.Absolute-Center</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">overflow</span>: auto;</div><div class="line">  <span class="attribute">margin</span>: auto;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>; <span class="attribute">left</span>: <span class="number">0</span>; <span class="attribute">bottom</span>: <span class="number">0</span>; <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>display:table;使用表格的vertical-align属性</p>
 <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">wrapper</span> &#123;</div><div class="line">    <span class="attribute">display</span>:table;</div><div class="line">&#125; </div><div class="line"><span class="selector-id">#cell</span> &#123;</div><div class="line">    <span class="attribute">display</span>:table-cell; </div><div class="line">    <span class="attribute">vertical-align</span>:middle;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>绝对定位，距离top为50%，然后margin-top=-50%*height,缺点就是必须指定高度</p>
 <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">content</span> &#123; </div><div class="line">    <span class="attribute">position</span>:absolute; </div><div class="line">    <span class="attribute">top</span>:<span class="number">50%</span>; </div><div class="line">    <span class="attribute">height</span>:<span class="number">240px</span>; </div><div class="line">    <span class="attribute">margin-top</span>:-<span class="number">120px</span>; <span class="comment">/* negative half of the height */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在content元素外插入一个浮动div，设置高度为50%，然后margin-bottom:-50%*height;content清除浮动</p>
 <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">floater</span> &#123;</div><div class="line">    <span class="attribute">float</span>:left; </div><div class="line">    <span class="attribute">height</span>:<span class="number">50%</span>; </div><div class="line">    <span class="attribute">margin-bottom</span>:-<span class="number">120px</span>;</div><div class="line">&#125; </div><div class="line"><span class="selector-id">#content</span> &#123;</div><div class="line">    <span class="attribute">clear</span>:both; </div><div class="line">    <span class="attribute">height</span>:<span class="number">240px</span>; </div><div class="line">    <span class="attribute">position</span>:relative;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>文本垂直居中的话，设置文本line-height为对象的高度就好了</p>
 <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">content</span> &#123;</div><div class="line">    <span class="attribute">height</span>:<span class="number">100px</span>; </div><div class="line">    <span class="attribute">line-height</span>:<span class="number">100px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><a href="http://douglasheriot.com/tutorials/css_vertical_centre/demo4.html" target="_blank" rel="external">效果</a></p>
<h2 id="51-“attributes”-和-“property”-的区别是什么？"><a href="#51-“attributes”-和-“property”-的区别是什么？" class="headerlink" title="51 “attributes” 和 “property” 的区别是什么？"></a>51 “attributes” 和 “property” 的区别是什么？</h2><p>attribute是一个特性节点，该属性中包含着一个NamedNodeMap对象，该对象中包含一个类数组结构，和一些属性和方法。Element元素的每个特性都由一个Attr类型的节点表示，这些节点存储在NamedNodeMap的类数组结构中。通常要获取一个attribute节点直接使用ele.getAttribute()函数来获取，删除就是使用removeAttribute.<br>1)attributes中的Attr Nodes可以包含任意类型的特性，而只有HTML元素的标准特性才能作为property访问，就是说可以用“.”号来获取。<br>2）getAttribute（）任何情况下都只能返回字符串，而在onclick上绑定事件处理程序时，使用属性方式.onclick会返回JavaScript函数。</p>
<h2 id="52-前端开发中哪些情况会出现内存泄露，怎么避免"><a href="#52-前端开发中哪些情况会出现内存泄露，怎么避免" class="headerlink" title="52 前端开发中哪些情况会出现内存泄露，怎么避免"></a>52 前端开发中哪些情况会出现内存泄露，怎么避免</h2><ol>
<li>DOM对象和JS对象相互引用</li>
<li>给DOM绑定事件后，有把这个DOM给删除了。</li>
</ol>
<h2 id="53-“use-strict”-是什么意思-使用它的好处和坏处分别是什么？"><a href="#53-“use-strict”-是什么意思-使用它的好处和坏处分别是什么？" class="headerlink" title="53 “use strict”;是什么意思 ? 使用它的好处和坏处分别是什么？"></a>53 “use strict”;是什么意思 ? 使用它的好处和坏处分别是什么？</h2><p>启用严格模式，消除一些js语法中不够严谨的地方及不安全的地方，增加运行速度。必须放在第一行。<br>1)去除with关键字；<br>2)局部变量在赋值前必须先声明，不会出现那种局部变量提升为全局变量的情况了；<br>3)函数中的this如果没有指定或者为null或者undefined，不会默认为全局。<br>4)构造函数内有this，如果没用new，而是直接调用的话会抛出异常，因为this会保持为undefined。<br>5)重复的变量名即重复的属性名均会报错<br>6)eval在执行时，不会在当前作用域创建变量和函数，但是可以获取eval的返回值</p>
<h2 id="54-mouseover和mouseenter的区别"><a href="#54-mouseover和mouseenter的区别" class="headerlink" title="54 mouseover和mouseenter的区别"></a>54 mouseover和mouseenter的区别</h2><p>mouseover是会冒泡的，所以在经过绑定的DOM的子元素的时候也会触发，mouseenter不会</p>
<h2 id="56-iframe的优缺点"><a href="#56-iframe的优缺点" class="headerlink" title="56 iframe的优缺点"></a>56 iframe的优缺点</h2><p>优点：解决加载缓慢的第三方内容如图标和广告，可以并行加载脚本.<br>缺点：iframe会阻塞主页面的onload事件，即使内容为空，加载也需要事件，没有语义，不利于seo</p>
<h2 id="57-css的盒子模型"><a href="#57-css的盒子模型" class="headerlink" title="57 css的盒子模型"></a>57 css的盒子模型</h2><p>有两种：（1）IE 盒子模型、标准 W3C 盒子模型；IE的content部分包含了 border 和 pading;<br>（2）盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border).</p>
<h2 id="58-页面导入样式时，使用link和-import有什么区别？"><a href="#58-页面导入样式时，使用link和-import有什么区别？" class="headerlink" title="58 页面导入样式时，使用link和@import有什么区别？"></a>58 页面导入样式时，使用link和@import有什么区别？</h2><ol>
<li>@import 机制是不同于link的，link是在加载页面前把css加载完毕，而@import url（）则是页面全部下载完后再加载，所以会出现一开始没有css样式，闪烁一下出现样式后的页面(网速慢的情况下)。</li>
<li>@import引入的css，无法用js控制DOM来修改，link可以</li>
</ol>
<h2 id="59-CSS选择符有哪些？哪些属性可以继承？"><a href="#59-CSS选择符有哪些？哪些属性可以继承？" class="headerlink" title="59 CSS选择符有哪些？哪些属性可以继承？"></a>59 CSS选择符有哪些？哪些属性可以继承？</h2><ol>
<li>id选择器(# myid)</li>
<li>类选择器(.myclassname)</li>
<li>标签选择器(div, h1, p)</li>
<li>相邻选择器(h1 + p)</li>
<li>子选择器(ul &gt; li)</li>
<li>后代选择器(li a)</li>
<li>通配符选择器( * )</li>
<li>属性选择器(a[rel = “external”])</li>
<li>伪类选择器(a: hover, li:nth-child)<br>可以继承的样式有：font-size，font-family，color，text-indent(缩进)</li>
</ol>
<h2 id="60-bind-apply-call的区别"><a href="#60-bind-apply-call的区别" class="headerlink" title="60 bind apply call的区别"></a>60 bind apply call的区别</h2><h2 id="61-了解的设计模式"><a href="#61-了解的设计模式" class="headerlink" title="61 了解的设计模式"></a>61 了解的设计模式</h2><h2 id="62-css性能"><a href="#62-css性能" class="headerlink" title="62 css性能"></a>62 css性能</h2><h2 id="63-flex都有哪些属性"><a href="#63-flex都有哪些属性" class="headerlink" title="63 flex都有哪些属性"></a>63 flex都有哪些属性</h2><h2 id="64-什么是同源策略，哪些请求会遇到跨域问题，为什么有同源策略"><a href="#64-什么是同源策略，哪些请求会遇到跨域问题，为什么有同源策略" class="headerlink" title="64 什么是同源策略，哪些请求会遇到跨域问题，为什么有同源策略"></a>64 什么是同源策略，哪些请求会遇到跨域问题，为什么有同源策略</h2><h2 id="65-哪些操作会导致页面重绘。"><a href="#65-哪些操作会导致页面重绘。" class="headerlink" title="65 哪些操作会导致页面重绘。"></a>65 哪些操作会导致页面重绘。</h2><ol>
<li>修改DOM</li>
<li>修改样式表</li>
<li>用户事件（鼠标悬停、页面滚动、输入框键入文字等）<br>解决办法：</li>
<li>DOM的多个操作放在一起（浏览器会智能把操作集中在一起，然后一次执行），两个读操作之间不要插入写操作，因为这会导致浏览器立即重绘。</li>
<li>如果某个样式是通过样式重排得到的，把结果缓存，防止再次要用这个值时再重排。</li>
<li>对样式的修改不要一条一条，最好通过修改class的方式一次改变。</li>
<li>使用离线DOM，插入DOM使用DocumenFragment、使用cloneNode方法，操作这个克隆node后再替换原始节点。</li>
<li>需要多次重绘的节点，可以先display:none，操作完再恢复显示。</li>
<li>position为absolute和fixed的元素脱离文档流，重排开销很小。</li>
<li>使用虚拟DOM，比如React。</li>
<li>使用requestAnimationFrame、requestIdleCallback()调节动画渲染频次，因为受屏幕的刷新率的限制，超过屏幕的刷新率是没有意义的，只会消耗性能。</li>
</ol>
<h2 id="66-a标签点击不跳转的方法"><a href="#66-a标签点击不跳转的方法" class="headerlink" title="66 a标签点击不跳转的方法"></a>66 a标签点击不跳转的方法</h2><ol>
<li>直接在标签上onclick=”return false”</li>
<li>绑定onclick事件 e.preventDefault()，IE9之前e.returnValue = false;</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 面试 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[个人博客搭建]]></title>
      <url>http://localhost:4000/blog/2015/07/10/2015-07-10-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h1 id="个人博客搭建"><a href="#个人博客搭建" class="headerlink" title="个人博客搭建"></a>个人博客搭建</h1><h2 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h2><p>使用github page，因为没有在本地使用jekyll生成静态页面，而直接上传md到github的话，渲染会有问题，之前一直没有花时间解决，这几天没事做就折腾了以下。试了几种方式：<br><a id="more"></a></p>
<h3 id="使用sublime的markdown-preview-插件生成html"><a href="#使用sublime的markdown-preview-插件生成html" class="headerlink" title="使用sublime的markdown preview 插件生成html"></a>使用sublime的markdown preview 插件生成html</h3><p>我这个博客是用来随手记的，修改博客的操作应该会有很多次，生成了html后就不好修改了，而且目录、导航、分页、首页等就得自己写了，所以放弃之。</p>
<h3 id="strapdown-js"><a href="#strapdown-js" class="headerlink" title="strapdown.js"></a>strapdown.js</h3><p>用strapdown.js动态生成html，详细见<a href="http://strapdownjs.com/" target="_blank" rel="external">strapdownjs</a>;最后采用的办法也是这个，但是文件不能写成md，因为如果是md，github上的jekyll会自动渲染，那strapdown就失效了，所以只能写成html，在sublime上装markdown preview插件 可以预览。但这样的弊端就是在github上直接看就不好看了，那也没办法，只能这样做了。</p>
<h3 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h3><p><a href="https://github.com/hexojs/hexo" target="_blank" rel="external">hexo github</a><br>从网络中的众多博客中学来的，hexo generate后得到的是静态的html，而且还挺美观的，使用的theme是<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">next</a>.真正的就是专注于写博客,分页、标签、目录什么的都解决了,jekeyll分页得自己解决。把生成的public放到sae或者git上，就行了。折腾了两天最后决定使用这种方法。<a href="https://github.com/iissnan/hexo-theme-next/wiki/%E5%88%9B%E5%BB%BA%E6%A0%87%E7%AD%BE%E4%BA%91%E9%A1%B5%E9%9D%A2" target="_blank" rel="external">常见问题解决官网wiki</a></p>
<ol>
<li>在nodejs下安装hexo<br>sudo npm install hexo-cli -g</li>
<li><a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">安装next主题</a><br>git clone <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">https://github.com/iissnan/hexo-theme-next</a> themes/next</li>
<li>配置 把主站的_config.yml的theme改成next,主题的配置文件中scheme: Mist 语言改为zh-Hans</li>
<li>markdown 格式要注意markdown语法后面要加一个空格</li>
<li>push 到github上</li>
<li>注意：如果不是在根目录，比如我的是<a href="https://ldllidonglin.github.io/blog类似的访问路径的话，得修改根目录下的_config.yml中的root,改为：root" target="_blank" rel="external">https://ldllidonglin.github.io/blog类似的访问路径的话，得修改根目录下的_config.yml中的root,改为：root</a>: /blog/，然后修改相对应的theme目录下的_config.yml其中的menu目录如：archives: /blog/archives<br>Directory不用改，它会生成到public中</li>
<li>生成标签云页面，首先在主题的配置文件中把tags属性配置好，然后在任意目录执行hexo new page “tags”,会在sources目录下新建tags目录，然后新建一个index.md文档，并修改改文件，添加type: tags,在执行hexo g时，就会在public/tags下生成一个index.htm.</li>
<li>分类、关于我页面创建方法类似</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 自学 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jquery源码学习2]]></title>
      <url>http://localhost:4000/blog/2015/06/27/2015-05-23-jQuery%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A02/</url>
      <content type="html"><![CDATA[<ol>
<li>在函数中要使用window时，可以作为参数传进去，有两个好处，一是可以提高性能，因为window是最顶层的变量，函数中使用window时，首先是在局部变量和参数中寻找，依次往上找，在参数中传进去，可以更快找到。二是在代码压缩时，函数内的window就可以压缩了。那比如window.location、window.document等常用变量也可以赋值给局部变量，那样既提高效率，又可以方便压缩。<a id="more"></a></li>
<li>jQ中的 $.extend()方法用的是拷贝继承，比较大众化</li>
<li>$(function(){})其实调用的是$(docuemnt).ready(function(){}) 又相当于$().ready() 又相当于jQuery.ready.promise().done(fn);最终调用的是$.ready()</li>
<li>typeof NaN==number typeof 除了判断未定义变量外，没什么作用，代码中不推荐使用,typeof的结果可能有（“undefined”（未定义或者未初始化）、”boolean”、“string”、“number”、“object”（对象或者null） 、“function”）</li>
<li>js一共5中原始数据类型 Undefined Null Boolean Number String ,还有一种复杂数据类型，Object,所有的值都是上述类型之一。</li>
<li>(null或则undefined)==null 为true 所以要判断一个变量是否为null或者undefined，只要if(aa==null)即可</li>
<li>原生js不能获得隐藏元素的属性值 可以使用display:block;visibility:hidden;position:absolute,就可以获得元素的style里的属性了。上面这样写和display:none是一样的效果，但是可以获取属性。$.swap可以提供这样的实现。</li>
<li>nodeType的值有：<br>元素element   1<br>属性attr   2<br>文本text   3<br>注释comments   8<br>文档document   9 </li>
<li>DOM元素与对象之间互相引用,很可能就会发生内存泄露。所以用$.data比attr和prop可以避免这点。其实利用cache中介</li>
<li>queue 中存储的都是函数</li>
<li>attr 调用的是setAttribute(可以设置获取自定义属性) prop调用的是 . 或则[] prop不常用</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jquery </tag>
            
            <tag> 源码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jquery源码学习1]]></title>
      <url>http://localhost:4000/blog/2015/06/22/2015-05-23-jQuery%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A01/</url>
      <content type="html"><![CDATA[<p><em>tips:</em> 这次看的源码是jQuery2.0.3版本,2.x版本是不支持IE6,7,8<br><a href="http://www.asp.net/ajax/cdn#jQuery_Releases_on_the_CDN_0" target="_blank" rel="external">各个历史版本下载地址</a></p>
<h1 id="jQuery源码"><a href="#jQuery源码" class="headerlink" title="jQuery源码"></a>jQuery源码</h1><h2 id="总体代码框架"><a href="#总体代码框架" class="headerlink" title="总体代码框架"></a>总体代码框架</h2><ol>
<li><p>(21,94)定义了一些变量和函数jQuery=function(){};</p>
</li>
<li><p>(96,283) 给JQ对象，添加一些方法和属性。</p>
</li>
</ol>
<a id="more"></a>
<ol>
<li><p>(285,347) extend:JQ的继承方法。</p>
</li>
<li><p>(349,817) jQuery.extend();扩展一些工具方法。</p>
</li>
<li><p>(877,2856) Sizzle：复杂选择器的实现。</p>
</li>
<li><p>(2880,3042) Callbacks:回调对象，对函数的统一管理。</p>
</li>
<li><p>(3043,3183) Deferred:延迟对象，对异步的统一管理。</p>
</li>
<li><p>(3184,3295) support:功能检测。</p>
</li>
<li><p>(3308，3652) data();数据缓存。</p>
</li>
<li><p>(3653，3797) queue():队列管理。</p>
</li>
<li><p>(3803,4299) attr(),prop(),val(),addClass()类似的方法。对元素属性的操作</p>
</li>
<li><p>(4300,5128) on() trigger(),事件操作的相关方法</p>
</li>
<li><p>(5140,6057) DOM操作，添加、删除、获取、包装、DOM筛选。</p>
</li>
<li><p>(6058,6620) css():样式的操作</p>
</li>
<li><p>(6621,7854) 提交的数据和ajax():ajax() load() getJson()</p>
</li>
<li><p>(7855,8584) animate() 运动 hide() show()</p>
</li>
<li><p>(8585,8792) offset() 位置和尺寸的方法</p>
</li>
<li><p>(8804,8821) JQ支持模块化的模式</p>
</li>
<li><p>(8826) window.jQuery=window.$=jQuery;</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 自学 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jquery </tag>
            
            <tag> 源码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[日常点滴记录]]></title>
      <url>http://localhost:4000/blog/2015/06/22/2015-06-22-%E6%97%A5%E5%B8%B8%E7%82%B9%E6%BB%B4%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h1 id="平常写代码中遇到的小问题，在此记录之。"><a href="#平常写代码中遇到的小问题，在此记录之。" class="headerlink" title="平常写代码中遇到的小问题，在此记录之。"></a>平常写代码中遇到的小问题，在此记录之。</h1><a id="more"></a>
<h2 id="1-数组的浅拷贝问题："><a href="#1-数组的浅拷贝问题：" class="headerlink" title="1 数组的浅拷贝问题："></a>1 数组的浅拷贝问题：</h2><p><em>js中两个对象（如数组、object）之间如果只是简单的赋值，那就会造成浅拷贝的问题，改动其中一个，会造成改变其他的变量，数组的解决办法有两个：</em><br><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>：var array2=array1.slice(<span class="number">0</span>);  //因为数组的操作都是返回一个新数组，而不是对原数组进行操作</div><div class="line"><span class="symbol">2 </span>var array2=array2.concat();</div></pre></td></tr></table></figure></p>
<p><em>对象的深拷贝，目前为止我所看到的解决办法都是用递归实现属性遍历，把属性都赋给新对象。以下代码来自<a href="http://biyutong.iteye.com/blog/1562010" target="_blank" rel="external">参考博文</a></em><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Object.prototype.clone = function()&#123; </div><div class="line">    <span class="keyword">var</span> o = <span class="keyword">this</span>.<span class="keyword">constructor</span> === Array ? [] : &#123;&#125;; </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> e <span class="keyword">in</span> <span class="keyword">this</span>)&#123; </div><div class="line">        o[e] = typeof <span class="keyword">this</span>[e] === <span class="string">"object"</span> ? <span class="keyword">this</span>[e].clone() : <span class="keyword">this</span>[e]; </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">return</span> o; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="2-性能优化tips"><a href="#2-性能优化tips" class="headerlink" title="2 性能优化tips"></a>2 性能优化tips</h2><p>1.使用一次innerHTML赋值代替构建dom元素,对于大的DOM更改，使用innerHTML要比使用 标准的DOM方法 创建同样的DOM结构快得多。<br>2.循环次数确定的时候可以展开循环，不使用循环，如果要使用循环，就使用简直迭代效率会更高一些</p>
<h2 id="3-sublime插件"><a href="#3-sublime插件" class="headerlink" title="3 sublime插件"></a>3 sublime插件</h2><ol>
<li>Markdown preview（渲染markdown成html）</li>
<li>Emmet（写html）</li>
<li>SideBarEnhancements（增强右键）</li>
<li>TortoiseSvn（SVN插件）</li>
<li>ColorPicker(调起颜色盒)</li>
<li><a href="https://github.com/miusuncle/HiveOpener" target="_blank" rel="external">HiveOpener</a>在sb中打开文件、文件夹 等</li>
<li>SublimeLinter 用来检查语法错误的插件，对于写代码来说非常重要，可以避 免很多低级错误 。</li>
<li><a href="http://blog.sina.com.cn/s/blog_753e6cc90101jdcy.html" target="_blank" rel="external">SublimeLinter-jshint</a> 对应的js语法检查(必须有node环境 npm install jshint -g 然后再在sublime下装sublimelinter 再装sublimelinter-jshint)</li>
<li>less 高亮less语法，less2css 编写less，保存时自动编译为css</li>
<li>DocBlockr 注释生成器</li>
<li><a href="http://zhuanlan.zhihu.com/jimliu/20106789" target="_blank" rel="external">宝玉专栏</a></li>
<li><a href="http://code.kpman.cc/2014/10/14/sublime-text-3-mac-%E6%8C%87%E5%8D%97/" target="_blank" rel="external">sublime在mac下的指南</a></li>
</ol>
<h2 id="4-wamp配置"><a href="#4-wamp配置" class="headerlink" title="4 wamp配置"></a>4 wamp配置</h2><ol>
<li>首先修改端口 因为默认的是80端口，一般都被占用了，然后是修改phpmyadmin之类的默认路径</li>
<li>错误日志配置 apache的http.conf 每天生成一个日志<br>ErrorLog “|bin/rotatelogs.exe -l c:/wamp/logs/apache_error-%Y-%m-%d.log 86400”<br>CustomLog “|bin/rotatelogs.exe -l c:/wamp/logs/access-%Y-%m-%d.log 86400” common</li>
<li>wampserver 2.5 添加alias后无法访问的问题:在相应的alias文件添加Require all granted，其中granted是已授权的意思。这条命令是apache2.4新增加的，用以替代allow,deny以及order指令。</li>
</ol>
<h2 id="5-红杏插件"><a href="#5-红杏插件" class="headerlink" title="5 红杏插件"></a>5 <a href="http://honx.in/_VZ9YLSZDj1ZTCZee" target="_blank" rel="external">红杏插件</a></h2><ol>
<li>scp的时候不用输入密码：（没有.ssh目录的时候，先新建这个目录）</li>
<li><a href="http://saadiya.blog.51cto.com/2805761/796579" target="_blank" rel="external">linux-如何建立scp安全的信任关系</a></li>
</ol>
<h2 id="6-svg"><a href="#6-svg" class="headerlink" title="6 svg"></a>6 svg</h2><ol>
<li>g元素不支持定位 需要定位是要使用transform=”translate(x,y)”</li>
<li>rect元素不支持嵌套 可以用g元素来包裹、组织元素</li>
</ol>
<h2 id="7-this陷阱"><a href="#7-this陷阱" class="headerlink" title="7 this陷阱"></a>7 <a href="http://segmentfault.com/a/1190000002640298#articleHeader4" target="_blank" rel="external">this陷阱</a></h2><h3 id="8-屏幕尺寸"><a href="#8-屏幕尺寸" class="headerlink" title="8 屏幕尺寸"></a>8 屏幕尺寸</h3><p>webview下<br>小米3 360<em>572<br>红米note 360</em>567<br>iphone4s 320<em>416<br>iphone5 320</em>504<br>iphone6 375<em>603<br>iphone6p 414</em>672<br>mx4 384<em>519<br>oppo 320</em>459</p>
<h3 id="9-移动端开发meta标签"><a href="#9-移动端开发meta标签" class="headerlink" title="9 移动端开发meta标签"></a>9 移动端开发meta标签</h3><figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>/&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">!</span></span></div><div class="line">&lt;<span class="attr">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"webkit"</span>&gt;</div><div class="line"><span class="comment">&lt;!--IE=edge告诉IE使用最新的引擎渲染网页 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=Edge"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- Allow web app to be run in full-screen mode. --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Make the app title different than the page title. --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-title"</span> <span class="attr">content</span>=<span class="string">"iOS 8 web app"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Configure the status bar. --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span> <span class="attr">content</span>=<span class="string">"black"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Set the viewport. --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"initial-scale=1"</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="10-TCP-IP协议"><a href="#10-TCP-IP协议" class="headerlink" title="10 TCP/IP协议"></a>10 TCP/IP协议</h3><p>在 TCP/IP 中包含一系列用于处理数据通信的协议：<br>TCP (传输控制协议) - 应用程序之间通信<br>UDP (用户数据包协议) - 应用程序之间的简单通信<br>IP (网际协议) - 计算机之间的通信<br>ICMP (因特网消息控制协议) - 针对错误和状态<br>DHCP (动态主机配置协议) - 针对动态寻址<br>TCP/IP由四个层次组成：网络接口层、网络层、传输层、应用层。<br>1）网络接口层：<br>数据链路层是负责接收IP数据包并通过网络发送，或者从网络上接收物理帧，抽出IP数据包，交给IP层。<br>ARP是正向地址解析协议，通过已知的IP，寻找对应主机的MAC地址。<br>RARP是反向地址解析协议，通过MAC地址确定IP地址。比如无盘工作站还有DHCP服务。<br>2）网络层<br>负责相邻计算机之间的通信。<br>网络层包括：IP(Internet Protocol）协议、ICMP(Internet Control Message Protocol)<br>控制报文协议、ARP(Address Resolution Protocol）地址转换协议、RARP(Reverse ARP)反向地址转换协议。Ping命令就是发送ICMP的echo包，通过回送的echo relay进行网络测试。<br>3）传输层<br>提供应用程序间的通信。其功能包括：一、格式化信息流；二、提供可靠传输。为实现后者，传输层协议规定接收端必须发回确认，并且假如分组丢失，必须重新发送，即耳熟能详的“三次握手”过程，从而提供可靠的数据传输。<br>传输层协议主要是：传输控制协议TCP(Transmission Control Protocol）和用户数据报协议UDP(User Datagram protocol）。<br>4）应用层<br>向用户提供一组常用的应用程序，比如电子邮件、文件传输访问、远程登录等。远程登录TELNET使用TELNET协议提供在网络其它主机上注册的接口。TELNET会话提供了基于字符的虚拟终端。文件传输访问FTP使用FTP协议来提供网络内机器间的文件拷贝功能。<br>应用层协议主要包括如下几个：FTP、TELNET、DNS、SMTP、NFS、HTTP。</p>
<h3 id="11-HTTP请求头"><a href="#11-HTTP请求头" class="headerlink" title="11 HTTP请求头"></a>11 HTTP请求头</h3><p>http请求由三部分组成，分别是：请求行、消息报头、请求正文<br><a href="http://tools.jb51.net/table/http_header" target="_blank" rel="external">请求头信息对照表</a>;<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="string">GET</span> <span class="string">/</span> <span class="string">HTTP/1.1</span></div><div class="line"><span class="attr">Accept:</span><span class="string">*/*</span></div><div class="line"><span class="attr">Accept-Encoding:</span><span class="string">gzip,</span> <span class="string">deflate,</span> <span class="string">sdch</span></div><div class="line"><span class="attr">Accept-Language:</span><span class="string">zh-CN,zh;q=0.8,en;q=0.6</span></div><div class="line"><span class="attr">Cache-Control:</span><span class="string">max-age=0</span> <span class="string">//"no-cache"</span> <span class="string">"no-store"</span></div><div class="line"><span class="attr">Connection:</span><span class="string">keep-alive</span></div><div class="line"><span class="attr">Cookie:</span><span class="string">cna=Kzl1Dm22JU0CASp4SmGBdvPA</span></div><div class="line"><span class="attr">Host:</span><span class="string">s24.cnzz.com</span></div><div class="line"><span class="attr">If-Modified-Since:</span><span class="string">Tue,</span> <span class="number">08</span> <span class="string">Sep</span> <span class="number">2015</span> <span class="number">08</span><span class="string">:37:47</span> <span class="string">GMT</span></div><div class="line"><span class="attr">Referer:</span><span class="attr">http://botao900422.blog.51cto.com/4747129/1557599</span></div><div class="line"><span class="attr">User-Agent:</span><span class="string">Mozilla/5.0</span> <span class="string">(Macintosh;</span> <span class="string">Intel</span> <span class="string">Mac</span> <span class="string">OS</span> <span class="string">X</span> <span class="number">10</span><span class="string">_10_3)</span> <span class="string">AppleWebKit/537.36</span> <span class="string">(KHTML,</span> <span class="string">like</span> <span class="string">Gecko)</span> <span class="string">Chrome/45.0.2454.85</span> <span class="string">Safari/537.36</span></div></pre></td></tr></table></figure></p>
<h3 id="12-号运算符"><a href="#12-号运算符" class="headerlink" title="12 +号运算符"></a>12 +号运算符</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">console.<span class="built_in">log</span>(+<span class="string">"2"</span>);  <span class="comment">//结果是2</span></div><div class="line">console.<span class="built_in">log</span>(<span class="number">1</span>+ +<span class="string">"2"</span>+<span class="string">"2"</span>); <span class="comment">//结果是32   +"2" ==&gt;2</span></div><div class="line">console.<span class="built_in">log</span>(<span class="number">1</span>+<span class="string">"2"</span>+<span class="string">"2"</span>);  <span class="comment">//结果是122</span></div><div class="line">console.<span class="built_in">log</span>(<span class="string">"A"</span>- <span class="string">"B"</span>+<span class="string">"2"</span>);  <span class="comment">//NaN</span></div><div class="line">console.<span class="built_in">log</span>(<span class="string">"A"</span>- <span class="string">"B"</span>+<span class="number">2</span>);    <span class="comment">//NaN</span></div></pre></td></tr></table></figure>
<p>###14 childNodes<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built-in">div</span> id=<span class="string">"box"</span>&gt;</div><div class="line">    &lt;<span class="built-in">div</span>&gt;&lt;/<span class="built-in">div</span>&gt;</div><div class="line">    &lt;<span class="built-in">div</span>&gt;&lt;/<span class="built-in">div</span>&gt;</div><div class="line">    &lt;<span class="built-in">div</span>&gt;&lt;/<span class="built-in">div</span>&gt;</div><div class="line">&lt;/<span class="built-in">div</span>&gt;</div><div class="line">var a=document.getElementById(<span class="string">"box"</span>);</div><div class="line">console.<span class="built-in">log</span>(a.childNodes.length)  <span class="comment">//7   IE9+ chrome firefox 因为换行符也会算做文本节点 IE8-为3</span></div></pre></td></tr></table></figure></p>
<p>nodeType=1为元素节点 nodeType=2为属性节点 nodeType=3为文本节点，IE9+ firefox chrome 会把换行符(空白符)也当作文本节点，文本节点的nodeName为”#text”</p>
<h3 id="15常见css缩写语法"><a href="#15常见css缩写语法" class="headerlink" title="15常见css缩写语法"></a>15常见css缩写语法</h3><ol>
<li>盒尺寸，比如margin:top right bottom left。如果某个值缺省，原则是left=right,bottom=top,right=top。</li>
<li>border:width style color</li>
<li>background:color image repeat attachment position</li>
<li>font:style variant weight size height family</li>
</ol>
<h3 id="16-shadowsocks-配置"><a href="#16-shadowsocks-配置" class="headerlink" title="16 shadowsocks 配置"></a>16 shadowsocks 配置</h3><ol>
<li>在代理服务器上安装服务端<ul>
<li>安装pip(如果没有，有的话就不需要安装了) apt-get install python-pip</li>
<li>安装shadowsocks pip install shadowsocks</li>
<li>运行 ssserver -p 8090 -k password -m rc4-md5 -d start</li>
</ul>
</li>
<li>安装客户端 <a href="http://pan.baidu.com/s/1o6KF4vw" target="_blank" rel="external">百度网盘</a></li>
</ol>
<h3 id="17-vscode配置"><a href="#17-vscode配置" class="headerlink" title="17 vscode配置"></a>17 vscode配置</h3><ol>
<li>字体 Monaco 18号</li>
<li>“editor.wrappingColumn”: 110</li>
<li>扩展 <ul>
<li>Debugger for Chrome</li>
<li>Eslint</li>
<li>JavaScript (ES6) code snippets</li>
<li>Document This (自动jsdoc)</li>
<li>Visual Studio Code Settings Sync (同步设置)</li>
</ul>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[自适应可视化]]></title>
      <url>http://localhost:4000/blog/2015/06/15/2015-06-15-%E8%87%AA%E9%80%82%E5%BA%94%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
      <content type="html"><![CDATA[<h2 id="自适应地图主要涉及四个方面的问题："><a href="#自适应地图主要涉及四个方面的问题：" class="headerlink" title="自适应地图主要涉及四个方面的问题："></a>自适应地图主要涉及四个方面的问题：</h2><p>1）地图用户自适应（读图能力、知识水平、教育、喜好）<br>2）地图目的自适应（包括任务、空间扩展、要素相关性）<br>3）制图条件自适应（包括位置、时间、方位、环境）<br>4）地图显示媒介自适应（显示大小与参数、传输率、交互性、软件能力。<br><a id="more"></a></p>
<h2 id="专题地图"><a href="#专题地图" class="headerlink" title="专题地图"></a>专题地图</h2><h3 id="1-地图保存部分"><a href="#1-地图保存部分" class="headerlink" title="1)地图保存部分"></a>1)地图保存部分</h3><p>需要保存的字段</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>type</td>
<td>地图类型</td>
</tr>
<tr>
<td>color</td>
<td>颜色</td>
</tr>
<tr>
<td>attributes</td>
<td>数据带来的属性</td>
</tr>
<tr>
<td>fileds</td>
<td>最终绘制所使用的字段</td>
</tr>
<tr>
<td>maxHeight</td>
<td>柱状图柱体符号最高值</td>
</tr>
<tr>
<td>maxWidth</td>
<td>柱状图柱体符号最宽值</td>
</tr>
<tr>
<td>radius</td>
<td>ring pie rank classify图的半径</td>
</tr>
<tr>
<td>rankField</td>
<td>rank图符号绘制所用的字段</td>
</tr>
<tr>
<td>gradeField</td>
<td>grade图符号绘制所用的字段</td>
</tr>
</tbody>
</table>
<h3 id="2-无底图的图，比如pie、ring、bar，应该设置一个tag标识是否添加底图，默认值为true，添加一个纯色底图，是为了保存输出的时候能看出底图轮廓，在需要和别的底图混搭的时候，可以设置为false。"><a href="#2-无底图的图，比如pie、ring、bar，应该设置一个tag标识是否添加底图，默认值为true，添加一个纯色底图，是为了保存输出的时候能看出底图轮廓，在需要和别的底图混搭的时候，可以设置为false。" class="headerlink" title="2)无底图的图，比如pie、ring、bar，应该设置一个tag标识是否添加底图，默认值为true，添加一个纯色底图，是为了保存输出的时候能看出底图轮廓，在需要和别的底图混搭的时候，可以设置为false。"></a>2)无底图的图，比如pie、ring、bar，应该设置一个tag标识是否添加底图，默认值为true，添加一个纯色底图，是为了保存输出的时候能看出底图轮廓，在需要和别的底图混搭的时候，可以设置为false。</h3><h3 id="3-待改进的地方"><a href="#3-待改进的地方" class="headerlink" title="3)待改进的地方"></a>3)待改进的地方</h3><ol>
<li>应该添加一个地图title，同时也应该在图上体现图名，并且应该可更改字体、颜色、大小<br>tag也可以考虑增加.</li>
<li>数据也可以添加tag，目前的名称是提供的表格名字，后期可以提供用户修改</li>
<li>可以添加一种标注图，用户只需提供地名表格，后端geocode后标注在地图上，展现的时候在地图边添加地图和地图上的标注的对照，提供拖拽功能让用户修改标注位置。这样的话就得依赖在线底图。</li>
<li>实现在线底图也能保存在图片中。</li>
<li>数据的详情页，应该可以编辑、保存</li>
<li>支持excel格式数据</li>
</ol>
<h2 id="空气质量检测数据数据源"><a href="#空气质量检测数据数据源" class="headerlink" title="空气质量检测数据数据源"></a>空气质量检测数据数据源</h2><table>
<thead>
<tr>
<th>数据源</th>
<th>数据状况</th>
<th>尺度</th>
<th>描述说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://pm25.in" target="_blank" rel="external">pm25.in</a></td>
<td>实时api</td>
<td>城市-检测站点</td>
<td>API数据最详细，有检测站点的7个指标的数据。但是有的小时数据会缺失,基本每天都有几个小时的数据会缺失，不知道为什么，正常更新的话在7点45左右可以获取到7点钟发布的数据</td>
</tr>
<tr>
<td><a href="http://106.37.208.233:20035/" target="_blank" rel="external">中国环境监测总站</a></td>
<td>实时</td>
<td>城市-检测站点</td>
<td>这个是用silverlight开发的，所以要看数据电脑得安装silverlight，里面有每小时的全国监测站点的6个指标的数据。</td>
</tr>
<tr>
<td><a href="http://www.tianqihoubao.com/aqi/" target="_blank" rel="external">天气后报</a></td>
<td>实时+历史</td>
<td>实时有检测站点,历史只有城市级别</td>
<td>有实时的检测站点级别的数据，但是我看数据是从pm25.in来的,更新和pm25.in有一样的问题，可以从这获取按天的、城市级别的 <strong>历史数据</strong>，有6个指标，就是没有o3的数据，但是城市数量有点少，2014年只有150+个城市</td>
</tr>
<tr>
<td><a href="http://www.cnpm25.cn/" target="_blank" rel="external">pm25和空气质量指数实时查询</a></td>
<td>实时</td>
<td>站点</td>
<td>可以得到各个站点的实时数据,但是只有aqi、pm2.5、pm10三个指标，而且aqi数据并不是和环保部上的一致，好像是直接算的各个站点的平均值。</td>
</tr>
<tr>
<td><a href="http://datacenter.mep.gov.cn/report/air_daily/airDairyCityHour.jsp" target="_blank" rel="external">环保部官方数据</a></td>
<td>实时</td>
<td>城市-站点</td>
<td>有小时、天的367个城市的AQI指数、首要污染物数据。</td>
</tr>
<tr>
<td><a href="http://aqicn.org/city/beijing/cn" target="_blank" rel="external">世界范围内空气质量实时检测数据</a></td>
<td>实时</td>
<td>城市-检测站点</td>
<td>有检测站点的数据，还有像气压、湿度等气象数据。但是上面的数据是包括了美国大使馆的数据，所以和官方的略有不同。需要用爬虫来收集.</td>
</tr>
<tr>
<td><a href="http://www.pm25s.com/" target="_blank" rel="external">pm2.5数据网</a></td>
<td>实时+部分历史</td>
<td>城市-检测站点</td>
<td>有检测站点级别的每小时的数据，也有历史数据，历史数据是按天和城市级别的，指标有7个，但是只有2014年1-10月的，估计是这个网站没有更新了。</td>
</tr>
<tr>
<td><a href="http://www.aqistudy.cn/historydata/index.php" target="_blank" rel="external">PM2.5历史数据</a></td>
<td>历史</td>
<td>城市</td>
<td>数据很全,可以爬取，并且有天气数据可以获取,是目前比较理想的数据源，唯一不足就是没有监测站点的数据和只有190个城市，因为2014年只有190个城市,所以它这里2015年也只有190个城市的数据</td>
</tr>
<tr>
<td><a href="http://www.aqistudy.cn/" target="_blank" rel="external">中国空气质量在线检测分析平台</a></td>
<td>实时和历史</td>
<td>城市-检测站点</td>
<td>和<a href="http://www.aqistudy.cn/historydata/index.php" target="_blank" rel="external">PM2.5历史数据</a>是同一个团队开发的,但是目前没法爬取</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> 可视化 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 自适应 </tag>
            
            <tag> 可视化 </tag>
            
            <tag> pm2.5 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
