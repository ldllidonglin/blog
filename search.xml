<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[ECMAScript2021]]></title>
      <url>http://ldllidonglin.github.io/blog/2021/06/14/2021-06-14-ECMAScript2021/</url>
      <content type="html"><![CDATA[<p>在 ECMAScript2021 中，只有5个新增特性String.prototype.replaceAll、Promise.any、WeakRefs、Logical Assignment Operators、Numeric separators<br><a id="more"></a></p>
<h2 id="String-prototype-replaceAll"><a href="#String-prototype-replaceAll" class="headerlink" title="String.prototype.replaceAll;"></a><a href="https://github.com/tc39/proposal-string-replaceall" target="_blank" rel="noopener">String.prototype.replaceAll</a>;</h2><p>在需要替换全部字符的时候，不需要使用带全局 flag 的正则了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> queryString = <span class="string">'q=query+string+parameters'</span>;</span><br><span class="line"><span class="keyword">const</span> withSpaces = queryString.replace(<span class="regexp">/\+/g</span>, <span class="string">' '</span>);</span><br></pre></td></tr></table></figure></p>
<p>变成<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> queryString = <span class="string">'q=query+string+parameters'</span>;</span><br><span class="line"><span class="keyword">const</span> withSpaces = queryString.replaceAll(<span class="string">'+'</span>, <span class="string">' '</span>);</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>注意，如果 replaceAll 的第一个参数是一个非全局的正则，那么会抛错。因为 replaceAll 异味着就是替换全局，如果传入一个不带全局flag的正则，那就有这个方法的含义有冲突了，所以抛错。</p>
</blockquote>
<h2 id="Promise-any"><a href="#Promise-any" class="headerlink" title="Promise.any"></a><a href="https://github.com/tc39/proposal-promise-any" target="_blank" rel="noopener">Promise.any</a></h2><p>Promise 终于集齐了这个4个方法Promise.all,Promise.race,Promise.allSettled, Promise.any。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> first = <span class="keyword">await</span> <span class="built_in">Promise</span>.any(promises);</span><br><span class="line">  <span class="comment">// Any of the promises was fulfilled.</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="comment">// All of the promises were rejected.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="WeakRefs"><a href="#WeakRefs" class="headerlink" title="WeakRefs"></a><a href="https://github.com/tc39/proposal-weakrefs" target="_blank" rel="noopener">WeakRefs</a></h2><p>19年4月进入stage 3。增加了 WeakRef 和 FinalizationGroup 两个构造函数。优化垃圾收集，避免内存泄漏<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// WeakRef</span></span><br><span class="line"><span class="keyword">let</span> weakRef = <span class="keyword">new</span> WeakRef(someObject);</span><br><span class="line">targetOrUndefined = weakRef.deref(); <span class="comment">// someObject  or undefined</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// FinalizationGroup</span></span><br><span class="line"><span class="keyword">const</span> registry = <span class="keyword">new</span> FinalizationRegistry(<span class="function"><span class="params">heldValue</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 被垃圾回收时，触发回调</span></span><br><span class="line">&#125;);</span><br><span class="line">registry.register(theObject, <span class="string">"some value"</span>);</span><br></pre></td></tr></table></figure></p>
<h2 id="Logical-Assignment-Operators"><a href="#Logical-Assignment-Operators" class="headerlink" title="Logical Assignment Operators"></a><a href="https://github.com/tc39/proposal-logical-assignment" target="_blank" rel="noopener">Logical Assignment Operators</a></h2><p><a href="https://ldllidonglin.github.io/blog/2019/07/03/2019-07-03-ECMAScript%E8%A7%84%E8%8C%83%E7%9A%84%E6%9C%80%E6%96%B0%E5%8A%A8%E5%90%91/#more">20年4月份进入stage 3</a></p>
<ul>
<li>逻辑运算和赋值运算合并的一个操作符</li>
<li>使用示例<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a ||= b;</span><br><span class="line">a || (a = b);</span><br><span class="line"></span><br><span class="line"><span class="comment">// "And And Equals"</span></span><br><span class="line">a &amp;&amp;= b;</span><br><span class="line">a &amp;&amp; (a = b);</span><br><span class="line"></span><br><span class="line"><span class="comment">// "QQ Equals"</span></span><br><span class="line">a ??= b;</span><br><span class="line">a ?? (a = b);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Numeric-separators"><a href="#Numeric-separators" class="headerlink" title="Numeric separators"></a><a href="https://github.com/tc39/proposal-numeric-separator" target="_blank" rel="noopener">Numeric separators</a></h2><p>2019年提到stage 3时，做过<a href="https://ldllidonglin.github.io/blog/2019/07/03/2019-07-03-ECMAScript%E8%A7%84%E8%8C%83%E7%9A%84%E6%9C%80%E6%96%B0%E5%8A%A8%E5%90%91/#more">介绍</a><br>用下划线(_)做数字分隔符,让数字的可读性更强<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1</span>_000_000_000           <span class="comment">// Ah, so a billion</span></span><br><span class="line"><span class="number">101</span>_475_938<span class="number">.38</span>          <span class="comment">// And this is hundreds of millions</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fee = <span class="number">123</span>_00;       <span class="comment">// $123 (12300 cents, apparently)</span></span><br><span class="line"><span class="keyword">let</span> fee = <span class="number">12</span>_300;       <span class="comment">// $12,300 (woah, that fee!)</span></span><br><span class="line"><span class="keyword">let</span> amount = <span class="number">12345</span>_00;  <span class="comment">// 12,345 (1234500 cents, apparently)</span></span><br><span class="line"><span class="keyword">let</span> amount = <span class="number">123</span>_4500;  <span class="comment">// 123.45 (4-fixed financial)</span></span><br><span class="line"><span class="keyword">let</span> amount = <span class="number">1</span>_234_500; <span class="comment">// 1,234,500</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> ECMAScript规范 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ECMAScript规范 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Proxy及其在Vue3中的使用]]></title>
      <url>http://ldllidonglin.github.io/blog/2020/09/02/2020-09-02-Proxy%E5%8F%8A%E5%85%B6%E5%9C%A8Vue3%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>Proxy的原理以及在Vue3中的使用Proxy代替Object.defineProperty实现reactive<br><a id="more"></a></p>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">    <span class="keyword">get</span>: function(obj, prop) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'get'</span>, prop, obj[prop])</span><br><span class="line">      <span class="keyword">return</span> obj[prop]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>: function (obj, prop, value) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'set'</span>, prop)</span><br><span class="line">      obj[prop] = value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, handler);</span><br><span class="line">p.a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(p.a);      </span><br><span class="line"><span class="comment">// set a</span></span><br><span class="line"><span class="comment">// get a 1</span></span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<h2 id="vue3中的实现"><a href="#vue3中的实现" class="headerlink" title="vue3中的实现"></a>vue3中的实现</h2><p>代码都在<a href="https://github.com/vuejs/vue-next/blob/master/packages/reactivity/src/reactive.ts#L133" target="_blank" rel="noopener">Proxy</a></p>
<h3 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h3><ul>
<li><p>实例demo</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = Vue.reactive(&#123;</span><br><span class="line">  a: <span class="number">1</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>Vue.reactive这个api是从@vue/reactivity这个包导出的</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">reactive</span>(<span class="params">target: object</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// if trying to observe a readonly proxy, return the readonly version.</span></span><br><span class="line">  <span class="keyword">if</span> (target &amp;&amp; (target <span class="keyword">as</span> Target)[ReactiveFlags.IS_READONLY]) &#123;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> createReactiveObject(</span><br><span class="line">    target,</span><br><span class="line">    <span class="literal">false</span>,</span><br><span class="line">    mutableHandlers,</span><br><span class="line">    mutableCollectionHandlers</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>createReactiveObject最终会执行以下代码,new 了一个Proxy的实例</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> observed = <span class="keyword">new</span> <span class="built_in">Proxy</span>(</span><br><span class="line">  target,</span><br><span class="line">  collectionTypes.has(target.constructor) ? collectionHandlers : baseHandlers</span><br><span class="line">)</span><br><span class="line">def(</span><br><span class="line">  target,</span><br><span class="line">  isReadonly ? ReactiveFlags.READONLY : ReactiveFlags.REACTIVE,</span><br><span class="line">  observed</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
<li><p>collectionHandlers是给collectionTypes使用的，主要有Set, Map, WeakMap, WeakSet，其他的数据类型都是用baseHandlers</p>
</li>
</ul>
<h3 id="对基本数据类型的处理"><a href="#对基本数据类型的处理" class="headerlink" title="对基本数据类型的处理"></a>对基本数据类型的处理</h3><ul>
<li><p>collectionHandlers和baseHandlers又有好几种:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  mutableHandlers,</span><br><span class="line">  readonlyHandlers,</span><br><span class="line">  shallowReactiveHandlers,</span><br><span class="line">  shallowReadonlyHandlers</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'./baseHandlers'</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  mutableCollectionHandlers,</span><br><span class="line">  readonlyCollectionHandlers,</span><br><span class="line">  shallowCollectionHandlers</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'./collectionHandlers'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>mutableHandlers会代理5种操作</p>
<ul>
<li>其中<code>get = createGetter()</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mutableHandlers: ProxyHandler&lt;object&gt; = &#123;</span><br><span class="line">  <span class="keyword">get</span>,</span><br><span class="line">  <span class="keyword">set</span>,</span><br><span class="line">  deleteProperty,</span><br><span class="line">  has,</span><br><span class="line">  ownKeys</span><br><span class="line">&#125;</span><br><span class="line">function createGetter(isReadonly = false, shallow = false) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">target: object, key: string | symbol, receiver: object</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key === ReactiveFlags.IS_REACTIVE) &#123;</span><br><span class="line">      <span class="keyword">return</span> !isReadonly</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key === ReactiveFlags.IS_READONLY) &#123;</span><br><span class="line">      <span class="keyword">return</span> isReadonly</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">      key === ReactiveFlags.RAW &amp;&amp;</span><br><span class="line">      receiver ===</span><br><span class="line">        (isReadonly</span><br><span class="line">          ? (target <span class="keyword">as</span> any)[ReactiveFlags.READONLY]</span><br><span class="line">          : (target <span class="keyword">as</span> any)[ReactiveFlags.REACTIVE])</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">return</span> target</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> targetIsArray = isArray(target)</span><br><span class="line">    <span class="keyword">if</span> (targetIsArray &amp;&amp; hasOwn(arrayInstrumentations, key)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(arrayInstrumentations, key, receiver)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> res = <span class="built_in">Reflect</span>.get(target, key, receiver)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      isSymbol(key)</span><br><span class="line">        ? builtInSymbols.has(key)</span><br><span class="line">        : key === <span class="string">`__proto__`</span> || key === <span class="string">`__v_isRef`</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!isReadonly) &#123;</span><br><span class="line">      track(target, TrackOpTypes.GET, key)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (shallow) &#123;</span><br><span class="line">      <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isRef(res)) &#123;</span><br><span class="line">      <span class="comment">// ref unwrapping, only for Objects, not for Arrays.</span></span><br><span class="line">      <span class="keyword">return</span> targetIsArray ? res : res.value</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isObject(res)) &#123;</span><br><span class="line">      <span class="comment">// Convert returned value into a proxy as well. we do the isObject check</span></span><br><span class="line">      <span class="comment">// here to avoid invalid value warning. Also need to lazy access readonly</span></span><br><span class="line">      <span class="comment">// and reactive here to avoid circular dependency.</span></span><br><span class="line">      <span class="keyword">return</span> isReadonly ? readonly(res) : reactive(res)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>先通过Reflect.get获取到原始值</p>
</li>
<li><p>只要不是readonly的话，就会使用track进行记录: 用一个全局的targetMap来存所有target，每个target有一个对应的depsMap，存储每个被proxy的key以及其依赖activeEffect。如果activeEffect是undefined，就不会计入依赖了。那这个activeEffect是在什么时候会被赋值呢？是在执行render的时候，会有setupRenderEffect，会执行effect方法，effect方法中会做相应处理，activeEffect就会变成当前执行render时的一些操作，所以当执行set时，render就会被重新执行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">track</span>(<span class="params">target: object, type: TrackOpTypes, key: unknown</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!shouldTrack || activeEffect === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> depsMap = targetMap.get(target)</span><br><span class="line">  <span class="keyword">if</span> (!depsMap) &#123;</span><br><span class="line">    targetMap.set(target, (depsMap = <span class="keyword">new</span> <span class="built_in">Map</span>()))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> dep = depsMap.get(key)</span><br><span class="line">  <span class="keyword">if</span> (!dep) &#123;</span><br><span class="line">    depsMap.set(key, (dep = <span class="keyword">new</span> <span class="built_in">Set</span>()))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!dep.has(activeEffect)) &#123;</span><br><span class="line">    dep.add(activeEffect)</span><br><span class="line">    activeEffect.deps.push(dep)</span><br><span class="line">    <span class="keyword">if</span> (__DEV__ &amp;&amp; activeEffect.options.onTrack) &#123;</span><br><span class="line">      activeEffect.options.onTrack(&#123;</span><br><span class="line">        effect: activeEffect,</span><br><span class="line">        target,</span><br><span class="line">        type,</span><br><span class="line">        key</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>set=createSetter()</code>，这个方法中会执行trigger方法，</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSetter</span>(<span class="params">shallow = false</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    target: object,</span></span></span><br><span class="line"><span class="function"><span class="params">    key: string | symbol,</span></span></span><br><span class="line"><span class="function"><span class="params">    value: unknown,</span></span></span><br><span class="line"><span class="function"><span class="params">    receiver: object</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> oldValue = (target <span class="keyword">as</span> any)[key]</span><br><span class="line">    <span class="keyword">if</span> (!shallow) &#123;</span><br><span class="line">      value = toRaw(value)</span><br><span class="line">      <span class="keyword">if</span> (!isArray(target) &amp;&amp; isRef(oldValue) &amp;&amp; !isRef(value)) &#123;</span><br><span class="line">        oldValue.value = value</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// in shallow mode, objects are set as-is regardless of reactive or not</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> hadKey = hasOwn(target, key)</span><br><span class="line">    <span class="keyword">const</span> result = <span class="built_in">Reflect</span>.set(target, key, value, receiver)</span><br><span class="line">    <span class="comment">// don't trigger if target is something up in the prototype chain of original</span></span><br><span class="line">    <span class="keyword">if</span> (target === toRaw(receiver)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!hadKey) &#123;</span><br><span class="line">        trigger(target, TriggerOpTypes.ADD, key, value)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hasChanged(value, oldValue)) &#123;</span><br><span class="line">        trigger(target, TriggerOpTypes.SET, key, value, oldValue)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>trigger方法</p>
<ul>
<li>从targetMap中获取depsMap</li>
</ul>
<ul>
<li>如果type === TriggerOpTypes.CLEAR，那么就把depsMap.forEach(add)</li>
<li>如果taget时数组，并且key时<code>length</code>,那就只对length这个属性或者在新增的属性上执行add</li>
<li>add操作就是把所有需要执行的dep遍历一遍，判断是否需要需要加入effects</li>
<li>最后遍历执行effects里面的所有effect</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  target: object,</span></span></span><br><span class="line"><span class="function"><span class="params">  type: TriggerOpTypes,</span></span></span><br><span class="line"><span class="function"><span class="params">  key?: unknown,</span></span></span><br><span class="line"><span class="function"><span class="params">  newValue?: unknown,</span></span></span><br><span class="line"><span class="function"><span class="params">  oldValue?: unknown,</span></span></span><br><span class="line"><span class="function"><span class="params">  oldTarget?: Map&lt;unknown, unknown&gt; | Set&lt;unknown&gt;</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> depsMap = targetMap.get(target)</span><br><span class="line">  <span class="keyword">if</span> (!depsMap) &#123;</span><br><span class="line">    <span class="comment">// never been tracked</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> effects = <span class="keyword">new</span> <span class="built_in">Set</span>&lt;ReactiveEffect&gt;()</span><br><span class="line">  <span class="keyword">const</span> computedRunners = <span class="keyword">new</span> <span class="built_in">Set</span>&lt;ReactiveEffect&gt;()</span><br><span class="line">  <span class="keyword">const</span> add = <span class="function">(<span class="params">effectsToAdd: <span class="built_in">Set</span>&lt;ReactiveEffect&gt; | <span class="literal">undefined</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (effectsToAdd) &#123;</span><br><span class="line">      effectsToAdd.forEach(<span class="function"><span class="params">effect</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (effect !== activeEffect || !shouldTrack) &#123;</span><br><span class="line">          <span class="keyword">if</span> (effect.options.computed) &#123;</span><br><span class="line">            computedRunners.add(effect)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            effects.add(effect)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// the effect mutated its own dependency during its execution.</span></span><br><span class="line">          <span class="comment">// this can be caused by operations like foo.value++</span></span><br><span class="line">          <span class="comment">// do not trigger or we end in an infinite loop</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (type === TriggerOpTypes.CLEAR) &#123;</span><br><span class="line">    <span class="comment">// collection being cleared</span></span><br><span class="line">    <span class="comment">// trigger all effects for target</span></span><br><span class="line">    depsMap.forEach(add)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key === <span class="string">'length'</span> &amp;&amp; isArray(target)) &#123;</span><br><span class="line">    depsMap.forEach(<span class="function">(<span class="params">dep, key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (key === <span class="string">'length'</span> || key &gt;= (newValue <span class="keyword">as</span> number)) &#123;</span><br><span class="line">        add(dep)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// schedule runs for SET | ADD | DELETE</span></span><br><span class="line">    <span class="keyword">if</span> (key !== <span class="keyword">void</span> <span class="number">0</span>) &#123;</span><br><span class="line">      add(depsMap.get(key))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// also run for iteration key on ADD | DELETE | Map.SET</span></span><br><span class="line">    <span class="keyword">const</span> isAddOrDelete =</span><br><span class="line">      type === TriggerOpTypes.ADD ||</span><br><span class="line">      (type === TriggerOpTypes.DELETE &amp;&amp; !isArray(target))</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      isAddOrDelete ||</span><br><span class="line">      (type === TriggerOpTypes.SET &amp;&amp; target <span class="keyword">instanceof</span> <span class="built_in">Map</span>)</span><br><span class="line">    ) &#123;</span><br><span class="line">      add(depsMap.get(isArray(target) ? <span class="string">'length'</span> : ITERATE_KEY))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isAddOrDelete &amp;&amp; target <span class="keyword">instanceof</span> <span class="built_in">Map</span>) &#123;</span><br><span class="line">      add(depsMap.get(MAP_KEY_ITERATE_KEY))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> run = <span class="function">(<span class="params">effect: ReactiveEffect</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (__DEV__ &amp;&amp; effect.options.onTrigger) &#123;</span><br><span class="line">      effect.options.onTrigger(&#123;</span><br><span class="line">        effect,</span><br><span class="line">        target,</span><br><span class="line">        key,</span><br><span class="line">        type,</span><br><span class="line">        newValue,</span><br><span class="line">        oldValue,</span><br><span class="line">        oldTarget</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (effect.options.scheduler) &#123;</span><br><span class="line">      effect.options.scheduler(effect)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      effect()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Important: computed effects must be run first so that computed getters</span></span><br><span class="line">  <span class="comment">// can be invalidated before any normal effects that depend on them are run.</span></span><br><span class="line">  computedRunners.forEach(run)</span><br><span class="line">  effects.forEach(run)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="对Map等的处理"><a href="#对Map等的处理" class="headerlink" title="对Map等的处理"></a>对Map等的处理</h3><ul>
<li>使用collectionHandlers里的方法,handler只代理一个方法那就是get</li>
<li><p>在get里面会把对应原型上的方法都代理了，所以当访问proxy对象上的方法时，get就会返回instrumentations里的对应方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mutableCollectionHandlers: ProxyHandler&lt;CollectionTypes&gt; = &#123;</span><br><span class="line">  <span class="keyword">get</span>: createInstrumentationGetter(false, false)</span><br><span class="line">&#125;</span><br><span class="line">function createInstrumentationGetter(isReadonly: boolean, shallow: boolean) &#123;</span><br><span class="line">  <span class="keyword">const</span> instrumentations = shallow</span><br><span class="line">    ? shallowInstrumentations</span><br><span class="line">    : isReadonly</span><br><span class="line">      ? readonlyInstrumentations</span><br><span class="line">      : mutableInstrumentations</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    target: CollectionTypes,</span><br><span class="line">    key: string | symbol,</span><br><span class="line">    receiver: CollectionTypes</span><br><span class="line">  ) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (key === ReactiveFlags.IS_REACTIVE) &#123;</span><br><span class="line">      <span class="keyword">return</span> !isReadonly</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key === ReactiveFlags.IS_READONLY) &#123;</span><br><span class="line">      <span class="keyword">return</span> isReadonly</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key === ReactiveFlags.RAW) &#123;</span><br><span class="line">      <span class="keyword">return</span> target</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(</span><br><span class="line">      hasOwn(instrumentations, key) &amp;&amp; key <span class="keyword">in</span> target</span><br><span class="line">        ? instrumentations</span><br><span class="line">        : target,</span><br><span class="line">      key,</span><br><span class="line">      receiver</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> mutableInstrumentations: Record&lt;string, <span class="built_in">Function</span>&gt; = &#123;</span><br><span class="line">  <span class="keyword">get</span>(this: MapTypes, key: unknown) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">get</span>(this, key, toReactive)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">get</span> size() &#123;</span><br><span class="line">    <span class="keyword">return</span> size((<span class="keyword">this</span> <span class="keyword">as</span> unknown) <span class="keyword">as</span> IterableCollections)</span><br><span class="line">  &#125;,</span><br><span class="line">  has,</span><br><span class="line">  add,</span><br><span class="line">  <span class="keyword">set</span>,</span><br><span class="line">  delete: deleteEntry,</span><br><span class="line">  clear,</span><br><span class="line">  forEach: createForEach(false, false)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const iteratorMethods = ['keys', 'values', 'entries', Symbol.iterator]</span><br><span class="line">iteratorMethods.forEach(method =&gt; &#123;</span><br><span class="line">  mutableInstrumentations[method <span class="keyword">as</span> string] = createIterableMethod(</span><br><span class="line">    method,</span><br><span class="line">    <span class="literal">false</span>,</span><br><span class="line">    <span class="literal">false</span></span><br><span class="line">  )</span><br><span class="line">  readonlyInstrumentations[method <span class="keyword">as</span> string] = createIterableMethod(</span><br><span class="line">    method,</span><br><span class="line">    <span class="literal">true</span>,</span><br><span class="line">    <span class="literal">false</span></span><br><span class="line">  )</span><br><span class="line">  shallowInstrumentations[method <span class="keyword">as</span> string] = createIterableMethod(</span><br><span class="line">    method,</span><br><span class="line">    <span class="literal">false</span>,</span><br><span class="line">    <span class="literal">true</span></span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  target: MapTypes,</span></span></span><br><span class="line"><span class="function"><span class="params">  key: unknown,</span></span></span><br><span class="line"><span class="function"><span class="params">  wrap: typeof toReactive | typeof toReadonly | typeof toShallow</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  target = toRaw(target)</span><br><span class="line">  <span class="keyword">const</span> rawKey = toRaw(key)</span><br><span class="line">  <span class="keyword">if</span> (key !== rawKey) &#123;</span><br><span class="line">    track(target, TrackOpTypes.GET, key)</span><br><span class="line">  &#125;</span><br><span class="line">  track(target, TrackOpTypes.GET, rawKey)</span><br><span class="line">  <span class="keyword">const</span> &#123; has, <span class="keyword">get</span> &#125; = getProto(target)</span><br><span class="line">  if (has.call(target, key)) &#123;</span><br><span class="line">    <span class="keyword">return</span> wrap(<span class="keyword">get</span>.call(target, key))</span><br><span class="line">  &#125; else if (has.call(target, rawKey)) &#123;</span><br><span class="line">    <span class="keyword">return</span> wrap(<span class="keyword">get</span>.call(target, rawKey))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">function <span class="keyword">set</span>(this: MapTypes, key: unknown, value: unknown) &#123;</span><br><span class="line">  value = toRaw(value)</span><br><span class="line">  <span class="keyword">const</span> target = toRaw(<span class="keyword">this</span>)</span><br><span class="line">  <span class="keyword">const</span> &#123; has, <span class="keyword">get</span>, <span class="keyword">set</span> &#125; = getProto(target)</span><br><span class="line"></span><br><span class="line">  let hadKey = has.call(target, key)</span><br><span class="line">  if (!hadKey) &#123;</span><br><span class="line">    key = toRaw(key)</span><br><span class="line">    hadKey = has.call(target, key)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">    checkIdentityKeys(target, has, key)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> oldValue = <span class="keyword">get</span>.call(target, key)</span><br><span class="line">  const result = <span class="keyword">set</span>.call(target, key, value)</span><br><span class="line">  if (!hadKey) &#123;</span><br><span class="line">    trigger(target, TriggerOpTypes.ADD, key, value)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hasChanged(value, oldValue)) &#123;</span><br><span class="line">    trigger(target, TriggerOpTypes.SET, key, value, oldValue)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在被Proxy后的Map等对象上调用其原型方法时，都会调用其get方法，直接对Map对象Proxy时只有一个get方法，其会执行createInstrumentationGetter(false, false)的返回值，最终会执行mutableInstrumentations上的方法</p>
</li>
<li>比如在调用add方法时，最终会调用mutableInstrumentations上的add方法</li>
</ul>
<h3 id="为何能监听到数组的新增操作"><a href="#为何能监听到数组的新增操作" class="headerlink" title="为何能监听到数组的新增操作"></a>为何能监听到数组的新增操作</h3><h3 id="ECMAScript定义"><a href="#ECMAScript定义" class="headerlink" title="ECMAScript定义"></a>ECMAScript定义</h3><p><img src="./proxy.png" alt="proxy"></p>
<ul>
<li><a href="http://www.ecma-international.org/ecma-262/11.0/index.html#sec-proxycreate" target="_blank" rel="noopener">ProxyCreate</a></li>
<li>target和handler必须是Object，不然会抛TypeError<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a><br><a href="https://www.lizenghai.com/archives/42372.html#reactivity" target="_blank" rel="noopener">https://www.lizenghai.com/archives/42372.html#reactivity</a><br><a href="https://juejin.im/post/6844904050912133133" target="_blank" rel="noopener">https://juejin.im/post/6844904050912133133</a><br><a href="https://zhuanlan.zhihu.com/p/89940326" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/89940326</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Proxy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[snowpack初探]]></title>
      <url>http://ldllidonglin.github.io/blog/2020/06/18/2020-06-18-snowpack%E5%88%9D%E6%8E%A2/</url>
      <content type="html"><![CDATA[<p>探究snowpack工具的原理以及使用方法<br><a id="more"></a></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install snowpack -D</span><br><span class="line">npx create-snowpack-app new-dir --template @snowpack/app-template-vue</span><br></pre></td></tr></table></figure>
<ul>
<li>使用create-snowpack-app可以快速的创建一个初始应用，并且配置好了基础设置</li>
</ul>
<h2 id="install命令"><a href="#install命令" class="headerlink" title="install命令"></a>install命令</h2><ul>
<li><p>把所有对node_modules的依赖，找到支持module的包，复制对应的文件到web_modules目录下，引用改包的地方就会被修改成</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Your Code:</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> ReactDOM <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"><span class="comment">// Build Output:</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">"/web_modules/react.js"</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> ReactDOM <span class="keyword">from</span> <span class="string">"/web_modules/react-dom.js"</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>怎么判断一个包是否支持es module，是从package.json中找，查找顺序是</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">depManifest[<span class="string">'browser:module'</span>] || depManifest.module || depManifest[<span class="string">'main:esnext'</span>] || depManifest.browser</span><br></pre></td></tr></table></figure>
</li>
<li><p>所有文件会过一遍rollup打包，最终的文件是es module模式的，rollup打包时，使用了以下插件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> rollupPluginAlias <span class="keyword">from</span> <span class="string">'@rollup/plugin-alias'</span>;</span><br><span class="line"><span class="keyword">import</span> rollupPluginCommonjs <span class="keyword">from</span> <span class="string">'@rollup/plugin-commonjs'</span>;</span><br><span class="line"><span class="keyword">import</span> rollupPluginJson <span class="keyword">from</span> <span class="string">'@rollup/plugin-json'</span>;</span><br><span class="line"><span class="keyword">import</span> rollupPluginNodeResolve <span class="keyword">from</span> <span class="string">'@rollup/plugin-node-resolve'</span>;</span><br><span class="line"><span class="keyword">import</span> rollupPluginReplace <span class="keyword">from</span> <span class="string">'@rollup/plugin-replace'</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>plugin-alias的作用是用来支撑config中的alias配置</li>
<li>plugin-commons，把CommonJS格式的包转成es module，rollup才能识别处理</li>
<li>plugin-josn,把json文件转成es module</li>
<li>plugin-node-resolve。应用node查找包的算法，主要是处理引用node_module中的包的情况</li>
<li>plugin-replace的作用是替换例如<code>process.env.NODE_ENV</code>等变量</li>
</ul>
</li>
</ul>
<h2 id="build命令"><a href="#build命令" class="headerlink" title="build命令"></a>build命令</h2><ul>
<li>会先执行install</li>
<li>会默认添加两个scripts，’mount:web_modules’（把.cache中的build中的内容mount到最终的build目录）， ‘build: js,jsx,ts,tsx’,<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  id: <span class="string">'mount:web_modules'</span>,</span><br><span class="line">  type: <span class="string">'mount'</span>,</span><br><span class="line">  match: [ <span class="string">'web_modules'</span> ],</span><br><span class="line">  cmd: <span class="string">'mount $WEB_MODULES --to /web_modules'</span>,</span><br><span class="line">  args: &#123;</span><br><span class="line">    fromDisk: <span class="string">'/Users/xx//node_modules/.cache/snowpack/build'</span>,</span><br><span class="line">    toUrl: <span class="string">'/web_modules'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  id: <span class="string">'build:js,jsx,ts,tsx'</span>,</span><br><span class="line">  type: <span class="string">'build'</span>,</span><br><span class="line">  match: [ <span class="string">'js'</span>, <span class="string">'jsx'</span>, <span class="string">'ts'</span>, <span class="string">'tsx'</span> ],</span><br><span class="line">  cmd: <span class="string">'(default) esbuild'</span>,</span><br><span class="line">  plugin: &#123; <span class="attr">build</span>: [AsyncFunction: build] &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="dev命令"><a href="#dev命令" class="headerlink" title="dev命令"></a>dev命令</h2><ul>
<li>会判断是否需要install，如果需要会执行</li>
<li><p>createServer，在server的相应端，会执行各种逻辑，返回各种静态资源，会优先返回cache中的资源</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> server = createServer(<span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">const</span> [fileLoc, selectedWorker] = <span class="keyword">await</span> getFileFromUrl(reqPath);</span><br><span class="line"><span class="comment">// 1. Check the hot build cache. If it's already found, then just serve it.</span></span><br><span class="line"><span class="keyword">let</span> hotCachedResponse: string | Buffer | <span class="literal">undefined</span> = inMemoryBuildCache.get(fileLoc);</span><br><span class="line"><span class="keyword">if</span> (!hotCachedResponse) &#123;</span><br><span class="line">  <span class="comment">// 2. Load the file from disk. We'll need it to check the cold cache or build from scratch.</span></span><br><span class="line">  fileContents = <span class="keyword">await</span> fs.readFile(fileLoc, getEncodingType(requestedFileExt));</span><br><span class="line">   <span class="comment">// 3. Check the persistent cache. If found, serve it via a "trust-but-verify" strategy.</span></span><br><span class="line">    <span class="comment">// Build it after sending, and if it no longer matches then assume the entire cache is suspect.</span></span><br><span class="line">    <span class="comment">// In that case, clear the persistent cache and then force a live-reload of the page.</span></span><br><span class="line">  <span class="keyword">if</span> (cache) &#123;</span><br><span class="line">    sendFile()</span><br><span class="line">    <span class="keyword">const</span> checkFinalBuildAnyway = <span class="keyword">await</span> buildFile(</span><br><span class="line">      fileContents,</span><br><span class="line">      fileLoc,</span><br><span class="line">      reqPath,</span><br><span class="line">      fileBuilder,</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 4. Final option: build the file, serve it, and cache it.</span></span><br><span class="line">  finalBuild = <span class="keyword">await</span> buildFile(fileContents, fileLoc, reqPath, fileBuilder);</span><br><span class="line">  <span class="keyword">const</span> wrappedResponse = <span class="keyword">await</span> wrapResponse(finalBuild.result, finalBuild.resources?.css);</span><br><span class="line">  sendFile(req, res, wrappedResponse, responseFileExt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>所以dev命令执行的时候很快，server会立马起来，打开浏览器，等浏览器访问对应资源的时候，再进行build。</p>
</li>
</ul>
<h2 id="HMR"><a href="#HMR" class="headerlink" title="HMR"></a>HMR</h2><ul>
<li><p>chokidar watch所有文件，add，change，unlink事件就会触发事件，通过WebSocket传递给client</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> watcher = chokidar.watch(</span><br><span class="line">  mountedDirectories.map(<span class="function">(<span class="params">[dirDisk]</span>) =&gt;</span> dirDisk),</span><br><span class="line">  &#123;</span><br><span class="line">    ignored: config.exclude,</span><br><span class="line">    persistent: <span class="literal">true</span>,</span><br><span class="line">    ignoreInitial: <span class="literal">true</span>,</span><br><span class="line">    disableGlobbing: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br><span class="line">watcher.on(<span class="string">'add'</span>, (fileLoc) =&gt; onWatchEvent(fileLoc));</span><br><span class="line">watcher.on(<span class="string">'change'</span>, (fileLoc) =&gt; onWatchEvent(fileLoc));</span><br><span class="line">watcher.on(<span class="string">'unlink'</span>, (fileLoc) =&gt; onWatchEvent(fileLoc));</span><br></pre></td></tr></table></figure>
</li>
<li><p>需要自己手动加入如下代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">import</span>.meta.hot) &#123;</span><br><span class="line">  <span class="keyword">import</span>.meta.hot.accept();</span><br><span class="line">  <span class="keyword">import</span>.meta.hot.dispose(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    app.unmount();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>针对change事件，不刷新页面实现更新。其原理是client端得到消息需要更新时，会重新import需要更新的资源，并且带上时间戳。server端就会把里面的依赖import资源都带上时间戳，从而实现刷新。</p>
</li>
</ul>
<h2 id="css的打包"><a href="#css的打包" class="headerlink" title="css的打包"></a>css的打包</h2><h3 id="直接引入css"><a href="#直接引入css" class="headerlink" title="直接引入css"></a>直接引入css</h3><ul>
<li><p>对于css文件，使用proxy的模式加载，如在源代码中这么使用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./a.css'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>最终a.css会被buidl为a.css.proxy.js，其内容是</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> code = <span class="string">"div &#123;\n  background-color: red;\n&#125;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styleEl = <span class="built_in">document</span>.createElement(<span class="string">"style"</span>);</span><br><span class="line"><span class="keyword">const</span> codeEl = <span class="built_in">document</span>.createTextNode(code);</span><br><span class="line">styleEl.type = <span class="string">'text/css'</span>;</span><br><span class="line"></span><br><span class="line">styleEl.appendChild(codeEl);</span><br><span class="line"><span class="built_in">document</span>.head.appendChild(styleEl);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面的代码只有在开启了hmr时才会注入</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> __SNOWPACK_HMR_API__ <span class="keyword">from</span> <span class="string">'/__snowpack__/hmr.js'</span>;</span><br><span class="line"><span class="keyword">import</span>.meta.hot = __SNOWPACK_HMR_API__.createHotContext(<span class="keyword">import</span>.meta.url);</span><br><span class="line"><span class="keyword">import</span>.meta.hot.accept();</span><br><span class="line"><span class="keyword">import</span>.meta.hot.dispose(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.head.removeChild(styleEl);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="使用css-module"><a href="#使用css-module" class="headerlink" title="使用css module"></a>使用css module</h3><ul>
<li>必须以.module.css结尾，会被css-modules-loader-core这个包处理一遍<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Core <span class="keyword">from</span> <span class="string">'css-modules-loader-core'</span>;</span><br><span class="line"><span class="keyword">let</span> core = <span class="keyword">new</span> Core();</span><br><span class="line"><span class="keyword">const</span> &#123;injectableSource, exportTokens&#125; = <span class="keyword">await</span> core.load(code, url, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Imports in CSS Modules are not yet supported.'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">export let code = <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(injectableSource)&#125;</span>;</span></span><br><span class="line"><span class="string">let json = <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(exportTokens)&#125;</span>;</span></span><br><span class="line"><span class="string">export default json;</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="支持jsx-ts"><a href="#支持jsx-ts" class="headerlink" title="支持jsx,ts"></a>支持jsx,ts</h2><ul>
<li>使用<a href="https://github.com/evanw/esbuild" target="_blank" rel="noopener">esbuild</a>这个包实现对这俩语法的支持，默认支队.ts，.jsx后缀的文件进行处理</li>
</ul>
<h2 id="esm的支持情况"><a href="#esm的支持情况" class="headerlink" title="esm的支持情况"></a>esm的支持情况</h2><ul>
<li>除了ie，如果对兼容性要求不要的场景，在pc端可以开始尝试使用了<br><img src="./mdn.png" alt="mdn"><br><img src="./cani.png" alt="cani"></li>
</ul>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://zhuanlan.zhihu.com/p/144993158" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/144993158</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import</a><br><a href="https://www.caniuse.com/#search=import" target="_blank" rel="noopener">https://www.caniuse.com/#search=import</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> html </tag>
            
            <tag> snowpack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DOMContentLoaded触发时机]]></title>
      <url>http://ldllidonglin.github.io/blog/2020/05/26/2020-05-26-DOMContentLoaded%E8%A7%A6%E5%8F%91%E6%97%B6%E6%9C%BA/</url>
      <content type="html"><![CDATA[<p>探究DOMContentLoaded事件的触发时机<br><a id="more"></a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/Events/DOMContentLoaded" target="_blank" rel="noopener">MDN</a>上的解释是：<code>当初始的 HTML 文档被完全加载和解析完成之后，DOMContentLoaded 事件被触发，而无需等待样式表、图像和子框架的完全加载。注意：DOMContentLoaded 事件必须等待其所属script之前的样式表加载解析完成才会触发</code>。这两句话看似有点矛盾，我们看下<a href="https://html.spec.whatwg.org/multipage/parsing.html#the-end" target="_blank" rel="noopener">HTML5规范</a>是怎么解释这个事情的。</p>
<h2 id="html5规范"><a href="#html5规范" class="headerlink" title="html5规范"></a>html5规范</h2><p><img src="the_end.jpg" alt="the_end"></p>
<ul>
<li>规范上写的是，一旦客户端(也就是浏览器)停止解析文档时，如果<code>has no style sheet that is blocking scripts</code>(没有阻塞脚本的style sheet)，就会在执行完<code>list of scripts that will execute when the document has finished parsing</code>里的所有脚本后，触发DOMContentLoaded 事件。</li>
</ul>
<h3 id="style-sheet-that-is-blocking-scripts"><a href="#style-sheet-that-is-blocking-scripts" class="headerlink" title="style sheet that is blocking scripts"></a>style sheet that is blocking scripts</h3><p>在<a href="https://html.spec.whatwg.org/multipage/semantics.html#has-no-style-sheet-that-is-blocking-scripts" target="_blank" rel="noopener">html规范</a>中有解释这个是什么<br><img src="style.jpg" alt="style"></p>
<ul>
<li><code>has no style sheet that is blocking scripts</code> 其实就是说<code>Document</code> 的 <code>script-blocking style sheet counter</code> 为 0。而<code>script-blocking style sheet counter</code>在解析一个link标签是+1，load完一个就-1</li>
<li>也就是说一个正常的link标签都会是一个block scripts的style sheet。是我理解错了？因为实际情况是css文件不会阻塞DOMContentLoaded事件的触发。</li>
<li>看这个<a href="https://xiaoxuehua.xyz/demo/domcontentloaded/css.html" target="_blank" rel="noopener">demo</a>，注意把网速调低，可以看到控制台内的DOMContentLoaded的输出不会等待css加载完。</li>
<li>css在什么情况才会阻塞DOMContentLoaded事件的触发呢？css后面有同步脚本的时候，因为css会阻塞后面js的执行（不会阻塞加载），而同步脚本的执行会阻塞DOMContentLoaded事件的触发，可以看这个<a href="https://xiaoxuehua.xyz/demo/domcontentloaded/css-js.html" target="_blank" rel="noopener">demo</a></li>
<li>因为上面的原因，在绑定DOMContentLoaded事件的js代码前的css会阻塞事件的触发</li>
</ul>
<h3 id="list-of-scripts-that-will-execute-when-the-document-has-finished-parsing"><a href="#list-of-scripts-that-will-execute-when-the-document-has-finished-parsing" class="headerlink" title="list of scripts that will execute when the document has finished parsing"></a>list of scripts that will execute when the document has finished parsing</h3><p>在<a href="https://html.spec.whatwg.org/multipage/scripting.html#list-of-scripts-that-will-execute-when-the-document-has-finished-parsing" target="_blank" rel="noopener">html规范</a>中有解释这个<br><img src="scripting.jpg" alt="scripting"><br>也就是说只要满足以下任意一个条件，就会被加入到需要再完成dom解析后执行的脚本队列</p>
<ul>
<li>普通脚本（type=”text/javascript”），有src属性，并且有defer属性，没有async属性</li>
<li>module脚本（type=”module”）,并且没有async属性</li>
</ul>
<p>也就是说以上形式的脚本会阻塞DOMContentLoaded事件的触发</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ul>
<li>DOMContentLoaded 事件会在dom解析完、同步js执行完后、所有带有defer属性的脚本、type=”module”的脚本执行后再触发。</li>
<li>正常情况下css不会阻塞DOMContentLoaded 事件的触发，但是有可能会因为css阻塞js的执行，从而阻塞DOMContentLoaded 事件。</li>
</ul>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://www.cnblogs.com/chenjg/p/7126822.html" target="_blank" rel="noopener">css加载会造成阻塞吗？</a></li>
<li><a href="https://juejin.im/post/5dc8ca0a6fb9a04a7e1a44ff" target="_blank" rel="noopener">HTML Standard系列：浏览器是如何解析页面和脚本的</a></li>
<li><a href="https://github.com/whatwg/html/issues/1349" target="_blank" rel="noopener">Define parser behavior for in-body external stylesheets</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> html </tag>
            
            <tag> DOMContentLoaded </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[redux原理]]></title>
      <url>http://ldllidonglin.github.io/blog/2020/05/14/2020-05-14-redux%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<p>redux 原理解析<br><a id="more"></a></p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">counter</span>(<span class="params">state = <span class="number">0</span>, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'INCREMENT'</span>:</span><br><span class="line">      <span class="keyword">return</span> state + <span class="number">1</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'DECREMENT'</span>:</span><br><span class="line">      <span class="keyword">return</span> state - <span class="number">1</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> store = createStore(counter)</span><br><span class="line">store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(store.getState()))</span><br><span class="line">store.dispatch(&#123; <span class="attr">type</span>: <span class="string">'INCREMENT'</span> &#125;)</span><br></pre></td></tr></table></figure>
<h2 id="createStore"><a href="#createStore" class="headerlink" title="createStore"></a>createStore</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createStore</span>(<span class="params">reducer, preloadedState, enhancer</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> enhancer !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> enhancer !== <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Expected the enhancer to be a function.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> enhancer(createStore)(reducer, preloadedState);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//***省略很多代码</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">subscribe</span>(<span class="params">listener</span>) </span>&#123;</span><br><span class="line">    nextListeners.push(listener);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//***</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; listeners.length; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> listener = listeners[i];</span><br><span class="line">      listener();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> action;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">observable</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _ref;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> outerSubscribe = subscribe;</span><br><span class="line">    <span class="keyword">return</span> _ref = &#123;</span><br><span class="line">      subscribe: <span class="function"><span class="keyword">function</span> <span class="title">subscribe</span>(<span class="params">observer</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> observer !== <span class="string">'object'</span> || observer === <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Expected the observer to be an object.'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">observeState</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (observer.next) &#123;</span><br><span class="line">            observer.next(getState());</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        observeState();</span><br><span class="line">        <span class="keyword">var</span> unsubscribe = outerSubscribe(observeState);</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          unsubscribe: unsubscribe</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, _ref[result] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;, _ref;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    dispatch: dispatch,</span><br><span class="line">    subscribe: subscribe,</span><br><span class="line">    getState: getState,</span><br><span class="line">    replaceReducer: replaceReducer</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>接受三个入参，如果传入了enhancer，那么会直接返回<code>enhancer(createStore)(reducer, preloadedState)</code></li>
<li>subscribe的关键代码就是把listener加入队列</li>
<li>dispatch就是把listeners里的所有回调挨个执行</li>
<li>其还实现了observable方法，为了就是给一些observable/reactive的库使用，是的，他们可以监听这个store的变化</li>
</ul>
<h2 id="中间件是怎么实现的"><a href="#中间件是怎么实现的" class="headerlink" title="中间件是怎么实现的"></a>中间件是怎么实现的</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul>
<li><p>applyMiddleware</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">applyMiddleware</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> _len = <span class="built_in">arguments</span>.length, middlewares = <span class="keyword">new</span> <span class="built_in">Array</span>(_len), _key = <span class="number">0</span>; _key &lt; _len; _key++) &#123;</span><br><span class="line">    middlewares[_key] = <span class="built_in">arguments</span>[_key];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">createStore</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> store = createStore.apply(<span class="keyword">void</span> <span class="number">0</span>, <span class="built_in">arguments</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> _dispatch = <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Dispatching while constructing your middleware is not allowed. '</span> + <span class="string">'Other middleware would not be applied to this dispatch.'</span>);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> middlewareAPI = &#123;</span><br><span class="line">        getState: store.getState,</span><br><span class="line">        dispatch: <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> _dispatch.apply(<span class="keyword">void</span> <span class="number">0</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">var</span> chain = middlewares.map(<span class="function"><span class="keyword">function</span> (<span class="params">middleware</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> middleware(middlewareAPI);</span><br><span class="line">      &#125;);</span><br><span class="line">      _dispatch = compose.apply(<span class="keyword">void</span> <span class="number">0</span>, chain)(store.dispatch);</span><br><span class="line">      <span class="keyword">return</span> _objectSpread2(&#123;&#125;, store, &#123;</span><br><span class="line">        dispatch: _dispatch</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> _len = <span class="built_in">arguments</span>.length, funcs = <span class="keyword">new</span> <span class="built_in">Array</span>(_len), _key = <span class="number">0</span>; _key &lt; _len; _key++) &#123;</span><br><span class="line">    funcs[_key] = <span class="built_in">arguments</span>[_key];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (funcs.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">arg</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> arg;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (funcs.length === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> funcs[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> funcs.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> a(b.apply(<span class="keyword">void</span> <span class="number">0</span>, <span class="built_in">arguments</span>));</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>关键方法就是compose方法，把传入的middleware串联起来，并且是从右往左执行</p>
</li>
<li>applyMiddleware返回的其实是一个修改了dispatch的enhancer，入参是createStore。把初始的dispatch方法传入到compose后的middlewares，拿到处理后的dispatch替换原始store的方法。</li>
</ul>
<h3 id="怎么写一个middleware"><a href="#怎么写一个middleware" class="headerlink" title="怎么写一个middleware"></a>怎么写一个middleware</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logger</span>(<span class="params">&#123; getState &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>) =&gt;</span> <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'will dispatch'</span>, action)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用 middleware 链中下一个 middleware 的 dispatch。</span></span><br><span class="line">    <span class="keyword">let</span> returnValue = dispatch(action)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'state after dispatch'</span>, getState())</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一般会是 action 本身，除非</span></span><br><span class="line">    <span class="comment">// 后面的 middleware 修改了它。</span></span><br><span class="line">    <span class="keyword">return</span> returnValue</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>可见middleware是函数，返回值是一个以dispatch为入参的函数。所以applyMiddleware中要把所有middleware先执行一遍，然后再compose</li>
</ul>
<h3 id="redux-promise-middleware原理"><a href="#redux-promise-middleware原理" class="headerlink" title="redux-promise-middleware原理"></a>redux-promise-middleware原理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">middleware</span>(<span class="params">&#123; dispatch &#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> dispatch === <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> createPromise()(&#123; dispatch &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPromise</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">ref</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; dispatch &#125; = ref;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="params">next</span> =&gt;</span> <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (action.payload) &#123;</span><br><span class="line">          <span class="keyword">const</span> PAYLOAD = action.payload;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Step 1.1: Is the promise implicitly defined?</span></span><br><span class="line">          <span class="keyword">if</span> (isPromise(PAYLOAD)) &#123;</span><br><span class="line">            promise = PAYLOAD;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> handleReject = <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> rejectedAction = getAction(reason, <span class="literal">true</span>);</span><br><span class="line">          dispatch(rejectedAction);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">throw</span> reason;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">const</span> handleFulfill = <span class="function">(<span class="params">value = <span class="literal">null</span></span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> resolvedAction = getAction(value, <span class="literal">false</span>);</span><br><span class="line">          dispatch(resolvedAction);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> &#123; value, <span class="attr">action</span>: resolvedAction &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">        next(&#123;</span><br><span class="line">          type: [TYPE, PENDING].join(PROMISE_TYPE_DELIMITER),</span><br><span class="line">          ...(data !== <span class="literal">undefined</span> ? &#123; <span class="attr">payload</span>: data &#125; : &#123;&#125;),</span><br><span class="line">          ...(META !== <span class="literal">undefined</span> ? &#123; <span class="attr">meta</span>: META &#125; : &#123;&#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> promise.then(handleFulfill, handleReject);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>如果action.payload是一个promise的话，先dispatch一个pending状态的action，然后执行promise.then，并在其handleFulfill/handleReject中再dispatch相应的action，所以reducer中就可以根据promise的状态来写对应的处理函数</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> redux </tag>
            
            <tag> react </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[react-hooks原理]]></title>
      <url>http://ldllidonglin.github.io/blog/2020/05/10/2020-05-10-react-hooks%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<p>react hooks 原理解析<br><a id="more"></a></p>
<h2 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Declare a new state variable, which we'll call "count"</span></span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;</span></span><br><span class="line"><span class="regexp">        Click me</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="存储state"><a href="#存储state" class="headerlink" title="存储state"></a>存储state</h3><ul>
<li><p>React.useState</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useState</span>&lt;<span class="title">S</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  initialState: ((</span>) =&gt; <span class="title">S</span>) | <span class="title">S</span>,</span></span><br><span class="line">): [S, Dispatch&lt;BasicStateAction&lt;S&gt;&gt;] &#123;</span><br><span class="line">  <span class="keyword">const</span> dispatcher = resolveDispatcher();</span><br><span class="line">  <span class="keyword">return</span> dispatcher.useState(initialState);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolveDispatcher</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dispatcher = ReactCurrentDispatcher.current;</span><br><span class="line">    <span class="keyword">return</span> dispatcher;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>dispatcher.useState(initialState)最终调用mountState</p>
</li>
<li><p>mountState</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mountState</span>(<span class="params">initialState</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> hook = mountWorkInProgressHook();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> initialState === <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="comment">// $FlowFixMe: Flow doesn't like mixed types</span></span><br><span class="line">    initialState = initialState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  hook.memoizedState = hook.baseState = initialState;</span><br><span class="line">  <span class="keyword">var</span> queue = hook.queue = &#123;</span><br><span class="line">    pending: <span class="literal">null</span>,</span><br><span class="line">    dispatch: <span class="literal">null</span>,</span><br><span class="line">    lastRenderedReducer: basicStateReducer,</span><br><span class="line">    lastRenderedState: initialState</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> dispatch = queue.dispatch = dispatchAction.bind(<span class="literal">null</span>, currentlyRenderingFiber$<span class="number">1</span>, queue);</span><br><span class="line">  <span class="keyword">return</span> [hook.memoizedState, dispatch];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>mountWorkInProgressHook</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mountWorkInProgressHook</span>(<span class="params"></span>): <span class="title">Hook</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> hook: Hook = &#123;</span><br><span class="line">    memoizedState: <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    baseState: <span class="literal">null</span>,</span><br><span class="line">    baseQueue: <span class="literal">null</span>,</span><br><span class="line">    queue: <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    next: <span class="literal">null</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (workInProgressHook === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// This is the first hook in the list</span></span><br><span class="line">    currentlyRenderingFiber.memoizedState = workInProgressHook = hook;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Append to the end of the list</span></span><br><span class="line">    workInProgressHook = workInProgressHook.next = hook;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> workInProgressHook;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>state是链式存储在fiber节点上的memoizedState属性的</p>
</li>
<li><code>workInProgressHook = workInProgressHook.next = hook</code> 这句代码实现了将state链式存储</li>
<li>在实际调用的时候也是这样，每次执行useState会返回当前的state，然后把current指向next，从而实现每个useState都能拿到之前定义的state值</li>
<li>所以才规定，useState必须在顶层调用，不能在if语句中和循环中使用，因为他的获取值的顺序完全依赖执行顺序。</li>
</ul>
<h3 id="更新state"><a href="#更新state" class="headerlink" title="更新state"></a>更新state</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回的dispath是这么定义的</span></span><br><span class="line"><span class="keyword">var</span> dispatch = queue.dispatch = dispatchAction.bind(<span class="literal">null</span>, currentlyRenderingFiber$<span class="number">1</span>, queue);</span><br><span class="line"><span class="comment">// 保存了定义是state对应的queue</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dispatchAction</span>(<span class="params">fiber, queue, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> update = &#123;</span><br><span class="line">    expirationTime: expirationTime,</span><br><span class="line">    suspenseConfig: suspenseConfig,</span><br><span class="line">    action: action,</span><br><span class="line">    eagerReducer: <span class="literal">null</span>,</span><br><span class="line">    eagerState: <span class="literal">null</span>,</span><br><span class="line">    next: <span class="literal">null</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> pending = queue.pending;</span><br><span class="line">  <span class="comment">// 把要更新的action保存到queue的pending上，为以后的updateReducer使用</span></span><br><span class="line">  <span class="keyword">if</span> (pending === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// This is the first update. Create a circular list.</span></span><br><span class="line">    update.next = update;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    update.next = pending.next;</span><br><span class="line">    pending.next = update;</span><br><span class="line">  &#125;</span><br><span class="line">  queue.pending = update;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>useState(re-render)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HooksDispatcherOnUpdate.useState() -&gt; <span class="keyword">return</span> updateState(initialState)</span><br><span class="line"><span class="keyword">return</span> updateReducer(basicStateReducer);</span><br></pre></td></tr></table></figure>
</li>
<li><p>updateReducer</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateReducer</span>(<span class="params">reducer, initialArg, init</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> hook = updateWorkInProgressHook();</span><br><span class="line">  <span class="keyword">var</span> queue = hook.queue;</span><br><span class="line">  <span class="keyword">var</span> pendingQueue = queue.pending;</span><br><span class="line">  current.baseQueue = baseQueue = pendingQueue</span><br><span class="line">  action = currentHook.baseQueue.next.action</span><br><span class="line">  newState = reducer(newState, action)</span><br><span class="line">  hook.memoizedState = newState;</span><br><span class="line">  <span class="keyword">return</span> [hook.memoizedState, dispatch]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>basicStateReducer</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">basicStateReducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// $FlowFixMe: Flow doesn't like mixed types</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> action === <span class="string">'function'</span> ? action(state) : action;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>updateReducer</code>最终是使用了currentHook的queue的pending.next的action，这个值是在setState时更新的</p>
</li>
<li>更新stage时只是把要更新的状态存储在队列中，最终re-render时会去执行reducer，然后拿到最新的state</li>
<li>useState内部其实是使用了useReducer</li>
<li>每次执行useState，会执行resolveDispatcher从而获得当前的dispatcher，返回的是ReactCurrentDispatcher.current，这个值会根据运行情况进行变化，从而实现mount和update时，最终调用不同的方法，初始化时，是mountState，更新时是调用udateState</li>
</ul>
<h2 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h2><h3 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Similar to componentDidMount and componentDidUpdate:</span></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Update the document title using the browser API</span></span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;</span></span><br><span class="line"><span class="regexp">        Click me</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useEffect</span>(<span class="params">create, deps</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> dispatcher = resolveDispatcher();</span><br><span class="line">  <span class="keyword">return</span> dispatcher.useEffect(create, deps) -&gt; mountEffect(create, deps); <span class="comment">// 一开始时是执行mountEffect，具体执行的方法会在运行的不同阶段调用不同的方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mountEffect</span>(<span class="params">create, deps</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> mountEffectImpl(Update | Passive, Passive$<span class="number">1</span>, create, deps);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mountEffectImpl</span>(<span class="params">fiberEffectTag, hookEffectTag, create, deps</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> hook = mountWorkInProgressHook();</span><br><span class="line">  <span class="keyword">const</span> nextDeps = deps === <span class="literal">undefined</span> ? <span class="literal">null</span> : deps;</span><br><span class="line">  currentlyRenderingFiber.effectTag |= fiberEffectTag;</span><br><span class="line">  hook.memoizedState = pushEffect(</span><br><span class="line">    HookHasEffect | hookEffectTag,</span><br><span class="line">    create,</span><br><span class="line">    <span class="literal">undefined</span>,</span><br><span class="line">    nextDeps,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pushEffect</span>(<span class="params">tag, create, destroy, deps</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> effect: Effect = &#123;</span><br><span class="line">    tag,</span><br><span class="line">    create,</span><br><span class="line">    destroy,</span><br><span class="line">    deps,</span><br><span class="line">    <span class="comment">// Circular</span></span><br><span class="line">    next: (<span class="literal">null</span>: any),</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> componentUpdateQueue: <span class="literal">null</span> | FunctionComponentUpdateQueue = (currentlyRenderingFiber.updateQueue: any);</span><br><span class="line">  <span class="keyword">if</span> (componentUpdateQueue === <span class="literal">null</span>) &#123;</span><br><span class="line">    componentUpdateQueue = createFunctionComponentUpdateQueue();</span><br><span class="line">    currentlyRenderingFiber.updateQueue = (componentUpdateQueue: any);</span><br><span class="line">    componentUpdateQueue.lastEffect = effect.next = effect;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> lastEffect = componentUpdateQueue.lastEffect;</span><br><span class="line">    <span class="keyword">if</span> (lastEffect === <span class="literal">null</span>) &#123;</span><br><span class="line">      componentUpdateQueue.lastEffect = effect.next = effect;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> firstEffect = lastEffect.next;</span><br><span class="line">      lastEffect.next = effect;</span><br><span class="line">      effect.next = firstEffect;</span><br><span class="line">      componentUpdateQueue.lastEffect = effect;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> effect;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>最终是把create方法（useEffect时的第一个参数）放到effect对象中，effect对象又被推入currentlyRenderingFiber的updateQueue中</li>
</ul>
<h3 id="什么时候执行"><a href="#什么时候执行" class="headerlink" title="什么时候执行"></a>什么时候执行</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">commitHookEffectListMount</span>(<span class="params">tag, finishedWork</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> updateQueue: FunctionComponentUpdateQueue | <span class="literal">null</span> = (finishedWork.updateQueue: any);</span><br><span class="line">  <span class="keyword">const</span> lastEffect = updateQueue !== <span class="literal">null</span> ? updateQueue.lastEffect : <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (lastEffect !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> firstEffect = lastEffect.next;</span><br><span class="line">    <span class="keyword">let</span> effect = firstEffect;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> ((effect.tag &amp; tag) === tag) &#123;</span><br><span class="line">        <span class="comment">// Mount</span></span><br><span class="line">        <span class="keyword">const</span> create = effect.create;</span><br><span class="line">        effect.destroy = create();</span><br><span class="line">      &#125;</span><br><span class="line">      effect = effect.next;</span><br><span class="line">    &#125; <span class="keyword">while</span> (effect !== firstEffect);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>把执行create的结果赋值给effect的destroy属性，</li>
</ul>
<h3 id="deps是怎么起作用的"><a href="#deps是怎么起作用的" class="headerlink" title="deps是怎么起作用的"></a>deps是怎么起作用的</h3><ul>
<li><p>更新时执行以下代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateEffectImpl</span>(<span class="params">fiberEffectTag, hookEffectTag, create, deps</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> hook = updateWorkInProgressHook();</span><br><span class="line">  <span class="keyword">const</span> nextDeps = deps === <span class="literal">undefined</span> ? <span class="literal">null</span> : deps;</span><br><span class="line">  <span class="keyword">let</span> destroy = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (currentHook !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> prevEffect = currentHook.memoizedState;</span><br><span class="line">    destroy = prevEffect.destroy;</span><br><span class="line">    <span class="keyword">if</span> (nextDeps !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> prevDeps = prevEffect.deps;</span><br><span class="line">      <span class="keyword">if</span> (areHookInputsEqual(nextDeps, prevDeps)) &#123;</span><br><span class="line">        pushEffect(hookEffectTag, create, destroy, nextDeps);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  currentlyRenderingFiber.effectTag |= fiberEffectTag;</span><br><span class="line"></span><br><span class="line">  hook.memoizedState = pushEffect(</span><br><span class="line">    HookHasEffect | hookEffectTag,</span><br><span class="line">    create,</span><br><span class="line">    destroy,</span><br><span class="line">    nextDeps,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>areHookInputsEqual</code>会比较上一次的deps和最新的deps是否相同，如果不想同，则执行<code>pushEffect</code></p>
</li>
</ul>
<h3 id="useEffect返回的函数何时执行"><a href="#useEffect返回的函数何时执行" class="headerlink" title="useEffect返回的函数何时执行"></a>useEffect返回的函数何时执行</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">commitHookEffectListUnmount</span>(<span class="params">tag: number, finishedWork: Fiber</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> updateQueue: FunctionComponentUpdateQueue | <span class="literal">null</span> = (finishedWork.updateQueue: any);</span><br><span class="line">  <span class="keyword">const</span> lastEffect = updateQueue !== <span class="literal">null</span> ? updateQueue.lastEffect : <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (lastEffect !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> firstEffect = lastEffect.next;</span><br><span class="line">    <span class="keyword">let</span> effect = firstEffect;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> ((effect.tag &amp; tag) === tag) &#123;</span><br><span class="line">        <span class="comment">// Unmount</span></span><br><span class="line">        <span class="keyword">const</span> destroy = effect.destroy;</span><br><span class="line">        effect.destroy = <span class="literal">undefined</span>;</span><br><span class="line">        <span class="keyword">if</span> (destroy !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">          destroy();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      effect = effect.next;</span><br><span class="line">    &#125; <span class="keyword">while</span> (effect !== firstEffect);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>在执行unMount时，会把effect上的destroy取出来执行，而destroy又是执行effect时的结果</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> react </tag>
            
            <tag> react hooks </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[react-redux源码解析]]></title>
      <url>http://ldllidonglin.github.io/blog/2020/05/07/2020-05-07-react-redux%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>react-redux源码解析<br><a id="more"></a></p>
<h2 id="react-redux常见用法"><a href="#react-redux常见用法" class="headerlink" title="react-redux常见用法"></a>react-redux常见用法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; App &#125; <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> createStore <span class="keyword">from</span> <span class="string">'./createReduxStore'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore()</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">store</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> props</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapDispatchToProps</span>(<span class="params">dispatch</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    a() &#123;</span><br><span class="line">      dispatch(&#123;...&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> Root = connect(mapStateToProps, mapDispatchToProps)(App)</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">    &lt;Root /&gt;</span><br><span class="line">  &lt;<span class="regexp">/Provider&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById('root')</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure>
<h2 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h2><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><ul>
<li><a href="https://github.com/reduxjs/react-redux/blob/master/src/components/Provider.js" target="_blank" rel="noopener">Provider源码地址</a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Provider</span>(<span class="params">&#123; store, context, children &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> contextValue = useMemo(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> subscription = <span class="keyword">new</span> Subscription(store)</span><br><span class="line">    subscription.onStateChange = subscription.notifyNestedSubs</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      store,</span><br><span class="line">      subscription</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [store])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> previousState = useMemo(<span class="function"><span class="params">()</span> =&gt;</span> store.getState(), [store])</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; subscription &#125; = contextValue</span><br><span class="line">    subscription.trySubscribe()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (previousState !== store.getState()) &#123;</span><br><span class="line">      subscription.notifyNestedSubs()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      subscription.tryUnsubscribe()</span><br><span class="line">      subscription.onStateChange = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [contextValue, previousState])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> Context = context || ReactReduxContext</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Context.Provider</span> <span class="attr">value</span>=<span class="string">&#123;contextValue&#125;</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">Context.Provider</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><ul>
<li>把传入的store包装成Subscription对象，执行trySubscribe实现store的订阅，把store和subscription作为contextValue并且通过Context.Provider传给他的child，一般connect就会是Provider的子元素</li>
<li>connect中会调用useContext获取store和subscription</li>
</ul>
<h2 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h2><h3 id="解释-1"><a href="#解释-1" class="headerlink" title="解释"></a>解释</h3><ul>
<li><a href="https://github.com/reduxjs/react-redux/blob/master/src/connect/connect.js" target="_blank" rel="noopener">connect源码地址</a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// connect</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    mapStateToProps,</span></span></span><br><span class="line"><span class="function"><span class="params">    mapDispatchToProps,</span></span></span><br><span class="line"><span class="function"><span class="params">    mergeProps,</span></span></span><br><span class="line"><span class="function"><span class="params">    &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">      pure = true,</span></span></span><br><span class="line"><span class="function"><span class="params">      areStatesEqual = strictEqual,</span></span></span><br><span class="line"><span class="function"><span class="params">      areOwnPropsEqual = shallowEqual,</span></span></span><br><span class="line"><span class="function"><span class="params">      areStatePropsEqual = shallowEqual,</span></span></span><br><span class="line"><span class="function"><span class="params">      areMergedPropsEqual = shallowEqual,</span></span></span><br><span class="line"><span class="function"><span class="params">      ...extraOptions</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125; = &#123;&#125;</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> connectHOC(selectorFactory, &#123;...&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// connectHOC其实就是connectAdvanced</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">connectAdvanced</span>(<span class="params">selectorFactory，connectOptions</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">wrapWithConnect</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ConnectFunction</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="keyword">const</span> ContextToUse = useMemo(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> propsContext &amp;&amp;</span><br><span class="line">          propsContext.Consumer &amp;&amp;</span><br><span class="line">          isContextConsumer(<span class="xml"><span class="tag">&lt;<span class="name">propsContext.Consumer</span> /&gt;</span></span>)</span><br><span class="line">          ? propsContext</span><br><span class="line">          : Context</span><br><span class="line">      &#125;, [propsContext, Context])</span><br><span class="line">      <span class="keyword">const</span> contextValue = useContext(ContextToUse)</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="keyword">const</span> [</span><br><span class="line">        [previousStateUpdateResult],</span><br><span class="line">        forceComponentUpdateDispatch</span><br><span class="line">      ] = useReducer(storeStateUpdatesReducer, EMPTY_ARRAY, initStateUpdates)</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">      useIsomorphicLayoutEffectWithArgs(</span><br><span class="line">        subscribeUpdates,</span><br><span class="line">        [],</span><br><span class="line">        []</span><br><span class="line">      )</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="keyword">const</span> store = didStoreComeFromProps ? props.store : contextValue.store</span><br><span class="line">      <span class="keyword">const</span> actualChildProps = usePureOnlyMemo(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">          childPropsFromStoreUpdate.current &amp;&amp;</span><br><span class="line">          wrapperProps === lastWrapperProps.current</span><br><span class="line">        ) &#123;</span><br><span class="line">          <span class="keyword">return</span> childPropsFromStoreUpdate.current</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> childPropsSelector(store.getState(), wrapperProps)</span><br><span class="line">      &#125;, [store, previousStateUpdateResult, wrapperProps])</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="keyword">const</span> renderedWrappedComponent = useMemo(</span><br><span class="line">        () =&gt; (</span><br><span class="line">          &lt;WrappedComponent</span><br><span class="line">            &#123;...actualChildProps&#125;</span><br><span class="line">            ref=&#123;reactReduxForwardedRef&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">        ),</span><br><span class="line">        [reactReduxForwardedRef, WrappedComponent, actualChildProps]</span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> renderedChild = useMemo(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (shouldHandleStateChanges) &#123;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> (</span><br><span class="line">            &lt;ContextToUse.Provider value=&#123;overriddenContextValue&#125;&gt;</span><br><span class="line">              &#123;renderedWrappedComponent&#125;</span><br><span class="line">            &lt;<span class="regexp">/ContextToUse.Provider&gt;</span></span><br><span class="line"><span class="regexp">          )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        return renderedWrappedComponent</span></span><br><span class="line"><span class="regexp">      &#125;, [ContextToUse, renderedWrappedComponent, overriddenContextValue])</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">      return renderedChild</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    const contextValue = useContext(ContextToUse)</span></span><br><span class="line"><span class="regexp">    const Connect = pure ? React.memo(ConnectFunction) : ConnectFunction</span></span><br><span class="line"><span class="regexp">    return hoistStatics(Connect, WrappedComponent)</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/</span></span><br><span class="line"><span class="regexp">function useIsomorphicLayoutEffectWithArgs(</span></span><br><span class="line"><span class="regexp">  effectFunc,</span></span><br><span class="line"><span class="regexp">  effectArgs,</span></span><br><span class="line"><span class="regexp">  dependencies</span></span><br><span class="line"><span class="regexp">) &#123;</span></span><br><span class="line"><span class="regexp">  useIsomorphicLayoutEffect(() =&gt; effectFunc(...effectArgs), dependencies)</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">function subscribeUpdates(</span></span><br><span class="line"><span class="regexp">  shouldHandleStateChanges,</span></span><br><span class="line"><span class="regexp">  store,</span></span><br><span class="line"><span class="regexp">  subscription,</span></span><br><span class="line"><span class="regexp">  childPropsSelector,</span></span><br><span class="line"><span class="regexp">  lastWrapperProps,</span></span><br><span class="line"><span class="regexp">  lastChildProps,</span></span><br><span class="line"><span class="regexp">  renderIsScheduled,</span></span><br><span class="line"><span class="regexp">  childPropsFromStoreUpdate,</span></span><br><span class="line"><span class="regexp">  notifyNestedSubs,</span></span><br><span class="line"><span class="regexp">  forceComponentUpdateDispatch</span></span><br><span class="line"><span class="regexp">) &#123;</span></span><br><span class="line"><span class="regexp">  </span></span><br><span class="line"><span class="regexp">  const checkForUpdates = () =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    if (didUnsubscribe) &#123;</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ Don't run stale listeners.</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ Redux doesn't guarantee unsubscriptions happen until next dispatch.</span></span><br><span class="line"><span class="regexp">      return</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    const latestStoreState = store.getState()</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    let newChildProps, error</span></span><br><span class="line"><span class="regexp">    try &#123;</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ Actually run the selector with the most recent store state and wrapper props</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ to determine what the child props should be</span></span><br><span class="line"><span class="regexp">      newChildProps = childPropsSelector(</span></span><br><span class="line"><span class="regexp">        latestStoreState,</span></span><br><span class="line"><span class="regexp">        lastWrapperProps.current</span></span><br><span class="line"><span class="regexp">      )</span></span><br><span class="line"><span class="regexp">    &#125; catch (e) &#123;</span></span><br><span class="line"><span class="regexp">      error = e</span></span><br><span class="line"><span class="regexp">      lastThrownError = e</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/...</span></span><br><span class="line"><span class="regexp">    lastChildProps.current = newChildProps</span></span><br><span class="line"><span class="regexp">    childPropsFromStoreUpdate.current = newChildProps</span></span><br><span class="line"><span class="regexp">    renderIsScheduled.current = true</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ If the child props _did_ change (or we caught an error), this wrapper component needs to re-render</span></span><br><span class="line"><span class="regexp">    forceComponentUpdateDispatch(&#123;</span></span><br><span class="line"><span class="regexp">      type: 'STORE_UPDATED',</span></span><br><span class="line"><span class="regexp">      payload: &#123;</span></span><br><span class="line"><span class="regexp">        error</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">    </span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ Actually subscribe to the nearest connected ancestor (or store)</span></span><br><span class="line"><span class="regexp">  subscription.onStateChange = checkForUpdates</span></span><br><span class="line"><span class="regexp">  subscription.trySubscribe()</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ Pull data from the store after first render in case the store has</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ changed since we began.</span></span><br><span class="line"><span class="regexp">  checkForUpdates()</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  const unsubscribeWrapper = () =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    didUnsubscribe = true</span></span><br><span class="line"><span class="regexp">    subscription.tryUnsubscribe()</span></span><br><span class="line"><span class="regexp">    subscription.onStateChange = null</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    if (lastThrownError) &#123;</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ It's possible that we caught an error due to a bad mapState function, but the</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ parent re-rendered without this component and we're about to unmount.</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ This shouldn't happen as long as we do top-down subscriptions correctly, but</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ if we ever do those wrong, this throw will surface the error in our tests.</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ In that case, throw the error from here so it doesn't get lost.</span></span><br><span class="line"><span class="regexp">      throw lastThrownError</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  return unsubscribeWrapper</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="解释-2"><a href="#解释-2" class="headerlink" title="解释"></a>解释</h3><ul>
<li><a href="https://github.com/mridgway/hoist-non-react-statics" target="_blank" rel="noopener">hoistStatics</a>方法的效果和Object.assign类似，就是把WrappedComponent上的所有非react内置的静态方法拷贝到Connect上，并且返回Connect</li>
<li>所以connect最后返回的是一个函数<code>wrapWithConnect</code>，这个函数以WrappedComponent为参数，所以才有<code>connect(mapStateToProps, mapDispatchToProps)(App)</code>这样的用法</li>
<li>执行wrapWithConnect(App),最终返回的是React.memo(ConnectFunction)</li>
<li>ConnectFunction最终返回的是renderedChild，renderedChild是一个ContextToUse.Provider，overriddenContextValue作为value传递下去,并且把WrappedComponent作为子元素，<code>actualChildProps</code>里的所有属性作为WrappedComponent的props。</li>
<li><code>actualChildProps</code>一般情况下就是<code>childPropsFromStoreUpdate.current</code>，而<code>childPropsFromStoreUpdate</code>是通过useRef来创建的，<code>childPropsFromStoreUpdate.current</code>会在c<code>heckForUpdates</code>里面更新</li>
<li><p>在ConnectFunction中，会执行useIsomorphicLayoutEffectWithArgs -&gt; subscribeUpdates，subscribeUpdates里面会执行<code>subscription.onStateChange = checkForUpdates;subscription.trySubscribe()</code>，从而把实现<code>store.subscribe(checkForUpdates)</code>的效果,从而每次store更新，就会执行<code>checkForUpdates</code>，而<code>checkForUpdates</code>中，如果计算得到的props发生了更改，则会重新生成<code>newChildProp</code>，并且赋值给<code>childPropsFromStoreUpdate.current</code>。然后调<code>forceComponentUpdateDispatch</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">newChildProps = childPropsSelector(</span><br><span class="line">  latestStoreState,</span><br><span class="line">  lastWrapperProps.current</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> (newChildProps !== lastChildProps.current) &#123;</span><br><span class="line">  childPropsFromStoreUpdate.current = newChildProps</span><br><span class="line">  forceComponentUpdateDispatch(&#123;</span><br><span class="line">    type: <span class="string">'STORE_UPDATED'</span>,</span><br><span class="line">    payload: &#123;</span><br><span class="line">      error</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>forceComponentUpdateDispatch是通过以下代码创建的</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [</span><br><span class="line">    [previousStateUpdateResult],</span><br><span class="line">    forceComponentUpdateDispatch</span><br><span class="line">  ] = useReducer(storeStateUpdatesReducer, EMPTY_ARRAY, initStateUpdates)</span><br></pre></td></tr></table></figure>
</li>
<li><p>所以最终会导致ConnectFunction的re-render</p>
</li>
<li><code>actualChildProps == childPropsFromStoreUpdate.current</code>，最终把更新好的props传递到WrappedComponent</li>
</ul>
<h2 id="redux的store更新是怎么传递过来的"><a href="#redux的store更新是怎么传递过来的" class="headerlink" title="redux的store更新是怎么传递过来的"></a>redux的store更新是怎么传递过来的</h2><ul>
<li>Provider会初始一个Subscription对象subscription_a，通过context传递到connect</li>
<li>connect以subscription_a为父Subscription对象创建一个Subscription对象subscription_b</li>
<li>在connect中会执行subscription_b.trySubscribe时，此时会执行  <code>this.parentSub.addNestedSub(this.handleChangeWrapper)</code>,</li>
<li>this.parentSub.addNestedSub又会执行this.trySubscribe()，从而把subscription_a的handleChangeWrapper方法执行到this.store.subscribe(this.handleChangeWrapper)</li>
<li>并且会初始化subscription_a.listeners数组，在执行subscription_a.addNestedSub时，会把this.listeners.subscribe(listener)，这个listener就是subscription_b.handleChangeWrapper</li>
<li>所以store更新是执行subscription_a.handleChangeWrapper,而subscription_a.handleChangeWrapper里面会执行onStateChange()，subscription_a.onStateChange这个方法在Provider初始化的时候被设置为notifyNestedSubs，notifyNestedSubs方法执行的是this.listeners.notify()，从而把listeners的回调都执行一遍。其中就包含subscription_b.handleChangeWrapper。</li>
<li>subscription_b.handleChangeWrapper里面执行的onStateChange，在connect中会被设置为checkForUpdates，从而实现store更新，最终把更新传递到connect的checkForUpdates</li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://react-redux.js.org/api/provider" target="_blank" rel="noopener">https://react-redux.js.org/api/provider</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/100662731" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/100662731</a></li>
<li><a href="https://www.jianshu.com/p/b039a062e021" target="_blank" rel="noopener">https://www.jianshu.com/p/b039a062e021</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> react </tag>
            
            <tag> react-redux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ECMAScript2020]]></title>
      <url>http://ldllidonglin.github.io/blog/2020/04/25/2020-04-25-ECMAScript2020/</url>
      <content type="html"><![CDATA[<p><a href="http://xiaoxuehua.xyz/blog/2019/07/03/2019-07-03-ECMAScript%E8%A7%84%E8%8C%83%E7%9A%84%E6%9C%80%E6%96%B0%E5%8A%A8%E5%90%91/" target="_blank" rel="noopener">ECMAScript规范的最新动向</a>这个文章一直在更新每次tc39的会议结论，现在ECMAScript2020已经定稿了，顺便总结下ECMAScript2020有哪些新特性。这次比较多，一共有9个提案到了stage4。<br><a id="more"></a></p>
<h2 id="import-meta"><a href="#import-meta" class="headerlink" title="import.meta"></a>import.meta</h2><ul>
<li><a href="https://github.com/tc39/proposal-import-meta" target="_blank" rel="noopener">提案</a></li>
<li><a href="https://docs.google.com/presentation/d/1dXono-H8VjmihAM9bel1RuPvHoSFOqRZ-WprVWUQ3EI/edit#slide=id.p" target="_blank" rel="noopener">slide</a></li>
<li>给模块内部提供一种获取上下文信息的途径<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"module"</span> src=<span class="string">"path/to/hamster-displayer.mjs"</span> data-<span class="built_in">size</span>=<span class="string">"500"</span>&gt;&lt;/script&gt;</span><br><span class="line">(async () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> response = await fetch(<span class="keyword">new</span> URL(<span class="string">"../hamsters.jpg"</span>, <span class="keyword">import</span>.meta.url));</span><br><span class="line">  <span class="keyword">const</span> blob = await response.blob();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="built_in">size</span> = <span class="keyword">import</span>.meta.scriptElement.dataset.<span class="built_in">size</span> || <span class="number">300</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="built_in">image</span> = <span class="keyword">new</span> Image();</span><br><span class="line">  <span class="built_in">image</span>.src = URL.createObjectURL(blob);</span><br><span class="line">  <span class="built_in">image</span>.<span class="built_in">width</span> = <span class="built_in">image</span>.<span class="built_in">height</span> = <span class="built_in">size</span>;</span><br><span class="line"></span><br><span class="line">  document.body.appendChild(<span class="built_in">image</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="for-in-mechanics"><a href="#for-in-mechanics" class="headerlink" title="for-in mechanics"></a>for-in mechanics</h2><ul>
<li><a href="https://github.com/tc39/proposal-for-in-order" target="_blank" rel="noopener">提案</a></li>
<li><a href="https://tc39.es/ecma262/#sec-for-in-iterator-objects" target="_blank" rel="noopener">规范文档</a></li>
<li>规范for-in的迭代顺序</li>
</ul>
<h2 id="Nullish-coalescing-Operator"><a href="#Nullish-coalescing-Operator" class="headerlink" title="Nullish coalescing Operator"></a>Nullish coalescing Operator</h2><ul>
<li><a href="https://github.com/tc39/proposal-nullish-coalescing" target="_blank" rel="noopener">提案</a></li>
<li><a href="https://docs.google.com/presentation/d/1m5nxTH8ifcmOlyaTmTuMAa1bawiGUyKJzQGlw-EVSKM/edit#slide=id.g1c161255c9_0_50" target="_blank" rel="noopener">slide</a></li>
<li>用来解决判断属性值是否为null或者undefined,因为如果用<code>||</code>,那为false的情况也会命中这个逻辑<figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const undefinedValue = response.settings.undefinedValue || <span class="symbol">'some</span> other <span class="keyword">default</span>'; // result: <span class="symbol">'some</span> other <span class="keyword">default</span>'</span><br><span class="line">const nullValue = response.settings.nullValue || <span class="symbol">'some</span> other <span class="keyword">default</span>'; // result: <span class="symbol">'some</span> other <span class="keyword">default</span>'</span><br><span class="line"></span><br><span class="line">const undefinedValue = response.settings.undefinedValue ?? <span class="symbol">'some</span> other <span class="keyword">default</span>'; // result: <span class="symbol">'some</span> other <span class="keyword">default</span>'</span><br><span class="line">const nullValue = response.settings.nullValue ?? <span class="symbol">'some</span> other <span class="keyword">default</span>'; // result: <span class="symbol">'some</span> other <span class="keyword">default</span>'</span><br><span class="line"></span><br><span class="line">// 可以和Optional Chaining结合起来用</span><br><span class="line">const undefinedValue = response?.settings?.undefinedValue ?? <span class="symbol">'some</span> other <span class="keyword">default</span>'; // result: <span class="symbol">'some</span> other <span class="keyword">default</span>'</span><br><span class="line">const nullValue = response?.settings?.nullValue ?? <span class="symbol">'some</span> other <span class="keyword">default</span>'; // result: <span class="symbol">'some</span> other <span class="keyword">default</span>'</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Optional-Chaining"><a href="#Optional-Chaining" class="headerlink" title="Optional Chaining"></a>Optional Chaining</h2><ul>
<li><a href="https://github.com/tc39/proposal-optional-chaining" target="_blank" rel="noopener">提案</a></li>
<li>用来解决判断属性是否存在时，代码容易写的很长<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">var</span> street = user.<span class="literal">info</span> &amp;&amp; user.<span class="literal">info</span>.address &amp;&amp; user.<span class="literal">info</span>.address.street;</span><br><span class="line"><span class="attribute">var</span> street = user.<span class="literal">info</span>?.address?.street;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="globalThis"><a href="#globalThis" class="headerlink" title="globalThis"></a>globalThis</h2><ul>
<li><a href="https://github.com/tc39/proposal-global" target="_blank" rel="noopener">提案</a></li>
<li>统一多环境下this的命名，在之前的提案中，叫global，最终改名叫globalThis。以后想使用this，又想让代码在多个环境兼容，就使用globalThis。</li>
</ul>
<h2 id="Promise-allSettled"><a href="#Promise-allSettled" class="headerlink" title="Promise.allSettled"></a>Promise.allSettled</h2><ul>
<li><a href="https://github.com/tc39/proposal-promise-allSettled" target="_blank" rel="noopener">提案</a></li>
<li><p>因为Promise.all会在有一个reject的时候，就直接reject，并且其他resolve的结果都会丢弃，对于想知道所有结果（无论resolve还是reject）的情况下，就必须重新包装一下，如下代码：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reflect</span>(<span class="params">promise</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> promise.then(</span><br><span class="line">    (v) =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; status: <span class="string">'fulfilled'</span>, value: v &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    (error) =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; status: <span class="string">'rejected'</span>, reason: error &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promises = [ fetch(<span class="string">'index.html'</span>), fetch(<span class="string">'https://does-not-exist/'</span>) ];</span><br><span class="line"><span class="keyword">const</span> results = <span class="keyword">await</span> <span class="built_in">Promise</span>.all(promises.map(reflect));</span><br><span class="line"><span class="keyword">const</span> successfulPromises = results.filter(<span class="function"><span class="params">p</span> =&gt;</span> p.status === <span class="string">'fulfilled'</span>);</span><br></pre></td></tr></table></figure>
<p>而有了allSettled方法后，就不需要这样了，如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promises = [ fetch(<span class="string">'index.html'</span>), fetch(<span class="string">'https://does-not-exist/'</span>) ];</span><br><span class="line"><span class="keyword">const</span> results = <span class="keyword">await</span> <span class="built_in">Promise</span>.allSettled(promises);</span><br><span class="line"><span class="keyword">const</span> successfulPromises = results.filter(<span class="function"><span class="params">p</span> =&gt;</span> p.status === <span class="string">'fulfilled'</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="import"><a href="#import" class="headerlink" title="import()"></a>import()</h2><ul>
<li><a href="https://tc39.es/ecma262/#sec-import-calls" target="_blank" rel="noopener">提案</a></li>
<li>ES2015就写入规范的import，原生提供了静态的、异步的加载模块的方式</li>
<li>import()用来支持动态加载模块，返回一个Promise  <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>('<span class="title">a</span>.<span class="title">js'</span>)</span><br><span class="line">.<span class="keyword">then</span>(myModule =&gt; &#123;</span><br><span class="line">    console.log(myModule.<span class="keyword">default</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="BIGINT"><a href="#BIGINT" class="headerlink" title="BIGINT"></a>BIGINT</h2><ul>
<li><a href="https://tc39.es/ecma262/#sec-bigint-constructor" target="_blank" rel="noopener">提案</a></li>
<li><p>新增一个数值类型：BigInt，用来表示大于2^53和小于-2^53的整数。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">123</span>n === <span class="string">'bigint'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Number和BigInt不能互转</p>
</li>
<li>重载了+ / 等运算符</li>
</ul>
<h2 id="String-prototype-matchAll"><a href="#String-prototype-matchAll" class="headerlink" title="String.prototype.matchAll"></a>String.prototype.matchAll</h2><ul>
<li><a href="https://github.com/tc39/proposal-promise-allSettled" target="_blank" rel="noopener">提案</a></li>
<li><p>返回一个类数组，[[match1],[match2]]</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> text = <span class="string">"2020.01.01 to 2020.04.25"</span>;</span><br><span class="line"><span class="keyword">var</span> regexp = <span class="regexp">/(?&lt;year&gt;\d&#123;4&#125;).(?&lt;month&gt;\d&#123;2&#125;).(?&lt;day&gt;\d&#123;2&#125;)/g</span>;</span><br><span class="line"><span class="keyword">var</span> results = <span class="built_in">Array</span>.from(text.matchAll(regexp));<span class="built_in">console</span>.log(results)</span><br></pre></td></tr></table></figure>
</li>
<li><p>结果<br><img src="matchall.jpg" alt="matchall"></p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> ECMAScript规范 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ECMAScript规范 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[source map原理分析]]></title>
      <url>http://ldllidonglin.github.io/blog/2020/03/22/2020-03-22-source%20map%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>sourcemap文件就是一个记录了压缩后的代码和源代码的映射关系的一个文件，本文将分析其映射原理<br><a id="more"></a></p>
<h2 id="source-map文件结构"><a href="#source-map文件结构" class="headerlink" title="source map文件结构"></a>source map文件结构</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"version"</span> : <span class="number">3</span>,</span><br><span class="line">  <span class="attr">"file"</span>: <span class="string">"out.js"</span>,</span><br><span class="line">  <span class="attr">"sourceRoot"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"sources"</span>: [<span class="string">"foo.js"</span>, <span class="string">"bar.js"</span>],</span><br><span class="line">  <span class="attr">"sourcesContent"</span>: [<span class="literal">null</span>, <span class="literal">null</span>],</span><br><span class="line">  <span class="attr">"names"</span>: [<span class="string">"src"</span>, <span class="string">"maps"</span>, <span class="string">"are"</span>, <span class="string">"fun"</span>],</span><br><span class="line">  <span class="attr">"mappings"</span>: <span class="string">"A,AAAB;;ABCDE;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>version：表示现在是第三个版本</li>
<li>file：表示sourcemap对应的源代码文件名（可选）</li>
<li>sourceRoot：当有sources字段有多个值时，并且都是在同一个远程地址上时，就可以用sourceRoot，避免在sources内重复的写前缀（可选）</li>
<li>sources：mapping内用到的源文件</li>
<li>sourcesContent：当源代码文件不能被访问时，可以将源代码放在这个字段内，是null表示通过names即可映射，不需要源代码了（可选）</li>
<li>names：源代码中的所有符号</li>
<li>mappings：映射代码；通过”,” 分割成段，通过”;”分割行，每段可能有1、4、5个字符；</li>
</ul>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>简单来说，就是通过建立映射关系，把压缩后的代码中各个字符的位置信息和压缩前代码符号的位置关系建立映射，从而在浏览器控制台中可以把源代码展示出来，并且断点调试可以断到正确的地方。</p>
<h3 id="VLQ编码原理"><a href="#VLQ编码原理" class="headerlink" title="VLQ编码原理"></a>VLQ编码原理</h3><p>对于VLQ编码原理可以参考<a href="https://github.com/wayou/wayou.github.io/issues/9" target="_blank" rel="noopener">这篇文章</a></p>
<ul>
<li>base64编码表<br><img src="base64-map.png" alt="base64"></li>
</ul>
<h3 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h3><h4 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h4>  <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 注释 */</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"abc"</span>;</span><br></pre></td></tr></table></figure>
<h4 id="压缩后的代码"><a href="#压缩后的代码" class="headerlink" title="压缩后的代码"></a>压缩后的代码</h4>  <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name=<span class="string">"abc"</span>;</span><br><span class="line"><span class="comment">//# sourceMappingURL=a.js.map</span></span><br></pre></td></tr></table></figure>
<h4 id="对应的source-map"><a href="#对应的source-map" class="headerlink" title="对应的source-map"></a>对应的source-map</h4>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"version"</span>:<span class="number">3</span>,</span><br><span class="line">  <span class="attr">"sources"</span>:[<span class="string">"a.js"</span>],</span><br><span class="line">  <span class="attr">"names"</span>:[<span class="string">"name"</span>],</span><br><span class="line">  <span class="attr">"mappings"</span>:<span class="string">";AACA,IAAIA,KAAO"</span>,</span><br><span class="line">  <span class="attr">"file"</span>:<span class="string">"a.js"</span>,</span><br><span class="line">  <span class="attr">"sourcesContent"</span>:[<span class="string">"/* 注释 */\nvar name = \"abc\";"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="压缩编码过程（位置映射关系）"><a href="#压缩编码过程（位置映射关系）" class="headerlink" title="压缩编码过程（位置映射关系）"></a>压缩编码过程（位置映射关系）</h4><ul>
<li>注意：记录位置时，使用相对位置信息，相对上一个字符的位置信息，这样可以避免数字过大，比如</li>
<li><p>var 是压缩后的0列，对应第0个源文件的1行0列，不需要映射字符，所以可以用0010表示映射关系，0010对其每个数字再、用二进制编码表示就是</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>   <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>    <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>   <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>上面的二进制编码变成用VLQ编码就是</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>  <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>   <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span>   <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>对应的Base64码就是</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">AACA</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>name是在输出结果中的第4列（+4），对应第0（+0）个源文件的第1（+0）行，第4（+4）列，符合映射关系是第0（+0）个字符，所以得到的数字编码就是</p>
<figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">4 </span><span class="number">0</span> <span class="number">0</span> <span class="number">4</span> <span class="number">0</span></span><br><span class="line"><span class="number">4</span>列 <span class="number">0</span>源码 +<span class="number">0</span>行 +<span class="number">4</span>列 第<span class="number">0</span>个字符</span><br></pre></td></tr></table></figure>
<p>二进制-&gt;VLQ编码-&gt;Base64编码</p>
<figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">0100 </span>-&gt; <span class="number">001000</span> -&gt; <span class="number">8</span> -&gt; I</span><br><span class="line"><span class="symbol">0000 </span>-&gt; <span class="number">000000</span> -&gt; <span class="number">0</span> -&gt; A</span><br><span class="line"><span class="symbol">0000 </span>-&gt; <span class="number">000000</span> -&gt; <span class="number">0</span> -&gt; A</span><br><span class="line"><span class="symbol">0100 </span>-&gt; <span class="number">001000</span> -&gt; <span class="number">8</span> -&gt; I</span><br><span class="line"><span class="symbol">0000 </span>-&gt; <span class="number">000000</span> -&gt; <span class="number">0</span> -&gt; A</span><br></pre></td></tr></table></figure>
</li>
<li><p>同理我们可以得到”abc”的位置映射二进制编码是第9列（+5），第0（+0）个源文件，第1行（+0）第11（+7）列，没有符号映射关系，所以得到的数字编码就是：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> <span class="number">0</span> <span class="number">0</span> <span class="number">7</span></span><br><span class="line">+<span class="number">5</span>列 <span class="number">0</span>文件 +<span class="number">0</span>行 + <span class="number">7</span>列</span><br></pre></td></tr></table></figure>
<p>二进制-&gt;VLQ编码-&gt;Base64编码</p>
<figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">0101 </span>-&gt; <span class="number">001010</span> -&gt; <span class="number">10</span> -&gt; K</span><br><span class="line"><span class="symbol">0000 </span>-&gt; <span class="number">000000</span> -&gt; <span class="number">0</span>  -&gt; A</span><br><span class="line"><span class="symbol">0000 </span>-&gt; <span class="number">000000</span> -&gt; <span class="number">0</span>  -&gt; A</span><br><span class="line"><span class="symbol">0111 </span>-&gt; <span class="number">001110</span> -&gt; <span class="number">14</span> -&gt; O</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="来一个复杂示例"><a href="#来一个复杂示例" class="headerlink" title="来一个复杂示例"></a>来一个复杂示例</h3><h4 id="源代码-1"><a href="#源代码-1" class="headerlink" title="源代码"></a>源代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="string">"01234567890123456789"</span>;<span class="keyword">var</span> d=<span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line">a();</span><br></pre></td></tr></table></figure>
<h4 id="压缩后的代码-1"><a href="#压缩后的代码-1" class="headerlink" title="压缩后的代码"></a>压缩后的代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> b=<span class="string">"01234567890123456789"</span>;<span class="keyword">var</span> d=<span class="number">1</span>&#125;a();</span><br></pre></td></tr></table></figure>
<h4 id="对应的source-map-1"><a href="#对应的source-map-1" class="headerlink" title="对应的source map"></a>对应的source map</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"version"</span>:<span class="number">3</span>,</span><br><span class="line">  <span class="attr">"sources"</span>:[<span class="string">"./a.js"</span>],</span><br><span class="line">  <span class="attr">"names"</span>:[<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"d"</span>],</span><br><span class="line">  <span class="attr">"mappings"</span>:<span class="string">"AAAA,SAASA,IACP,IAAIC,EAAI,uBAAuB,IAAIC,EAAE,EAEvCF"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="各个符号的映射关系建立-位置信息-gt-二进制表示-gt-VLQ二进制-gt-BASE64编码"><a href="#各个符号的映射关系建立-位置信息-gt-二进制表示-gt-VLQ二进制-gt-BASE64编码" class="headerlink" title="各个符号的映射关系建立,位置信息 -&gt; 二进制表示 -&gt; VLQ二进制 -&gt; BASE64编码"></a>各个符号的映射关系建立,位置信息 -&gt; 二进制表示 -&gt; VLQ二进制 -&gt; BASE64编码</h4><ul>
<li><p>function</p>
<figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">0 </span>-&gt; <span class="number">0000</span> -&gt; <span class="number">000000</span> -&gt; A</span><br><span class="line"><span class="symbol">0 </span>-&gt; <span class="number">0000</span> -&gt; <span class="number">000000</span> -&gt; A</span><br><span class="line"><span class="symbol">0 </span>-&gt; <span class="number">0000</span> -&gt; <span class="number">000000</span> -&gt; A</span><br><span class="line"><span class="symbol">0 </span>-&gt; <span class="number">0000</span> -&gt; <span class="number">000000</span> -&gt; A</span><br></pre></td></tr></table></figure>
</li>
<li><p>a</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+<span class="number">9</span> -&gt; <span class="number">1001</span> -&gt; <span class="number">010010</span> -&gt; S</span><br><span class="line">+<span class="number">0</span> -&gt; <span class="number">0000</span> -&gt; <span class="number">000000</span> -&gt; A</span><br><span class="line">+<span class="number">0</span> -&gt; <span class="number">0000</span> -&gt; <span class="number">000000</span> -&gt; A</span><br><span class="line">+<span class="number">9</span> -&gt; <span class="number">1001</span> -&gt; <span class="number">010010</span> -&gt; S</span><br><span class="line">+<span class="number">0</span> -&gt; <span class="number">0000</span> -&gt; <span class="number">000000</span> -&gt; A</span><br></pre></td></tr></table></figure>
</li>
<li><p>var</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+<span class="number">4</span> -&gt; <span class="number">0100</span> -&gt; <span class="number">001000</span> -&gt; <span class="number">8</span>  -&gt; I</span><br><span class="line">+<span class="number">0</span> -&gt; <span class="number">0000</span> -&gt; <span class="number">000000</span> -&gt; <span class="number">0</span>  -&gt; A</span><br><span class="line">+<span class="number">1</span> -&gt; <span class="number">0001</span> -&gt; <span class="number">000010</span> -&gt; <span class="number">2</span>  -&gt; C</span><br><span class="line"><span class="number">-7</span> -&gt; <span class="number">0111</span> -&gt; <span class="number">001111</span> -&gt; <span class="number">15</span> -&gt; P</span><br></pre></td></tr></table></figure>
</li>
<li><p>b  </p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+<span class="number">4</span> -&gt; <span class="number">0100</span> -&gt; <span class="number">001000</span> -&gt; <span class="number">8</span> -&gt; I</span><br><span class="line">+<span class="number">0</span> -&gt; <span class="number">0000</span> -&gt; <span class="number">000000</span> -&gt; <span class="number">0</span> -&gt; A</span><br><span class="line">+<span class="number">0</span> -&gt; <span class="number">0000</span> -&gt; <span class="number">000000</span> -&gt; <span class="number">0</span> -&gt; A</span><br><span class="line">+<span class="number">4</span> -&gt; <span class="number">0100</span> -&gt; <span class="number">001000</span> -&gt; <span class="number">8</span> -&gt; I</span><br><span class="line">+<span class="number">1</span> -&gt; <span class="number">0001</span> -&gt; <span class="number">000010</span> -&gt; <span class="number">2</span> -&gt; C</span><br></pre></td></tr></table></figure>
</li>
<li><p>“01234567890123456789”</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+<span class="number">2</span> -&gt; <span class="number">0010</span> -&gt; <span class="number">000100</span> -&gt; <span class="number">4</span> -&gt; E</span><br><span class="line">+<span class="number">0</span> -&gt; <span class="number">0000</span> -&gt; <span class="number">000000</span> -&gt; <span class="number">0</span> -&gt; A</span><br><span class="line">+<span class="number">0</span> -&gt; <span class="number">0000</span> -&gt; <span class="number">000000</span> -&gt; <span class="number">0</span> -&gt; A</span><br><span class="line">+<span class="number">4</span> -&gt; <span class="number">0100</span> -&gt; <span class="number">001000</span> -&gt; <span class="number">8</span> -&gt; I</span><br></pre></td></tr></table></figure>
</li>
<li><p>var</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+<span class="number">23</span> -&gt; <span class="number">10111</span> -&gt; <span class="number">101110</span> <span class="number">000001</span> -&gt; <span class="number">46</span> <span class="number">1</span> -&gt; uB</span><br><span class="line">+<span class="number">0</span>  -&gt; <span class="number">0000</span>  -&gt; <span class="number">000000</span>        -&gt; <span class="number">0</span>    -&gt; A</span><br><span class="line">+<span class="number">0</span>  -&gt; <span class="number">0000</span>  -&gt; <span class="number">000000</span>        -&gt; <span class="number">0</span>    -&gt; A</span><br><span class="line">+<span class="number">23</span> -&gt; <span class="number">10111</span> -&gt; <span class="number">101110</span> <span class="number">000001</span> -&gt; <span class="number">46</span> <span class="number">1</span> -&gt; uB</span><br></pre></td></tr></table></figure>
</li>
<li><p>d</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+<span class="number">4</span> -&gt; <span class="number">0100</span> -&gt; <span class="number">001000</span> -&gt; <span class="number">8</span> -&gt; I</span><br><span class="line">+<span class="number">0</span> -&gt; <span class="number">0000</span> -&gt; <span class="number">000000</span> -&gt; <span class="number">0</span> -&gt; A</span><br><span class="line">+<span class="number">0</span> -&gt; <span class="number">0000</span> -&gt; <span class="number">000000</span> -&gt; <span class="number">0</span> -&gt; A</span><br><span class="line">+<span class="number">4</span> -&gt; <span class="number">0100</span> -&gt; <span class="number">001000</span> -&gt; <span class="number">8</span> -&gt; I</span><br><span class="line">+<span class="number">1</span> -&gt; <span class="number">0001</span> -&gt; <span class="number">000010</span> -&gt; <span class="number">2</span> -&gt; C</span><br></pre></td></tr></table></figure>
</li>
<li><p>1</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+<span class="number">2</span> -&gt; <span class="number">0010</span> -&gt; <span class="number">000100</span> -&gt; <span class="number">4</span> -&gt; E</span><br><span class="line">+<span class="number">0</span> -&gt; <span class="number">0000</span> -&gt; <span class="number">000000</span> -&gt; <span class="number">0</span> -&gt; A</span><br><span class="line">+<span class="number">0</span> -&gt; <span class="number">0000</span> -&gt; <span class="number">000000</span> -&gt; <span class="number">0</span> -&gt; A</span><br><span class="line">+<span class="number">2</span> -&gt; <span class="number">0010</span> -&gt; <span class="number">000100</span> -&gt; <span class="number">4</span> -&gt; E</span><br></pre></td></tr></table></figure>
</li>
<li><p>a</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+<span class="number">2</span>  -&gt; <span class="number">0010</span>   -&gt; <span class="number">000100</span>         -&gt; <span class="number">4</span>     -&gt; E</span><br><span class="line">+<span class="number">0</span>  -&gt; <span class="number">0000</span>   -&gt; <span class="number">000000</span>         -&gt; <span class="number">0</span>     -&gt; A</span><br><span class="line">+<span class="number">2</span>  -&gt; <span class="number">0010</span>   -&gt; <span class="number">000100</span>         -&gt; <span class="number">4</span>     -&gt; E</span><br><span class="line"><span class="number">-39</span> -&gt; <span class="number">100111</span> -&gt; <span class="number">101111</span> <span class="number">000010</span>  -&gt; <span class="number">47</span> <span class="number">2</span>  -&gt; vC</span><br><span class="line"><span class="number">-2</span>  -&gt; <span class="number">0010</span>   -&gt; <span class="number">000101</span>         -&gt; <span class="number">5</span>     -&gt; F</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://github.com/wayou/wayou.github.io/issues/9" target="_blank" rel="noopener">source map 的原理探究</a><br><a href="https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.1ce2c87bpj24" target="_blank" rel="noopener">source map 规范</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> sourcemap </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【译】如何阅读ECMAScript规范(一)]]></title>
      <url>http://ldllidonglin.github.io/blog/2020/03/10/2020-03-10-%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BBECMAScript%E8%A7%84%E8%8C%83(%E4%B8%80)/</url>
      <content type="html"><![CDATA[<p>这篇文章中，用规范中一个简单的方法来理解规范。<a href="https://v8.dev/blog/understanding-ecmascript-part-1" target="_blank" rel="noopener">原文链接</a><br><a id="more"></a></p>
<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>即使你了解JavaScript，但是阅读它的语言规范<a href="https://tc39.es/ecma262/" target="_blank" rel="noopener">ECMAScript Language specification</a>也是让人望而生畏。至少这是我第一次阅读它的感受。</p>
<p>让我们以一个实际的例子来理解这个规范。接下来将以<code>Object.prototype.hasOwnProperty:</code>这个函数的用法作为代码示例<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123; <span class="attr">foo</span>: <span class="number">1</span> &#125;;</span><br><span class="line">o.hasOwnProperty(<span class="string">'foo'</span>); <span class="comment">// true</span></span><br><span class="line">o.hasOwnProperty(<span class="string">'bar'</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p>
<p>在这个示例中，<code>o</code>并没有一个属性叫<code>hasOwnProperty</code>,所以我们顺着原型链往上找，最终在<code>o</code>的原型上找到了，也就是<code>Object.prototype</code><br>在规范中，使用了伪代码的形式来描述<code>Object.prototype.hasOwnProperty</code>是如何工作的</p>
<blockquote>
<h3 id="Object-prototype-hasOwnProperty-V"><a href="#Object-prototype-hasOwnProperty-V" class="headerlink" title="Object.prototype.hasOwnProperty(V)"></a>Object.prototype.hasOwnProperty(V)</h3><p>When the hasOwnProperty method is called with argument V, the following steps are taken:</p>
<blockquote>
<p>Let P be ? ToPropertyKey(V).<br>Let O be ? ToObject(this value).<br>Return ? HasOwnProperty(O, P).</p>
</blockquote>
</blockquote>
<p>和下面这些</p>
<blockquote>
<h3 id="HasOwnProperty-O-P"><a href="#HasOwnProperty-O-P" class="headerlink" title="HasOwnProperty(O, P)"></a>HasOwnProperty(O, P)</h3><p>The abstract operation HasOwnProperty is used to determine whether an object has an own property with the specified property key. A Boolean value is returned. The operation is called with arguments O and P where O is the object and P is the property key. This abstract operation performs the following steps:</p>
</blockquote>
<blockquote>
<blockquote>
<p>Assert: Type(O) is Object.<br>Assert: IsPropertyKey(P) is true.<br>Let desc be ? O.<a href="P">[GetOwnProperty]</a>.<br>If desc is undefined, return false.<br>Return true.</p>
</blockquote>
</blockquote>
<p>但是什么是“abstract operation”？伪代码中的<code>[[]]</code>又是啥？为什么在方法调用前面有一个<code>?</code>，一堆的<code>Assert</code>的又是啥意思？</p>
<p>请听我慢慢道来</p>
<h2 id="语言类型和规范类型"><a href="#语言类型和规范类型" class="headerlink" title="语言类型和规范类型"></a>语言类型和规范类型</h2><p>我们先从看着眼熟的东西开始，规范中会使用一些例如undefined、 true、 false的值。我们在JavaScript中就已经知道这些了值是什么意思了。他们都是<code>语言值</code>，也就是<a href="https://tc39.es/ecma262/#sec-ecmascript-language-types" target="_blank" rel="noopener">语言类型</a>的值。在规范中我们也同样定了这些值</p>
<p>规范内部会使用一些<code>语言值</code>。比如一个内置数据类型可能包含一个字段，其字段的值可能是true或false。与之不同的是，JavaScript引擎内部是不会使用这些值的。比如如果JavaScript引擎是用C++写的，那它将会用C++的true或false（并且不是JavaScript的true或false在内部的代表）。</p>
<p>除了语言类型之外，规范还使用规范类型，这些类型只出现在规范中，而不是JavaScript语言中。JavaScript引擎不需要（但可以自由）实现它们。在本文中，我们将了解规范类型 <code>Record</code>（及其子类型<code>Completion Record</code>）。</p>
<h2 id="Abstract-operations"><a href="#Abstract-operations" class="headerlink" title="Abstract operations"></a>Abstract operations</h2><p><a href="https://tc39.es/ecma262/#sec-abstract-operations" target="_blank" rel="noopener">抽象操作</a>是在ECMAScript规范中定义的函数；它们的定义是为了简洁地编写规范。JavaScript引擎不必将它们作为单独的函数在引擎中实现。不能直接从JavaScript调用它们。</p>
<h2 id="内部插槽和内部方法"><a href="#内部插槽和内部方法" class="headerlink" title="内部插槽和内部方法"></a>内部插槽和内部方法</h2><p>在<code>[[]]</code>中的那些方法和属性就是内部插槽和内部方法了。</p>
<p>内部插槽是JavaScript对象或规范类型的数据成员。它们用于存储对象的状态。内部方法是JavaScript对象的成员函数。</p>
<p>例如，每个JavaScript对象都有一个内部插槽[[Prototype]]和一个内部方法[[GetOwnProperty]]。</p>
<p>无法从JavaScript中访问内部插槽和方法。例如，您不能访问<code>o.[[Prototype]]</code>或调用<code>o.[[GetOwnProperty]]（）</code>。JavaScript引擎可以实现它们供自己内部使用，但不必这样做。</p>
<p>有时内部方法委托给类似命名的抽象操作，例如在普通对象的<code>[[GetOwnProperty]]</code>内部方法：</p>
<blockquote>
<h3 id="GetOwnProperty"><a href="#GetOwnProperty" class="headerlink" title="[GetOwnProperty]"></a><a href="P">[GetOwnProperty]</a></h3><p>When the [[GetOwnProperty]] internal method of O is called with property key P, the following steps are taken:</p>
<blockquote>
<p>Return ! OrdinaryGetOwnProperty(O, P).</p>
</blockquote>
</blockquote>
<p>（我们将在下一章中了解感叹号的含义。）</p>
<p><code>OrdinaryGetOwnProperty</code>不是内部方法，因为它与任何对象都没有关联；相反，它操作的对象作为参数传递。</p>
<p>OrdinaryGetOwnProperty被称为“Ordinary”，因为它对普通（Ordinary）对象进行操作。ECMAScript对象可以是Ordinary的，也可以是exotic的。普通对象必须具有一组称为基本内部方法的方法的默认行为。如果一个对象偏离了默认行为，那就是异国情调。</p>
<p>最著名的exotic对象是数组，因为它的length属性以非默认方式运行：设置length属性可以从数组中移除元素。</p>
<p>基本的内部方法是<a href="https://tc39.es/ecma262/#table-5" target="_blank" rel="noopener">这里</a>列出的方法。</p>
<h2 id="Completion-records"><a href="#Completion-records" class="headerlink" title="Completion records"></a>Completion records</h2><p>问号和感叹号呢？要了解它们，我们需要查看<a href="https://tc39.es/ecma262/#sec-completion-record-specification-type" target="_blank" rel="noopener">Completion records</a>！</p>
<p><code>Completion Record</code> 是规范类型（仅为规范目的定义）。JavaScript引擎不必有相应的内部数据类型。</p>
<p><code>Completion Record</code>是一个<code>Record</code>-一种数据类型，它有一组固定的命名字段。完成记录有三个字段：<br>|名称|解释|<br>|—|—|<br>|[[Type]]|normal, break, continue, return, throw 其中之一，除了normal，其他的都是abrupt completions|<br>|[[Value]]|完成时生成的值，例如，函数的返回值或异常（如果抛出）|<br>|[[Target]]|用于标记控制目标(和本文无无关).|</p>
<p>每个抽象操作都隐式返回一个完成记录。即使它看起来像一个抽象操作会返回一个简单的类型，比如Boolean，它也被隐式地包装到一个类型为normal的完成记录中（参见<a href="https://tc39.es/ecma262/#sec-implicit-completion-values" target="_blank" rel="noopener">隐式完成值</a>）。</p>
<ul>
<li><p>注1：规范在这方面并不完全一致；有些helper函数返回裸值，其返回值按原样使用，而没有从完成记录中提取值。通常从上下文中是能看懂的。</p>
</li>
<li><p>注2：规范的编辑们正在努力使完成记录处理更加明确。</p>
</li>
</ul>
<p>如果一个算法抛出一个异常，它意味着返回一个带有<code>[[Type]] throw</code>的完成记录，该记录的<code>[[Value]]</code>是异常对象。现在我们先忽略break、continue和return类型。</p>
<p><a href="https://tc39.es/ecma262/#sec-returnifabrupt" target="_blank" rel="noopener">ReturnIfAbrupt(argument)</a>意味着执行下面的步骤:</p>
<blockquote>
<p>如果argument是异常，返回argument<br>argument.[[Value]] 值为 arguemnt</p>
</blockquote>
<p>也就是说，我们检查一个完成记录；如果是一个突然的完成，我们会立即返回。否则，我们从完成记录中提取值。</p>
<p>ReturnIfAbrupt可能看起来像函数调用，但它不是。它导致ReturnIfAbrupt（）发生的函数返回，而不是ReturnIfAbrupt函数本身。它的行为更像是C语言中的宏。</p>
<p>ReturnIfAbrupt可以这样使用：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">1</span>. <span class="selector-tag">Let</span> <span class="selector-tag">obj</span> <span class="selector-tag">be</span> <span class="selector-tag">Foo</span>(). (obj is a Completion Record.)</span><br><span class="line"><span class="selector-tag">2</span>. <span class="selector-tag">ReturnIfAbrupt</span>(obj).</span><br><span class="line"><span class="selector-tag">3</span>. <span class="selector-tag">Bar</span>(obj). (If we’re still here, obj is the value extracted from the Completion Record.)</span><br></pre></td></tr></table></figure></p>
<p>现在问号开始起作用了：<code>？Foo（）</code>等同于<code>ReturnIfAbrupt（Foo（））</code>。使用简单写法：我们不需要每次都显式地编写错误处理代码。</p>
<p>类似的， <code>Let val be ! Foo()</code>和下面的意思一样:<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">Let</span> <span class="keyword">val</span> be Foo().</span><br><span class="line"><span class="number">2.</span> Assert: <span class="keyword">val</span> is <span class="keyword">not</span> an abrupt completion.</span><br><span class="line"><span class="number">3.</span> Set <span class="keyword">val</span> <span class="keyword">to</span> <span class="keyword">val</span>.[[Value]].</span><br></pre></td></tr></table></figure></p>
<p>利用这个，我们可以重写<code>Object.prototype.hasOwnProperty</code>为<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Object.prototype.hasOwnProperty(P)</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>Let P be ToPropertyKey(V).</span><br><span class="line"><span class="number">2.</span>If P is an abrupt completion, <span class="keyword">return</span> P</span><br><span class="line"><span class="number">3.</span>Set P to P.<span class="string">[[Value]]</span></span><br><span class="line"><span class="number">4.</span>Let O be ToObject(this value).</span><br><span class="line"><span class="number">5.</span>If O is an abrupt completion, <span class="keyword">return</span> O</span><br><span class="line"><span class="number">6.</span>Set O to O.<span class="string">[[Value]]</span></span><br><span class="line"><span class="number">7.</span>Let temp be HasOwnProperty(O, P).</span><br><span class="line"><span class="number">8.</span>If temp is an abrupt completion, <span class="keyword">return</span> temp</span><br><span class="line"><span class="number">9.</span>Let temp be temp.<span class="string">[[Value]]</span></span><br><span class="line"><span class="number">10.</span>Return NormalCompletion(temp)</span><br></pre></td></tr></table></figure></p>
<p>并且，我们可以把<code>HasOwnProperty</code>重写为：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HasOwnProperty(O, P)</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> Assert: Type(O) is Object.</span><br><span class="line"><span class="number">2.</span>Assert: IsPropertyKey(P) is <span class="literal">true</span>.</span><br><span class="line"><span class="number">3.</span>Let desc be O.<span class="string">[[GetOwnProperty]]</span>(P).</span><br><span class="line"><span class="number">4.</span>If desc is an abrupt completion, <span class="keyword">return</span> desc</span><br><span class="line"><span class="number">5.</span>Set desc to desc.<span class="string">[[Value]]</span></span><br><span class="line"><span class="number">6.</span>If desc is undefined, <span class="keyword">return</span> NormalCompletion(<span class="literal">false</span>).</span><br><span class="line"><span class="number">7.</span>Return NormalCompletion(<span class="literal">true</span>).</span><br></pre></td></tr></table></figure></p>
<p>我们也可以重写 [[GetOwnProperty]] 这个内部方法而不是用！<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">O.<span class="string">[[GetOwnProperty]]</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> Let temp be OrdinaryGetOwnProperty(O, P).</span><br><span class="line"><span class="number">2</span> .Assert: temp is <span class="keyword">not</span> an abrupt completion.</span><br><span class="line"><span class="number">3</span> .Let temp be temp.<span class="string">[[Value]]</span>.</span><br><span class="line"><span class="number">4</span> .Return NormalCompletion(temp).</span><br></pre></td></tr></table></figure></p>
<p>这里我们假设temp是一个全新的临时变量，它不会与任何其他变量冲突。</p>
<p>我们还使用了这样的知识：当返回语句返回的不是完成记录时，它隐式地包装在NormalCompletion中。</p>
<h3 id="提示-Return-Foo"><a href="#提示-Return-Foo" class="headerlink" title="提示: Return ? Foo()"></a>提示: Return ? Foo()</h3><p>规范使用了返回符号？Foo（）-为什么要打问号？</p>
<p><code>return？Foo（）</code>可以扩展为：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> Let temp be Foo().</span><br><span class="line"><span class="number">2.</span> If temp is an abrupt completion, <span class="keyword">return</span> temp.</span><br><span class="line"><span class="number">3.</span> Set temp to temp.<span class="string">[[Value]]</span>.</span><br><span class="line"><span class="number">4.</span> Return NormalCompletion(temp).</span><br></pre></td></tr></table></figure></p>
<p>这与<code>Return Foo（）</code>相同；对于突然完成和正常完成，它的行为都是相同的。</p>
<p><code>Return Foo（）</code>仅仅是因为编辑需要，以使<code>Foo</code>返回<code>Completion Record</code>更加明确。</p>
<h2 id="Asserts"><a href="#Asserts" class="headerlink" title="Asserts"></a>Asserts</h2><p>在规范中断言算法的不变条件。添加它们是为了更加清楚的描述算法，但不向实现中添加任何要求—实现不需要检查它们。</p>
<h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>我们已经建立了阅读规范中的简单方法（如Object.prototype.hasOwnProperty）和抽象操作（如hasOwnProperty）所需的方法。这个抽象操作仍然委托给其他抽象操作，但基于这篇博客文章，我们应该能够弄清楚它们做了什么。我们将遇到属性描述符，这只是另一种规范类型。</p>
<h2 id="有用的链接"><a href="#有用的链接" class="headerlink" title="有用的链接"></a>有用的链接</h2><p><a href="https://timothygu.me/es-howto/" target="_blank" rel="noopener">How to Read the ECMAScript Specification</a>: 从一个稍微不同的角度介绍本篇文章中所涉及的大部分内容的教程</p>
]]></content>
      
        <categories>
            
            <category> ECMAScript规范 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ECMAScript规范 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript中的AST]]></title>
      <url>http://ldllidonglin.github.io/blog/2019/12/08/2019-12-08-JavaScript%E4%B8%AD%E7%9A%84AST/</url>
      <content type="html"><![CDATA[<p>介绍在JavaScript中，涉及到操作AST时的一些工具<br><a id="more"></a></p>
<h2 id="esprima"><a href="#esprima" class="headerlink" title="esprima"></a>esprima</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul>
<li><a href="https://esprima.org/" target="_blank" rel="noopener">esprima</a>是比较早的一个parser,高性能，符合标准，支持es7</li>
<li>只支持解析JavaScript代码，不支持ts，flow</li>
<li>parseModule支持parse一个es的module</li>
<li>parseScript(‘var el= <title>${product}</title>‘, { jsx: true }); 可以支持解析jsx，但是没办法parse一个含有jsx的module</li>
<li><a href="https://esprima.readthedocs.io/en/4.0/syntax-tree-format.html" target="_blank" rel="noopener">ast format</a>,从<a href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Parser_API" target="_blank" rel="noopener">Mozilla Parser API,</a>继承而来，并且最终扩展为<a href="https://github.com/estree/estree" target="_blank" rel="noopener">ESTree format</a></li>
</ul>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> esprima = <span class="built_in">require</span>(<span class="string">'esprima'</span>);</span><br><span class="line"><span class="keyword">const</span> program = <span class="string">'const answer = 42'</span>;</span><br><span class="line">esprima.tokenize(program);</span><br><span class="line"><span class="comment">// [ &#123; type: 'Keyword', value: 'const' &#125;,</span></span><br><span class="line"><span class="comment">//   &#123; type: 'Identifier', value: 'answer' &#125;,</span></span><br><span class="line"><span class="comment">//   &#123; type: 'Punctuator', value: '=' &#125;,</span></span><br><span class="line"><span class="comment">//   &#123; type: 'Numeric', value: '42' &#125; ]</span></span><br><span class="line">esprima.parse(program);</span><br><span class="line"><span class="comment">// &#123; type: 'Program',</span></span><br><span class="line"><span class="comment">//   body:</span></span><br><span class="line"><span class="comment">//    [ &#123; type: 'VariableDeclaration',</span></span><br><span class="line"><span class="comment">//        declarations: [Object],</span></span><br><span class="line"><span class="comment">//        kind: 'const' &#125; ],</span></span><br><span class="line"><span class="comment">//   sourceType: 'script' &#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="acorn"><a href="#acorn" class="headerlink" title="acorn"></a>acorn</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><ul>
<li><a href="https://github.com/acornjs/acorn" target="_blank" rel="noopener">acorn</a>: A tiny, fast JavaScript parser, written completely in JavaScript</li>
<li>支持插件扩展，所以可以基于acorn，扩展出解析各种JavaScript代码</li>
<li><a href="https://github.com/acornjs/acorn/tree/master/acorn-walk" target="_blank" rel="noopener">acorn-walk</a>用来遍历ast的node</li>
<li>AST格式是 ESTree format</li>
</ul>
<h2 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;Parser&#125; = <span class="built_in">require</span>(<span class="string">"acorn"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MyParser = Parser.extend(</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">"acorn-jsx"</span>)(),</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">"acorn-bigint"</span>)</span><br><span class="line">)</span><br><span class="line"><span class="built_in">console</span>.log(MyParser.parse(<span class="string">"// Some bigint + JSX code"</span>))</span><br></pre></td></tr></table></figure>
<h2 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h2><h3 id="parser"><a href="#parser" class="headerlink" title="parser"></a>parser</h3><ul>
<li><a href="https://babeljs.io/docs/en/babel-parser" target="_blank" rel="noopener">babel/parser</a>,以前叫Babylon，底层依赖acorn,jsx的支持是也是用的<a href="https://github.com/acornjs/acorn-jsx" target="_blank" rel="noopener">acorn的插件acorn-jsx</a></li>
<li>使用插件的方式，支持最新的es语法以及jsx,flow,ts，<a href="https://babeljs.io/docs/en/babel-parser#plugins" target="_blank" rel="noopener">所有插件</a></li>
<li><a href="https://github.com/babel/babylon/blob/master/ast/spec.md" target="_blank" rel="noopener">ast format</a>是基于ESTree改的。如果要使用estree格式，plugins中传入<code>estree</code>即可，差异有以下一些<br><img src="./estree-babel.jpg" alt="estree"></li>
<li><p><a href="https://github.com/facebook/jsx/blob/master/AST.md" target="_blank" rel="noopener">jsx format</a>是另一种格式</p>
</li>
<li><p>示例代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"@babel/parser"</span>).parse(<span class="string">"code"</span>, &#123;</span><br><span class="line">  <span class="comment">// parse in strict mode and allow module declarations</span></span><br><span class="line">  sourceType: <span class="string">"module"</span>,</span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// enable jsx and flow syntax</span></span><br><span class="line">    <span class="string">"jsx"</span>,</span><br><span class="line">    <span class="string">"flow"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="traverse"><a href="#traverse" class="headerlink" title="traverse"></a>traverse</h3><ul>
<li>配合parser生成的ast，遍历,对ast进行增删改操作</li>
<li>示例代码<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> parser <span class="keyword">from</span> <span class="string">"@babel/parser"</span>;</span><br><span class="line"><span class="keyword">import</span> traverse <span class="keyword">from</span> <span class="string">"@babel/traverse"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> code = <span class="string">`function square(n) &#123;</span></span><br><span class="line"><span class="string">  return n * n;</span></span><br><span class="line"><span class="string">&#125;`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ast = parser.parse(code);</span><br><span class="line"></span><br><span class="line">traverse(ast, &#123;</span><br><span class="line">  enter(path) &#123;</span><br><span class="line">    <span class="keyword">if</span> (path.isIdentifier(&#123; <span class="attr">name</span>: <span class="string">"n"</span> &#125;)) &#123;</span><br><span class="line">      path.node.name = <span class="string">"x"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="generator"><a href="#generator" class="headerlink" title="generator"></a>generator</h3><ul>
<li>按照一定的规则输出代码，所以重新输出的代码和源代码相比，格式会变化比较大。</li>
<li>示例<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;parse&#125; <span class="keyword">from</span> <span class="string">'@babel/parser'</span>;</span><br><span class="line"><span class="keyword">import</span> generate <span class="keyword">from</span> <span class="string">'@babel/generator'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="string">`function handler() &#123;</span></span><br><span class="line"><span class="string">  var a = "1";</span></span><br><span class="line"><span class="string">  var b = &#123;</span></span><br><span class="line"><span class="string">    a: '1'</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;`</span>;</span><br><span class="line"><span class="keyword">const</span> ast = parse(a);</span><br><span class="line"><span class="keyword">const</span> &#123; code, map &#125; = generate(ast);</span><br><span class="line"><span class="comment">// function handler() &#123;</span></span><br><span class="line"><span class="comment">//  var a = "1";</span></span><br><span class="line"><span class="comment">//  var b = &#123;</span></span><br><span class="line"><span class="comment">//    a: '1' &#125;;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="recast"><a href="#recast" class="headerlink" title="recast"></a>recast</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><ul>
<li><p>一大特色就是在print的时候会尽量的保持源代码的格式，输出时只会重新输出有修改的ast，未更改过的ast，会直接按原样输出。所以非常适合那些需要修改源码，并且要把修改后的结果覆写到源码的情况。但是前提是需要使用recast的parser，不要在print的时候使用一个用别的工具parse出来的ast。就算不是默认的parser，也可以这么用</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> acornAst = <span class="keyword">recast</span>.<span class="keyword">parse</span>(source, &#123;</span><br><span class="line">  parser: require(<span class="string">"acorn"</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="https://github.com/benjamn/recast" target="_blank" rel="noopener">recast</a> 默认使用esprima作为parser,支持传入自定义parser，比如babel/parser，recast也提供了便捷的方式来使用其他parser，<a href="https://github.com/benjamn/recast/tree/master/parsers" target="_blank" rel="noopener">所有parser地址</a>。要使用其他parser，需自己安装对应的parser包，安装recast时只会自动安装默认的exprima</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tsAst = <span class="keyword">recast</span>.<span class="keyword">parse</span>(source, &#123;</span><br><span class="line">  parser: require(<span class="string">"recast/parsers/typescript"</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>print支持<a href="https://github.com/benjamn/recast/blob/master/lib/options.ts#L167" target="_blank" rel="noopener">格式化参数</a>，比如单双引号，换行符之类的。</p>
</li>
<li>使用<a href="https://github.com/benjamn/ast-types" target="_blank" rel="noopener">ast-types</a>作为ast的格式，这个是继承自Mozilla Parser API，但是兼容esprima的</li>
<li>因为默认的esprima不支持jsx，所以在react项目中，就需要使用babel的parser<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ast = <span class="keyword">recast</span>.<span class="keyword">parse</span>(code, &#123;</span><br><span class="line">  parser: require(<span class="string">"recast/parsers/babel"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> recast <span class="keyword">from</span> <span class="string">"recast"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Let's turn this function declaration into a variable declaration.</span></span><br><span class="line"><span class="keyword">const</span> code = [</span><br><span class="line">  <span class="string">"function add(a, b) &#123;"</span>,</span><br><span class="line">  <span class="string">"  return a +"</span>,</span><br><span class="line">  <span class="string">"    // Weird formatting, huh?"</span>,</span><br><span class="line">  <span class="string">"    b;"</span>,</span><br><span class="line">  <span class="string">"&#125;"</span></span><br><span class="line">].join(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Parse the code using an interface similar to require("esprima").parse.</span></span><br><span class="line"><span class="keyword">const</span> ast = recast.parse(code);</span><br><span class="line"><span class="keyword">const</span> output = recast.print(ast).code;</span><br></pre></td></tr></table></figure>
<h2 id="jscodeshift"><a href="#jscodeshift" class="headerlink" title="jscodeshift"></a>jscodeshift</h2><h3 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h3><ul>
<li><p><a href="https://github.com/facebook/jscodeshift" target="_blank" rel="noopener">jscodeshift</a>是facebook开源的一个JavaScript codemod toolkit。提供了大量的便捷方法去操作ast</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// inside a module transform</span></span><br><span class="line"><span class="keyword">var</span> j = jscodeshift;</span><br><span class="line"><span class="comment">// foo(bar);</span></span><br><span class="line"><span class="keyword">var</span> ast = j.callExpression(</span><br><span class="line">  j.identifier(<span class="string">'foo'</span>),</span><br><span class="line">  [j.identifier(<span class="string">'bar'</span>)]</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p>底层依赖recast，并且默认使用babel/parser传递给recast，并且使用了jsx的plugin，所以支持react的jsx代码,<a href="https://github.com/facebook/jscodeshift/blob/master/parser/babel5Compat.js#L11" target="_blank" rel="noopener">源代码实现</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> babylon = <span class="built_in">require</span>(<span class="string">'@babel/parser'</span>);</span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  sourceType: <span class="string">'module'</span>,</span><br><span class="line">  allowHashBang: <span class="literal">true</span>,</span><br><span class="line">  ecmaVersion: <span class="literal">Infinity</span>,</span><br><span class="line">  allowImportExportEverywhere: <span class="literal">true</span>,</span><br><span class="line">  allowReturnOutsideFunction: <span class="literal">true</span>,</span><br><span class="line">  startLine: <span class="number">1</span>,</span><br><span class="line">  tokens: <span class="literal">true</span>,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="string">'estree'</span>,</span><br><span class="line">    <span class="string">'jsx'</span>,</span><br><span class="line">    <span class="string">'asyncGenerators'</span>,</span><br><span class="line">    <span class="string">'classProperties'</span>,</span><br><span class="line">    <span class="string">'doExpressions'</span>,</span><br><span class="line">    <span class="string">'exportExtensions'</span>,</span><br><span class="line">    <span class="string">'functionBind'</span>,</span><br><span class="line">    <span class="string">'functionSent'</span>,</span><br><span class="line">    <span class="string">'objectRestSpread'</span>,</span><br><span class="line">    <span class="string">'dynamicImport'</span>,</span><br><span class="line">    <span class="string">'nullishCoalescingOperator'</span>,</span><br><span class="line">    <span class="string">'optionalChaining'</span>,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>toSource方法使用的是recast的print</p>
</li>
<li>把recast.types.namedTypes，recast.types.builders下的所有属性都挂在实例上了，便于取用。</li>
</ul>
<h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> j = <span class="built_in">require</span>(<span class="string">'jscodeshift'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = j(code).findJSXElements().forEach(<span class="function"><span class="params">path</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;).toSource()</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://astexplorer.net/" target="_blank" rel="noopener">astexplorer–在线源码和ast对比</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> AST </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ECMAScript2016规范理解（10）- 函数，方法、类]]></title>
      <url>http://ldllidonglin.github.io/blog/2019/11/05/2019-11-05-ECMAScript2016%E8%A7%84%E8%8C%83%E7%90%86%E8%A7%A3%EF%BC%8810%EF%BC%89-%20%E5%87%BD%E6%95%B0%EF%BC%8C%E6%96%B9%E6%B3%95%E3%80%81%E7%B1%BB/</url>
      <content type="html"><![CDATA[<p>函数、方法、类在规范中的定义理解<br><a id="more"></a></p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>目前在规范中规定一共有6种函数：</p>
<ul>
<li><a href="https://tc39.es/ecma262/#sec-function-definitions" target="_blank" rel="noopener">普通函数</a></li>
<li><a href="https://tc39.es/ecma262/#sec-arrow-function-definitions" target="_blank" rel="noopener">箭头函数</a></li>
<li><a href="https://tc39.es/ecma262/#sec-async-function-definitions" target="_blank" rel="noopener">Aysnc Function</a></li>
<li><a href="https://tc39.es/ecma262/#sec-async-arrow-function-definitions" target="_blank" rel="noopener">Async Arrow Function</a></li>
<li><a href="https://tc39.es/ecma262/#sec-generator-function-definitions" target="_blank" rel="noopener">Generator Function</a></li>
<li><a href="https://tc39.es/ecma262/#sec-async-generator-function-definitions" target="_blank" rel="noopener">Async Generator Function</a></li>
</ul>
<h3 id="创建函数"><a href="#创建函数" class="headerlink" title="创建函数"></a>创建函数</h3><ul>
<li>创建函数一共有三种方式：函数声明、函数表达式、Function构造函数</li>
<li><a href="https://tc39.es/ecma262/#sec-function-definitions" target="_blank" rel="noopener">函数声明</a>和<a href="https://tc39.es/ecma262/#prod-FunctionExpression" target="_blank" rel="noopener">函数表达式</a>在语法上的区别就是，函数表达式中的函数名是可选的。在实际使用中需要注意使用函数表达式创建的函数不会有”变量提升“，即必须在使用前声明</li>
<li>函数声明提升的几种情况:函数表达式,块级函数</li>
</ul>
<h4 id="ECMAScript中规定的创建函数的算法"><a href="#ECMAScript中规定的创建函数的算法" class="headerlink" title="ECMAScript中规定的创建函数的算法"></a>ECMAScript中规定的创建函数的算法</h4><ul>
<li><a href="https://tc39.es/ecma262/#sec-function-definitions-runtime-semantics-evaluation" target="_blank" rel="noopener">普通函数</a><ul>
<li>FunctionCreate(Normal, FormalParameters, FunctionBody, funcEnv).</li>
<li>MakeConstructor(closure).</li>
</ul>
</li>
<li><a href="https://tc39.es/ecma262/#sec-arrow-function-definitions-runtime-semantics-evaluation" target="_blank" rel="noopener">箭头函数</a><ul>
<li>FunctionCreate(Arrow, FormalParameters, FunctionBody, funcEnv).</li>
</ul>
</li>
<li>都是通过 FunctionCreate 过程实现函数创建，但是箭头函数不会执行MakeConstructor，所以箭头函数不能用作构造函数,并且prototype属性是在MakeConstructor里定义的，所以箭头函数也没有prototype属性</li>
</ul>
<h5 id="FunctionCreate方法详细说明"><a href="#FunctionCreate方法详细说明" class="headerlink" title="FunctionCreate方法详细说明"></a>FunctionCreate方法详细说明</h5><ul>
<li>FunctionAllocate(prototype, functionkind)<ul>
<li>创建一个ecma函数对象F，同时F.[[FunctionKind]]为functionKind。F.[[Prototype]] to functionPrototype.</li>
<li>arrow function 不会初始化F.[[Construct]] 属性</li>
<li>返回 F</li>
</ul>
</li>
<li>FunctionInitialize<ul>
<li>箭头函数的 F.[[ThisMode]] 设置为 lexical.普通函数的是 F.[[ThisMode]] to global</li>
</ul>
</li>
</ul>
<h3 id="执行函数"><a href="#执行函数" class="headerlink" title="执行函数"></a>执行函数</h3><ul>
<li>执行函数即函数调用，从预发上来说是执行一个<a href="https://tc39.es/ecma262/#prod-CallExpression" target="_blank" rel="noopener">CallExpression</a>, 其具体执行过程在<a href="https://tc39.es/ecma262/#sec-function-calls" target="_blank" rel="noopener">12.3.4 Function Calls</a>, 简化下就是：<ul>
<li>先确定this值，如a.b()这种形式，this为a</li>
<li>调用F.<a href="thisValue, args">Call</a></li>
</ul>
</li>
<li>执行函数最终都是执行F.[Call]方法。</li>
<li>F.[[Call]]执行过程中会执行 OrdinaryCallBindThis ，它的作用就是给当前执行环境绑定this的值，这样在执行函数体的时候，知道到this值，就知道this的值是什么了。在OrdinaryCallBindThis执行的时候，如果[[ThisMode]]为 lexical。则直接return，其他情况会envRec.BindThisValue(thisValue).即给当前执行环境中绑定传递过来的this的值。所以箭头函数内的词法环境记录项里是没有this的。所以只能往上找，即当时定义的词法环境记录项。而且bind、call、apply最后都要调用F.[[Call]]，所以对箭头函数都无法生效</li>
</ul>
<h2 id="方法（Method）"><a href="#方法（Method）" class="headerlink" title="方法（Method）"></a>方法（Method）</h2><h3 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h3><ul>
<li>从<a href="https://tc39.es/ecma262/#sec-method-definitions" target="_blank" rel="noopener">规范定义</a>中看，方法一种有6种：普通方法、Generator方法，Async方法，AsyncGenerator方法，set方法，get方法</li>
<li>DefineMethod执行过程（必选参数object，prototype为可选参数）<ul>
<li>FunctionCreate(kind, UniqueFormalParameters, FunctionBody, scope, prototype)。创建了一个函数，并且F.[[Prototype]] 为prototype参数</li>
<li>MakeMethod(closure, object)，就是把closure的[[HomeObject]]内置属性设置为object</li>
</ul>
</li>
<li>FunctionCreate执行时，kind是Method，同样的没有执行MakeConstructor，所以也不能当做构造函数使用</li>
</ul>
<h3 id="方法的执行"><a href="#方法的执行" class="headerlink" title="方法的执行"></a>方法的执行</h3><ul>
<li>方法执行代码例如<code>a.b()</code>是一个左值表达式，最终走的还是函数调用的逻辑</li>
</ul>
<h2 id="类（Class）"><a href="#类（Class）" class="headerlink" title="类（Class）"></a>类（Class）</h2><ul>
<li><a href="https://tc39.es/ecma262/#sec-class-definitions" target="_blank" rel="noopener">14.6 Class Definitions</a><ul>
<li>给class name在当前词法环境记录项中绑定一个不可变的名字</li>
<li>如果有继承，找到继承的class p，则以p.prototype为原型创建对象proto，以 p 为constructorParent</li>
<li>如果不是继承，则以Object.prototype为原型创建对象proto，以Function.prototype为constructorParent</li>
<li>对constructor以proto和constructorParent为参数执行 DefineMethod 得到函数F，并且F.[[Prototype]] constructorParent</li>
<li>对F执行MakeConstructor(F, false, proto)。得到 F.prototype为proto</li>
<li>给proto添加属性constructor为F</li>
<li>处理classbody代码，如果是static方法，全部以F为参数执行 DefineMethod，不是的话已proto为参数执行 DefineMethod</li>
<li>返回F</li>
</ul>
</li>
<li>如果是继承的情况，为何要让p成为F的[[prototype]]属性</li>
<li>看示例<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span> <span class="keyword">extends</span> <span class="title">a</span></span>&#123;&#125; <span class="comment">// 这句会导致 b.__proto__ === a, b.prototype.__proto__ === a.prototype</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> a()</span><br><span class="line">c <span class="keyword">instanceof</span> b <span class="comment">// true c.__proto__ === b.prototype</span></span><br><span class="line">c <span class="keyword">instanceof</span> a <span class="comment">// true  c.__proto__.__proto__ === a.prototype</span></span><br><span class="line">b <span class="keyword">instanceof</span> <span class="built_in">Function</span> <span class="comment">// true b.__proto__ === a, a.__proto__ === Function.prototype</span></span><br><span class="line"><span class="comment">// 因为 c.__proto__ === b.prototype === Object.create(a.prototype)</span></span><br><span class="line"><span class="comment">// 所以 c.__proto__.__proto__ === b.prototype.__proto__ === a.prototype</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> ECMAScript规范 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ECMAScript规范 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ECMAScript2016规范理解（9）- 箭头函数]]></title>
      <url>http://ldllidonglin.github.io/blog/2019/11/03/2019-11-03-ECMAScript2016%E8%A7%84%E8%8C%83%E7%90%86%E8%A7%A3%EF%BC%889%EF%BC%89-%20%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>箭头函数作为ECMAScript中特殊的一种函数，和普通函数相比，有很多不一样的特点，本文将从规范的角度理解，看规范是如何定义的，导致箭头函数和普通函数有这么些不一样<br><a id="more"></a></p>
<h2 id="箭头函数的特点"><a href="#箭头函数的特点" class="headerlink" title="箭头函数的特点"></a>箭头函数的特点</h2><ul>
<li><p>本身没有this值</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.c = <span class="string">'global'</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  b: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.c)</span><br><span class="line">  &#125;,</span><br><span class="line">  c: <span class="string">'c'</span></span><br><span class="line">&#125;</span><br><span class="line">a.b() <span class="comment">// global</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>不能用作构造函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> a.b() <span class="comment">// Uncaught TypeError: a.b is not a constructor</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>bind，call，apply都不能改变函数运行时的this指向</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = &#123; <span class="attr">c</span>: <span class="string">'d'</span>&#125;</span><br><span class="line">a.b.bind(d)() <span class="comment">// global</span></span><br><span class="line">a.b.apply(d)  <span class="comment">// global</span></span><br><span class="line">a.b.call(d)   <span class="comment">// global</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>没有arguments、prototype对象</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.b.prototype <span class="comment">// undefined</span></span><br><span class="line">a.b = <span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(<span class="built_in">arguments</span>)&#125;</span><br><span class="line">a.b() <span class="comment">// Uncaught ReferenceError: arguments is not defined</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="规范中的定义"><a href="#规范中的定义" class="headerlink" title="规范中的定义"></a>规范中的定义</h2><ul>
<li><a href="https://tc39.es/ecma262/#sec-arrow-function-definitions-runtime-semantics-evaluation" target="_blank" rel="noopener">箭头函数的声明</a>，大概简化过程如下</li>
<li>执行FunctionCreate(Arrow, parameters, ConciseBody, scope),FunctionCreate最终是执行FunctionAllocate和FunctionInitialize</li>
<li>FunctionAllocate(prototype, functionkind)<ul>
<li>创建一个ecma函数对象F，F.[[Prototype]] to functionPrototype.</li>
<li>初始化了F.[Call]属性。</li>
<li>返回 F</li>
</ul>
</li>
<li>FunctionInitialize(F, kind, ParameterList, Body, Scope).<ul>
<li>因为传入的kind是Arrow，所以 F.[[ThisMode]] 设置为 lexical.普通函数的是 F.[[ThisMode]] to global</li>
</ul>
</li>
<li>注意并没有像普通函数的声明那样会执行MakeConstructor方法</li>
</ul>
<h2 id="特点解释"><a href="#特点解释" class="headerlink" title="特点解释"></a>特点解释</h2><h3 id="没有this值"><a href="#没有this值" class="headerlink" title="没有this值"></a>没有this值</h3><p>首先需要知道this值是什么，我之前的文章<a href="http://ldllidonglin.github.io/blog/2017/07/06/2017-07-06-ECMAScript2016%E8%A7%84%E8%8C%83%E7%90%86%E8%A7%A3%EF%BC%881%EF%BC%89-this/">ECMAScript2016规范理解（1）-this</a>有介绍过this的定义和函数执行时是怎么获取this值的，其中给当前词法记录项中绑定this值的步骤是<a href="https://tc39.es/ecma262/#sec-ordinarycallbindthis" target="_blank" rel="noopener">ordinarycallbindthis</a>。其中有一句If thisMode is lexical, return NormalCompletion(undefined)。箭头函数初始化的时候，就是把F.[[ThisMode]] 设置为 lexical，所以会返回undefined，最终箭头函数的函数执行环境里this值是undefined。而在函数执行到this表达式的时候，发现是当前词法环境记录项里是undefined，所以会沿着执行环上下文堆栈向上找，最终会找到global环境下的this。</p>
<h3 id="不能用作构造函数"><a href="#不能用作构造函数" class="headerlink" title="不能用作构造函数"></a>不能用作构造函数</h3><ul>
<li>对比普通函数的声明过程和箭头函数的声明过程就可以发现，箭头函数没有执行 <code>MakeConstructor</code> 方法。而 <code>MakeConstructor</code>方法的就是给函数初始化F.[[Construct]]属性以及prototype属性，所以箭头函数不可以被用作构造函数<br><img src="./arrow.jpg" alt="arrow"><br><img src="./function.jpg" alt="function"></li>
</ul>
<h3 id="bind，call，apply都不能改变函数运行时的this指向"><a href="#bind，call，apply都不能改变函数运行时的this指向" class="headerlink" title="bind，call，apply都不能改变函数运行时的this指向"></a>bind，call，apply都不能改变函数运行时的this指向</h3><ul>
<li>首先需要了解，bind，call，apply执行时都干了些啥<ul>
<li><a href="https://tc39.es/ecma262/#sec-function.prototype.bind" target="_blank" rel="noopener">bind规范定义</a>，总的来说就是执行了BoundFunctionCreate(Target, thisArg, args).这么一句，生成一个新函数，看BoundFunctionCreate的执行过程,重新定义了F.[[Call]]方法，同时把bind中this参数设置为[[BoundThis]]，而重新定义的F.[[Call]]最终是还是要调用原函数的[[Call]]方法，由于原函数的[[ThisMode]] 设置为 lexical，所以就和普通调用一样了，并不会应用bind时传入的this值<br><img src="./bind.jpg" alt="bind"></li>
<li><a href="https://tc39.es/ecma262/#sec-function.prototype.call" target="_blank" rel="noopener">call</a>,<a href="https://tc39.es/ecma262/#sec-function.prototype.apply" target="_blank" rel="noopener">apply</a>最终还是调用原函数的F.[[Call]]，所以还是无法更改this的绑定</li>
</ul>
</li>
</ul>
<h3 id="没有arguments和prototype对象"><a href="#没有arguments和prototype对象" class="headerlink" title="没有arguments和prototype对象"></a>没有arguments和prototype对象</h3><p>没有<code>prototype</code>对象是因为没有执行<code>MakeConstructor</code>方法，而<code>arguments</code>对象是在执行函数时确定的，<a href="https://tc39.es/ecma262/#sec-functiondeclarationinstantiation" target="_blank" rel="noopener">FunctionDeclarationInstantiation</a>的执行过程中，如果[[ThisMode]] is lexical那么将不会初始化<code>arguments</code>对象</p>
]]></content>
      
        <categories>
            
            <category> ECMAScript规范 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ECMAScript规范 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《中国历代政治得失》读后感]]></title>
      <url>http://ldllidonglin.github.io/blog/2019/07/03/2019-07-03-%E3%80%8A%E4%B8%AD%E5%9B%BD%E5%8E%86%E4%BB%A3%E6%94%BF%E6%B2%BB%E5%BE%97%E5%A4%B1%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F/</url>
      <content type="html"><![CDATA[<p>这本书是钱穆老先生应何应钦的邀请在台湾当时的战略顾问委员会中讲课的内容编程的一本书，一共讲了五次课，就变成本书中的五章，分别是汉、唐、宋、明、清共5个朝代的政治制度，每一章的内容都是按政府组织、科举、税收、兵役四个方面展开。<br><a id="more"></a></p>
<h3 id="汉代"><a href="#汉代" class="headerlink" title="汉代"></a>汉代</h3><p>中央设三公（丞相、太尉、御史大夫）九卿，丞相一人掌握全国行政大权。地方上分为郡县两级，地方长官太守、县令都由中央委派。科举则是通过举孝廉的方式推送到中央任职。<br>赋税轻，土地私有化，可以自由兼并，导致的结果就是贫富差距越来越大。汉武帝由于用兵频繁，且赋税太轻，钱不够，最终就制定了全国非耕地的收归国有，盐铁收归国营。<br>兵役制度是是全国壮丁到二十三岁必须开始服兵役。当时兵役又分好几种，其中中央卫兵，是各地方壮丁轮流到中央服役一年，这一年所有花费由中央负责。还有一种是戍边，每次三天，但是可以不去，交钱可以免除这个兵役。各个地方每年都会组织为期一个月的地方军队的训练，各个地方根据地理位置，各自训练兵种（步兵、骑兵、水兵）国家有战事时，可以临时召集这个部队。这种制度下导致常备军队只有中央部队，其余部队都需要临时召集，训练肯定不足。</p>
<h2 id="唐代"><a href="#唐代" class="headerlink" title="唐代"></a>唐代</h2><p>中央制度为三省六部一台制，中书省、门下省、尚书省。中书省负责拟定诏书送给皇帝画敕，然后送给门下省复核，有意见的话可送回中书省重拟。没问题则送达尚书省执行。每一个命令都得有门下省副署。后为简化流程，每个命令拟定前，先在政事堂中先由门下和中书省举行联席会议，会议通过后再送皇帝画敕。当时所有命令必须走这个流程，皇帝是不能直接下命令的。<br>地方政府分为州、县两级。州和县又各分上中下三级。御史台把全国分为十道，每道派观察使，虽然名为巡视观察，实际上为地方上更高一级的长官。在边疆等地为方便观察使随宜应付，又名为”节度使“，可以指挥军事、管理财政。最终形成军人割据，安史之乱由此而来。<br>科举制度是自由报名，这些人即为进士，统一考试，通过者为进士及第。同时规定商人不能参加科举。礼部举行考试，合格就可以有做官的资格了。考生可以把平日作品遍送政府中有学问的先进大僚看，导致未考之前，已有许多知名之士。考后出榜会根据政府先辈舆论来拔取知名之士。<br>税收一开始是采用租庸调制，租即农名租用国家土地，年老返还。庸即役，每人二十天。调即各地人民需要上交土产给中央，大体上是丝织物和麻织物。在唐德宗建中元年开始两税制，即春夏各收一次税，对地方定额征收，地方平摊到各户。这个导致农田自由交易，导致土地兼并，贫富差距拉大。<br>兵役制度，全兵皆农，把武装集团变成生产集团。招募的军人驻扎在某个军事要地成为一个府，兵即为府兵，兵的家人不需要交税。中央有十六个卫，各卫都有大将军，有战事时卫出将，府出兵。这样既解决了养兵的财政问题，也避免了将领拥兵自重的问题。但是由于政府懈怠没有给战死的士兵及时给与奖励，以及战争和疆域的扩大导致战士常年戍边，最后府兵不再愿意出征，兵源得不到补充，最终奔溃，最后走向募兵制，并在边疆大量使用胡人，也就导致节度使成为边疆大吏，安史之乱由此而来。</p>
<h2 id="宋代"><a href="#宋代" class="headerlink" title="宋代"></a>宋代</h2><p>政治制度和唐代变化不大，相权要低落一些，只有中书省在皇宫里，门下和尚书都在皇宫外了。沿袭晚唐有一个新机构叫枢密院，主管军事，故丞相管不着军事。户部、盐铁、度支三司不受丞相管辖。<br>地方政府分三级，路、（府、州、军、监）、县。宋太祖杯酒释兵权，之前地方上的武臣不再管事，由中央另派知州、知府去管理。地方财政全部运送到中央，军权、财权集中于中央<br>科举制度，开始糊名，防止徇私。门第传统消失农村子弟、白屋书生开始进入仕途。<br>税收制度沿袭唐代的两税制。<br>兵役制度: 军队分两种，禁军和厢军，入役参军的都要脸上刺字。老弱残兵，宋太祖就从中挑选精干为禁军，其余留到地方当厢军，不需要上阵打仗，只在地方当杂差。当时宋代国弱，必须养兵以防辽国，但是又打不赢。水浒传中林冲是八十万禁军教头可见军队之庞大。宋代尚文轻武，怕武将篡位，武将立了大功也不会重用。将兵分离，军队一批批调防，将领不动，导致将不习兵，兵不习将。</p>
<h2 id="明代"><a href="#明代" class="headerlink" title="明代"></a>明代</h2><p>政治制度，先说结论：政治制度是退步的。从明代开始，政府开始由一个皇帝来实现独裁。明太祖因宰相胡维庸造反，从此不再设立宰相，子孙后代也不允许设立，从此由六部理事，一切大权集中到皇帝。皇帝一人精力不够就设立了内阁大学士，帮助皇帝处理政事。后来皇帝越来越懒，内阁的权利越来越大。如万历二十几年不上朝，皇帝不和内阁见面，于是皇帝和内阁中间需要一个传话人，这个就是太监，从而太监就开始弄权了。<br>科举，因考试人太多，开始分开考试。第一次是府县考，通过者为秀才。秀才进而到省会参加乡试，中式者为举人。各省举人到中央参加会试，会试通过则为进士，也叫进士及第。进士留在中央读书，满三年考试，优秀者进入翰林院。非进士、翰林不能做大官。明代下半期开始使用八股文进行考试。<br>税收制度，一条鞭法，即把其他差役杂项一并归入田赋下，计亩征银。<br>兵役制度和唐代的府兵很像，兵全部在卫所，有耕地，自给自足。这种制度导致和平太久之后，兵卒能力以及武器都不行了，动员兵力也耗时太长。</p>
<h2 id="清代"><a href="#清代" class="headerlink" title="清代"></a>清代</h2><p>只有部族政权的私心，没有制度。和明代一样，不设宰相，用内阁大学时，同时从雍正开始又在内廷增设一军机处。地方常设总督和巡抚，成为真正的地方首长。<br>清代的考试制度和明代基本一致，但是由于满人当政，通过科举进入仕途的汉人比例非常少。<br>兵役制度是使用努尔哈赤创建的八旗兵，之前明朝的降军和各省改编的队伍称为绿营。后来因为太平天国运动，八旗军不行，才有了曾国藩的湘军、李鸿章组织的淮军，左宗棠的楚军等地方团练。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从汉到清，中央集权逐渐加强。皇室权利在增强，政府权利的减弱。而且从政治上来说从明到清，一直在退步。钱穆老先生比较主张对历史要到放到当时的特殊环境下去理解，而不是一味的否定。钱穆老先生也对古代政治制度</p>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 历史 </tag>
            
            <tag> 政治 </tag>
            
            <tag> 读后感 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ECMAScript规范的最新动向]]></title>
      <url>http://ldllidonglin.github.io/blog/2019/07/03/2019-07-03-ECMAScript%E8%A7%84%E8%8C%83%E7%9A%84%E6%9C%80%E6%96%B0%E5%8A%A8%E5%90%91/</url>
      <content type="html"><![CDATA[<p>这篇文章主要是关注ECMAScript规范最新有什么变化，关注下哪些Proposal进入stage3、4。还有就是一些重点Proposal, 所以这篇文章会持续更新。第一次写是在2018.01.17<br><a id="more"></a></p>
<h2 id="2020-06-26-更新"><a href="#2020-06-26-更新" class="headerlink" title="2020.06.26 更新"></a>2020.06.26 更新</h2><p>2020.06.01 - 2020.06.04的会议结果</p>
<h3 id="新增一个提案到stage4"><a href="#新增一个提案到stage4" class="headerlink" title="新增一个提案到stage4"></a>新增一个提案到stage4</h3><ul>
<li><a href="https://github.com/tc39/proposal-string-replaceall" target="_blank" rel="noopener">String.prototype.replaceAll</a>,ECMAScript2021的第一个feature</li>
</ul>
<h2 id="2020-04-25更新"><a href="#2020-04-25更新" class="headerlink" title="2020.04.25更新"></a>2020.04.25更新</h2><p>2020.03.31 - 2020.04.02的会议结果，ECMAScript2020定稿</p>
<h3 id="新增1个提案到stage4"><a href="#新增1个提案到stage4" class="headerlink" title="新增1个提案到stage4"></a>新增1个提案到stage4</h3><ul>
<li>import.meta 之前已经介绍过了，但是目前貌似只有一个import.meta.url属性，import.meta是可变，未来估计会有更多信息。默认为空，只有在第一次获取这个属性的时候，才会获得</li>
</ul>
<h3 id="新增1个提案到stage3"><a href="#新增1个提案到stage3" class="headerlink" title="新增1个提案到stage3"></a>新增1个提案到stage3</h3><ul>
<li><a href="https://github.com/tc39/proposal-logical-assignment" target="_blank" rel="noopener">proposal-logical-assignment</a><ul>
<li>逻辑运算和赋值运算合并的一个操作符</li>
<li>使用示例<figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a ||= b;</span><br><span class="line">a || <span class="comment">(a = b)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// "And And Equals"</span></span><br><span class="line">a &amp;&amp;= b;</span><br><span class="line">a &amp;&amp; <span class="comment">(a = b)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// "QQ Equals"</span></span><br><span class="line">a ??= b;</span><br><span class="line">a ?? <span class="comment">(a = b)</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="2019-12-08更新"><a href="#2019-12-08更新" class="headerlink" title="2019.12.08更新"></a>2019.12.08更新</h2><h3 id="新增3个提案到stage4"><a href="#新增3个提案到stage4" class="headerlink" title="新增3个提案到stage4"></a>新增3个提案到stage4</h3><ul>
<li>for-in mechanics</li>
<li>Optional Chaining</li>
<li>Nullish coalescing Operator<br><code>以上三个提案都是在2019.07进入stage3的，非常快的就进入stage4</code></li>
</ul>
<h3 id="新增一个提案到stage3"><a href="#新增一个提案到stage3" class="headerlink" title="新增一个提案到stage3"></a>新增一个提案到stage3</h3><ul>
<li><a href="https://github.com/tc39/proposal-atomics-wait-async" target="_blank" rel="noopener">Atomics.waitAsync</a></li>
</ul>
<h2 id="2019-10-28-更新"><a href="#2019-10-28-更新" class="headerlink" title="2019.10.28 更新"></a>2019.10.28 更新</h2><h3 id="新增了1个提案到stage4"><a href="#新增了1个提案到stage4" class="headerlink" title="新增了1个提案到stage4"></a>新增了1个提案到stage4</h3><ul>
<li>globalThis<ul>
<li>统一多环境下this的命名，在之前的提案中，叫global，最终改名叫globalThis。以后想使用this，又想让代码在多个环境兼容，就使用globalThis。</li>
</ul>
</li>
</ul>
<h3 id="新增2个提案到state3"><a href="#新增2个提案到state3" class="headerlink" title="新增2个提案到state3"></a>新增2个提案到state3</h3><ul>
<li><a href="https://github.com/tc39/proposal-string-replaceall" target="_blank" rel="noopener">String.prototype.replaceAll</a><ul>
<li>替换所有字符，解决replace方法使用如：queryString.replace(/+/g, ‘ ‘);需要转义特定字符</li>
</ul>
</li>
<li><a href="https://github.com/tc39/proposal-promise-any" target="_blank" rel="noopener">Promise.any</a><ul>
<li>Any of the promises was fulfilled</li>
<li>示例<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Promise.any([</span><br><span class="line">  fetch(<span class="string">'https://v8.dev/'</span>).<span class="keyword">then</span>(<span class="function"><span class="params">()</span> =&gt;</span> <span class="string">'home'</span>),</span><br><span class="line">  fetch(<span class="string">'https://v8.dev/blog'</span>).<span class="keyword">then</span>(<span class="function"><span class="params">()</span> =&gt;</span> <span class="string">'blog'</span>),</span><br><span class="line">  fetch(<span class="string">'https://v8.dev/docs'</span>).<span class="keyword">then</span>(<span class="function"><span class="params">()</span> =&gt;</span> <span class="string">'docs'</span>)</span><br><span class="line">]).<span class="keyword">then</span>(<span class="function"><span class="params">(first)</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="regexp">//</span> Any <span class="keyword">of</span> the promises was fulfilled.</span><br><span class="line">  <span class="built_in">console</span>.log(first);</span><br><span class="line">  <span class="regexp">//</span> → <span class="string">'home'</span></span><br><span class="line">&#125;).<span class="keyword">catch</span>(<span class="function"><span class="params">(error)</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="regexp">//</span> All <span class="keyword">of</span> the promises were rejected.</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="2019-07-23-2019-07-25会议"><a href="#2019-07-23-2019-07-25会议" class="headerlink" title="2019.07.23-2019.07.25会议"></a>2019.07.23-2019.07.25会议</h2><h3 id="新增1个提案到stage4-1"><a href="#新增1个提案到stage4-1" class="headerlink" title="新增1个提案到stage4"></a>新增1个提案到stage4</h3><ul>
<li>Promise.allSettled<ul>
<li>前文已介绍，至此，js中已经有三个promise方法来来处理promise组合,另外两个是: Promise.all,Promise.race</li>
</ul>
</li>
</ul>
<h3 id="新增4个提案到stage3"><a href="#新增4个提案到stage3" class="headerlink" title="新增4个提案到stage3"></a>新增4个提案到stage3</h3><ul>
<li><p><a href="https://github.com/tc39/proposal-for-in-exploration" target="_blank" rel="noopener">for-in mechanics</a><br>规范for-in的迭代顺序</p>
</li>
<li><p><a href="https://github.com/tc39/proposal-optional-chaining" target="_blank" rel="noopener">Optional Chaining</a><br>判断属性是否存在再也不用这么麻烦了</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">var</span> <span class="keyword">street </span>= user.<span class="keyword">address </span>&amp;&amp; user.<span class="keyword">address.street;</span></span><br><span class="line"><span class="keyword">// </span>变成</span><br><span class="line"><span class="symbol">var</span> <span class="keyword">street </span>= user.<span class="keyword">address?.street</span></span><br><span class="line"><span class="keyword">const </span>animationDuration = response.settings?.animationDuration ?? <span class="number">300</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="https://github.com/tc39/proposal-nullish-coalescing" target="_blank" rel="noopener">Nullish coalescing Operator</a><br>这个和Optional Chaining是配合使用的，当使用了Optional Chaining后，有时只想判断当时null或者undefined时用默认值时，用下面这个代码就会有问题</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">const</span> <span class="string">response</span> <span class="string">=</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="attr">settings:</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">nullValue:</span> <span class="literal">null</span><span class="string">,</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">400</span><span class="string">,</span></span><br><span class="line">    <span class="attr">animationDuration:</span> <span class="number">0</span><span class="string">,</span></span><br><span class="line">    <span class="attr">headerText:</span> <span class="string">''</span><span class="string">,</span></span><br><span class="line">    <span class="attr">showSplashScreen:</span> <span class="literal">false</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">const</span> <span class="string">headerText</span> <span class="string">=</span> <span class="string">response.settings?.headerText</span> <span class="string">||</span> <span class="string">'Hello, world!'</span><span class="string">;</span> <span class="string">//'Hello,</span> <span class="string">world!'</span></span><br></pre></td></tr></table></figure>
<p>所以可以用??来解决这个问题，只有为null或者undefined时，才会是false</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">const</span> <span class="string">response</span> <span class="string">=</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="attr">settings:</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">nullValue:</span> <span class="literal">null</span><span class="string">,</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">400</span><span class="string">,</span></span><br><span class="line">    <span class="attr">animationDuration:</span> <span class="number">0</span><span class="string">,</span></span><br><span class="line">    <span class="attr">headerText:</span> <span class="string">''</span><span class="string">,</span></span><br><span class="line">    <span class="attr">showSplashScreen:</span> <span class="literal">false</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="string">const</span> <span class="string">undefinedValue</span> <span class="string">=</span> <span class="string">response.settings?.undefinedValue</span> <span class="string">??</span> <span class="string">'some other default'</span><span class="string">;</span> <span class="string">//</span> <span class="attr">result:</span> <span class="string">'some other default'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="https://github.com/tc39/proposal-regexp-match-indices" target="_blank" rel="noopener">RegExp Match array offsets</a></p>
<ul>
<li>exec方法返回值中增加一个indices属性，标识各个捕获组的start和end</li>
<li>示例<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const re1 = /a+(?<span class="xml"><span class="tag">&lt;<span class="name">Z</span>&gt;</span></span>z)?/;</span><br><span class="line"></span><br><span class="line">// indices are relative to start of the input string:</span><br><span class="line">const s1 = "xaaaz";</span><br><span class="line">const m1 = re1.exec(s1);</span><br><span class="line">m1.indices[<span class="string">0</span>][<span class="symbol">0</span>] === 1;</span><br><span class="line">m1.indices[<span class="string">0</span>][<span class="symbol">1</span>] === 5;</span><br><span class="line">s1.slice(...m1.indices[0]) === "aaaz";</span><br><span class="line"></span><br><span class="line">m1.indices[<span class="string">1</span>][<span class="symbol">0</span>] === 4;</span><br><span class="line">m1.indices[<span class="string">1</span>][<span class="symbol">1</span>] === 5;</span><br><span class="line">s1.slice(...m1.indices[1]) === "z";</span><br><span class="line"></span><br><span class="line">m1.indices.groups[<span class="string">"Z"</span>][<span class="symbol">0</span>] === 4;</span><br><span class="line">m1.indices.groups[<span class="string">"Z"</span>][<span class="symbol">1</span>] === 5;</span><br><span class="line">s1.slice(...m1.indices.groups["Z"]) === "z";</span><br><span class="line"></span><br><span class="line">// capture groups that are not matched return <span class="code">`undefined`</span>:</span><br><span class="line">const m2 = re1.exec("xaaay");</span><br><span class="line">m2.indices[1] === undefined;</span><br><span class="line">m2.indices.groups["Z"] === undefined;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="2019-07-03-更新-会议时间：2019-06-04-2019-06-06"><a href="#2019-07-03-更新-会议时间：2019-06-04-2019-06-06" class="headerlink" title="2019.07.03 更新(会议时间：2019.06.04-2019.06.06)"></a>2019.07.03 更新(会议时间：2019.06.04-2019.06.06)</h2><h3 id="新增2个提案到stage4，将会出现在ECMAScript2020中"><a href="#新增2个提案到stage4，将会出现在ECMAScript2020中" class="headerlink" title="新增2个提案到stage4，将会出现在ECMAScript2020中"></a>新增2个提案到stage4，将会出现在ECMAScript2020中</h3><ul>
<li>import() <ul>
<li>终于写进规范了,之前在stage3的时候有详细介绍，其实这个我们已经借助webpack使用上这个功能了，chrome从63开始就已经支持了</li>
<li><a href="https://github.com/tc39/proposal-dynamic-import" target="_blank" rel="noopener">提案信息介绍</a></li>
</ul>
</li>
<li>BIGINT<ul>
<li>2017年已经进入了stage3，下文已经详细介绍了这个特性</li>
</ul>
</li>
</ul>
<h3 id="新增2个提案到stage3"><a href="#新增2个提案到stage3" class="headerlink" title="新增2个提案到stage3"></a>新增2个提案到stage3</h3><ul>
<li><a href="https://github.com/tc39/proposal-top-level-await" target="_blank" rel="noopener">Top-level await</a><ul>
<li>在es模块系统中，可以直接不用async也能直接使用await了</li>
</ul>
</li>
<li><a href="https://github.com/tc39/proposal-weakrefs" target="_blank" rel="noopener">WeakReferences</a><ul>
<li>WeakRef FinalizationGroup。优化垃圾收集，避免内存泄漏</li>
</ul>
</li>
</ul>
<h2 id="2019-04-04-更新"><a href="#2019-04-04-更新" class="headerlink" title="2019.04.04 更新"></a>2019.04.04 更新</h2><h3 id="新增一个提案到stage4，也就是ECMAScript2020中"><a href="#新增一个提案到stage4，也就是ECMAScript2020中" class="headerlink" title="新增一个提案到stage4，也就是ECMAScript2020中"></a>新增一个提案到stage4，也就是ECMAScript2020中</h3><ul>
<li>String.prototype.matchAll，这个提案在2018年1月就进入stage3中了</li>
</ul>
<h3 id="新增两个提案到stage3"><a href="#新增两个提案到stage3" class="headerlink" title="新增两个提案到stage3"></a>新增两个提案到stage3</h3><ul>
<li><p>Promise.allSettled<br>因为Promise.all会在有一个reject的时候，就直接reject，并且其他resolve的结果都会丢弃，对于想知道所有结果（无论resolve还是reject）的情况下，就必须重新包装一下，如下代码：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reflect</span>(<span class="params">promise</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> promise.then(</span><br><span class="line">    (v) =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; status: <span class="string">'fulfilled'</span>, value: v &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    (error) =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; status: <span class="string">'rejected'</span>, reason: error &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promises = [ fetch(<span class="string">'index.html'</span>), fetch(<span class="string">'https://does-not-exist/'</span>) ];</span><br><span class="line"><span class="keyword">const</span> results = <span class="keyword">await</span> <span class="built_in">Promise</span>.all(promises.map(reflect));</span><br><span class="line"><span class="keyword">const</span> successfulPromises = results.filter(<span class="function"><span class="params">p</span> =&gt;</span> p.status === <span class="string">'fulfilled'</span>);</span><br></pre></td></tr></table></figure>
<p>而有了allSettled方法后，就不需要这样了，如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promises = [ fetch(<span class="string">'index.html'</span>), fetch(<span class="string">'https://does-not-exist/'</span>) ];</span><br><span class="line"><span class="keyword">const</span> results = <span class="keyword">await</span> <span class="built_in">Promise</span>.allSettled(promises);</span><br><span class="line"><span class="keyword">const</span> successfulPromises = results.filter(<span class="function"><span class="params">p</span> =&gt;</span> p.status === <span class="string">'fulfilled'</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>Numeric separators<br>用下划线(_)做数字分隔符,让数字的可读性更强</p>
<figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1_000_000_000</span>           <span class="comment">// Ah, so a billion</span></span><br><span class="line"><span class="number">101_475_938.3</span><span class="number">8</span>          <span class="comment">// And this is hundreds of millions</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fee = <span class="number">123_00</span>;       <span class="comment">// $123 (12300 cents, apparently)</span></span><br><span class="line"><span class="keyword">let</span> fee = <span class="number">12_300</span>;       <span class="comment">// $12,300 (woah, that fee!)</span></span><br><span class="line"><span class="keyword">let</span> amount = <span class="number">12345_00</span>;  <span class="comment">// 12,345 (1234500 cents, apparently)</span></span><br><span class="line"><span class="keyword">let</span> amount = <span class="number">123_4500</span>;  <span class="comment">// 123.45 (4-fixed financial)</span></span><br><span class="line"><span class="keyword">let</span> amount = <span class="number">1_234_500</span>; <span class="comment">// 1,234,500</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="2019-02-19-更新"><a href="#2019-02-19-更新" class="headerlink" title="2019.02.19 更新"></a>2019.02.19 更新</h2><h3 id="新增4个提案到stage4，即ECMAScript2019中"><a href="#新增4个提案到stage4，即ECMAScript2019中" class="headerlink" title="新增4个提案到stage4，即ECMAScript2019中"></a>新增4个提案到stage4，即ECMAScript2019中</h3><p>有三个是新增的内置对象的方法，规范没制定之前已经被大量使用，还有一个是对旧方法的描述进行订正升级。分别是：</p>
<ul>
<li>Object.fromEntries</li>
<li>Well-formed JSON.stringify</li>
<li>String.prototype.{trimStart,trimEnd}</li>
<li>Array.prototype.{flat,flatMap}</li>
</ul>
<p>以上都在具体提案升级到stage3时已做介绍，这次1月份的会议没有新提案进入stage3</p>
<h2 id="2018-12-10-更新"><a href="#2018-12-10-更新" class="headerlink" title="2018.12.10 更新"></a>2018.12.10 更新</h2><h3 id="新增两个提案到stage4，即ECMAScript2019中"><a href="#新增两个提案到stage4，即ECMAScript2019中" class="headerlink" title="新增两个提案到stage4，即ECMAScript2019中"></a>新增两个提案到stage4，即ECMAScript2019中</h3><p>这俩提案在进入stage3的时候已经在下文中介绍过了</p>
<ul>
<li>Symbol.prototype.description</li>
<li>Function.prototype.toString revision</li>
</ul>
<h3 id="新增一个提案到stage3-1"><a href="#新增一个提案到stage3-1" class="headerlink" title="新增一个提案到stage3"></a>新增一个提案到stage3</h3><ul>
<li><a href="https://github.com/tc39/proposal-hashbang" target="_blank" rel="noopener">Hashbang Grammar</a><br>就是把已经成为事实标准的在cli工具中会使用到的#!符号写入标准</li>
<li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"><span class="comment">// in the Script Goal</span></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"><span class="comment">// in the Module Goal</span></span><br><span class="line"><span class="keyword">export</span> &#123;&#125;;</span><br><span class="line">console.log(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="2018-10-31-更新"><a href="#2018-10-31-更新" class="headerlink" title="2018.10.31 更新"></a>2018.10.31 更新</h2><h3 id="新增一个提案到stage3-2"><a href="#新增一个提案到stage3-2" class="headerlink" title="新增一个提案到stage3"></a>新增一个提案到stage3</h3><ul>
<li><p>Well-formed JSON.stringify</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Without the proposal:</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify(<span class="string">'\uD800'</span>);</span><br><span class="line"><span class="comment">// → '"&lt;U+D800&gt;"'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// With the proposal:</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify(<span class="string">'\uD800'</span>);</span><br><span class="line"><span class="comment">// → '"\\ud800"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="https://docs.google.com/presentation/d/1oTkthPjlRg8FOsyvD9XdA-rPkfLcMrTDCIiHNltIxpw/edit#slide=id.g3b22f3749a_0_51" target="_blank" rel="noopener">slide</a></p>
<h2 id="2018-08-24-更新"><a href="#2018-08-24-更新" class="headerlink" title="2018.08.24 更新"></a>2018.08.24 更新</h2><h3 id="新增一个提案到stage3-3"><a href="#新增一个提案到stage3-3" class="headerlink" title="新增一个提案到stage3"></a>新增一个提案到stage3</h3></li>
<li>Object.fromEntries<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a = &#123;b:<span class="number">1</span>, c:<span class="number">2</span>&#125;</span><br><span class="line">Object.entries(a)                 // <span class="string">[['b', 1], ['c', 2]]</span></span><br><span class="line">var e = <span class="string">[['a', 1], ['c', 2]]</span></span><br><span class="line">var obj = Object.fromEntries(e)   // &#123;b:<span class="number">1</span>, c:<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="2018-05-30更新"><a href="#2018-05-30更新" class="headerlink" title="2018.05.30更新"></a>2018.05.30更新</h2><h3 id="ECMAScript2018定稿"><a href="#ECMAScript2018定稿" class="headerlink" title="ECMAScript2018定稿"></a>ECMAScript2018定稿</h3><p>从进展来看，ECMAScript2018在1月份的会议上已经定稿了，所以最终ECMAScript2018新增了8个特性分别是：</p>
<ul>
<li>Lifting template literal restriction</li>
<li>s (dotAll) flag for regular expressions</li>
<li>RegExp named capture groups</li>
<li>Rest/Spread Properties</li>
<li>RegExp Lookbehind Assertions</li>
<li>Unicode property escapes in regular expressions</li>
<li>Promise.prototype.finally</li>
<li>async-iteration</li>
</ul>
<h3 id="ECMAScript2019"><a href="#ECMAScript2019" class="headerlink" title="ECMAScript2019"></a>ECMAScript2019</h3><h4 id="有两个进入stage4，也就是ECMAScript2019"><a href="#有两个进入stage4，也就是ECMAScript2019" class="headerlink" title="有两个进入stage4，也就是ECMAScript2019"></a>有两个进入stage4，也就是ECMAScript2019</h4><ul>
<li>Optional catch binding</li>
<li>JSON superset</li>
</ul>
<h4 id="新增-1-个到stage3"><a href="#新增-1-个到stage3" class="headerlink" title="新增 1 个到stage3"></a>新增 1 个到stage3</h4><ul>
<li><a href="https://github.com/tc39/proposal-Symbol-description" target="_blank" rel="noopener">Symbol.prototype.description    </a><ul>
<li>通过 description 这个访问器属性，返回Symbol的描述，代替之前通过Symbol.prototype.toString来实现</li>
</ul>
</li>
</ul>
<h2 id="2018-01-27更新"><a href="#2018-01-27更新" class="headerlink" title="2018.01.27更新"></a>2018.01.27更新</h2><h3 id="新增了6个proposal到stage4："><a href="#新增了6个proposal到stage4：" class="headerlink" title="新增了6个proposal到stage4："></a>新增了6个proposal到stage4：</h3><ul>
<li>RegExp named capture groups</li>
<li>Rest/Spread Properties</li>
<li>RegExp Lookbehind Assertions</li>
<li>Unicode property escapes in regular expressions</li>
<li>Promise.prototype.finally</li>
<li>async-iteration</li>
</ul>
<h3 id="新增了3个proposal到stage3"><a href="#新增了3个proposal到stage3" class="headerlink" title="新增了3个proposal到stage3"></a>新增了3个proposal到stage3</h3><ul>
<li><a href="https://github.com/tc39/proposal-json-superset" target="_blank" rel="noopener">JSON superset</a><ul>
<li>修正ECMA-262的JSON语法，从而满足是JSON的语法的超集。就是让ECMA-262字符串语法兼容JSON的字符串语法</li>
</ul>
</li>
<li><a href="https://github.com/tc39/proposal-string-left-right-trim" target="_blank" rel="noopener">String.prototype.{trimStart,trimEnd}</a><ul>
<li>之前规范已经有了padStart/padEnd，这次就加上去除空格的方法</li>
</ul>
</li>
<li><a href="https://github.com/tc39/String.prototype.matchAll" target="_blank" rel="noopener">String.prototype.matchAll</a><ul>
<li>把字符串中匹配正则的捕获组全部返回，而不是靠循环去取</li>
</ul>
</li>
</ul>
<h2 id="stage4"><a href="#stage4" class="headerlink" title="stage4"></a>stage4</h2><p>截止到TC39最近的一次例行会议（2017.11.30），目前在stage4的一共有两个Proposal：</p>
<h3 id="Lifting-template-literal-restriction"><a href="#Lifting-template-literal-restriction" class="headerlink" title="Lifting template literal restriction"></a>Lifting template literal restriction</h3><p>对应的<a href="https://github.com/tc39/proposal-template-literal-revision" target="_blank" rel="noopener">文档</a></p>
<ul>
<li><p>现在规范中，对于模板字符串有限制，对\x，\u开头的字符串进行转义</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function latex(strings) <span class="meta">&#123;...&#125;</span></span><br><span class="line"><span class="keyword">let</span> document = latex`</span><br><span class="line">  \newcommand&#123;\unicode&#125;&#123;\textbf&#123;<span class="type">Unicode</span>!&#125;&#125; // 报错</span><br><span class="line">  \newcommand&#123;\xerxes&#125;&#123;\textbf&#123;<span class="type">King</span>!&#125;&#125; // 报错</span><br><span class="line">`</span><br></pre></td></tr></table></figure>
</li>
<li><p>放松对标签模板里面的字符串转义的限制。遇到不合法的字符串转义，就返回undefined，而不是报错，并且从raw属性上面可以得到原始字符串。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tag</span>(<span class="params">strs</span>) </span>&#123;</span><br><span class="line">    strs[<span class="number">0</span>] === <span class="literal">undefined</span></span><br><span class="line">    strs.raw[<span class="number">0</span>] === <span class="string">"\\unicode and \\u&#123;55&#125;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">tag<span class="string">`\unicode and \u&#123;55&#125;`</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="s-dotAll-flag-for-regular-expressions"><a href="#s-dotAll-flag-for-regular-expressions" class="headerlink" title="s (dotAll) flag for regular expressions"></a>s (dotAll) flag for regular expressions</h3><p>对应的<a href="https://github.com/tc39/proposal-regexp-dotall-flag" target="_blank" rel="noopener">文档</a></p>
<ul>
<li>以前正则里的<code>.</code>不能匹配<code>\n \r</code>等换行符，新增<code>s</code>flag，支持单行模式，从而让<code>.</code>能匹配换行符<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/./</span>s.test(<span class="string">'\n'</span>) <span class="regexp">//</span> true</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="stage3"><a href="#stage3" class="headerlink" title="stage3"></a>stage3</h2><p>目前在stage3中有17个</p>
<h3 id="1-Function-prototype-toString"><a href="#1-Function-prototype-toString" class="headerlink" title="1 Function.prototype.toString"></a>1 Function.prototype.toString</h3><ul>
<li>以前规范规定的很模糊，导致各引擎实现的不一致。比如对换行空格的处理、内置函数和自定义函数的返回</li>
<li>明确、具体的规定这个方法的针对不同的函数的返回。<ul>
<li>内置函数、宿主函数、绑定函数一律返回”function () { [native code] }”</li>
<li>通过ECMAScript定义的，一字不落的返回和源代码一样的文本</li>
<li>通过Function等构造函数动态创建的，合成一个源代码返回，针对不同的情况，规定返回格式</li>
<li>其余情况返回TypeError</li>
</ul>
</li>
</ul>
<h3 id="2-Promise-prototype-finally"><a href="#2-Promise-prototype-finally" class="headerlink" title="2 Promise.prototype.finally"></a>2 Promise.prototype.finally</h3><ul>
<li>Promise原生提供finally方法<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Promise.resolve(<span class="number">2</span>)</span><br><span class="line">.<span class="keyword">then</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;, <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;)</span><br><span class="line">.<span class="keyword">finally</span>(function () &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3-Optional-catch-binding"><a href="#3-Optional-catch-binding" class="headerlink" title="3 Optional catch binding"></a>3 Optional catch binding</h3><ul>
<li><p>try{}catch(e){}的e参数变为可选</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span>()&#123;</span><br><span class="line">  <span class="comment">// 可不写参数了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>chrome66已经实现</p>
</li>
</ul>
<h3 id="4-global"><a href="#4-global" class="headerlink" title="4 global"></a>4 global</h3><ul>
<li>增加一个名为global的，在浏览器、nodejs、Web Workers中通用的全局对象，用来访问全局变量<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">global</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!global.global) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">Object</span>.defineProperty) &#123;</span><br><span class="line">			<span class="built_in">Object</span>.defineProperty(global, <span class="string">'global'</span>, &#123;</span><br><span class="line">				configurable: <span class="literal">true</span>,</span><br><span class="line">				enumerable: <span class="literal">false</span>,</span><br><span class="line">				value: global,</span><br><span class="line">				writable: <span class="literal">true</span></span><br><span class="line">			&#125;);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			global.global = global;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)(<span class="keyword">typeof</span> <span class="keyword">this</span> === <span class="string">'object'</span> ? <span class="keyword">this</span> : <span class="built_in">Function</span>(<span class="string">'return this'</span>)())</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="5-import-specifier"><a href="#5-import-specifier" class="headerlink" title="5 import(specifier)"></a>5 import(specifier)</h3><ul>
<li>ES2015就写入规范的import，原生提供了静态的、同步的加载模块的方式</li>
<li>import()用来支持动态加载模块，返回一个Promise  <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>('<span class="title">a</span>.<span class="title">js'</span>)</span><br><span class="line">.<span class="keyword">then</span>(myModule =&gt; &#123;</span><br><span class="line">    console.log(myModule.<span class="keyword">default</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="6-import-meta"><a href="#6-import-meta" class="headerlink" title="6 import.meta"></a>6 import.meta</h3><ul>
<li>给模块内部提供一种获取上下文信息的途径<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"module"</span> src=<span class="string">"path/to/hamster-displayer.mjs"</span> data-<span class="built_in">size</span>=<span class="string">"500"</span>&gt;&lt;/script&gt;</span><br><span class="line">(async () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> response = await fetch(<span class="keyword">new</span> URL(<span class="string">"../hamsters.jpg"</span>, <span class="keyword">import</span>.meta.url));</span><br><span class="line">  <span class="keyword">const</span> blob = await response.blob();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="built_in">size</span> = <span class="keyword">import</span>.meta.scriptElement.dataset.<span class="built_in">size</span> || <span class="number">300</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="built_in">image</span> = <span class="keyword">new</span> Image();</span><br><span class="line">  <span class="built_in">image</span>.src = URL.createObjectURL(blob);</span><br><span class="line">  <span class="built_in">image</span>.<span class="built_in">width</span> = <span class="built_in">image</span>.<span class="built_in">height</span> = <span class="built_in">size</span>;</span><br><span class="line"></span><br><span class="line">  document.body.appendChild(<span class="built_in">image</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="7-Rest-Spread-Properties"><a href="#7-Rest-Spread-Properties" class="headerlink" title="7 Rest/Spread Properties"></a>7 Rest/Spread Properties</h3><ul>
<li>对象支持展开运算符和函数形参的剩余参数语法<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">const</span> <span class="string">obj</span> <span class="string">=</span> <span class="string">&#123;foo:</span> <span class="number">1</span><span class="string">,</span> <span class="attr">bar:</span> <span class="number">2</span><span class="string">,</span> <span class="attr">baz:</span> <span class="number">3</span><span class="string">&#125;;</span></span><br><span class="line"><span class="string">const</span> <span class="string">&#123;foo,</span> <span class="string">...rest&#125;</span> <span class="string">=</span> <span class="string">obj;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">const</span> <span class="string">obj</span> <span class="string">=</span> <span class="string">&#123;foo:</span> <span class="number">1</span><span class="string">,</span> <span class="attr">bar:</span> <span class="number">2</span><span class="string">,</span> <span class="attr">baz:</span> <span class="number">3</span><span class="string">&#125;;</span></span><br><span class="line"><span class="string">console.log(&#123;...obj,</span> <span class="attr">qux:</span> <span class="number">4</span><span class="string">&#125;)</span></span><br><span class="line"><span class="string">//&#123;foo:</span> <span class="number">1</span><span class="string">,</span> <span class="attr">bar:</span> <span class="number">2</span><span class="string">,</span> <span class="attr">baz:</span> <span class="number">3</span><span class="string">,</span> <span class="attr">qux:</span> <span class="number">4</span> <span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="8-class-fields"><a href="#8-class-fields" class="headerlink" title="8 class-fields"></a>8 class-fields</h3><ul>
<li>class语法新增声明公共字段和私有字段的方式<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">HTMLElement</span> </span>&#123;</span><br><span class="line">  #x = <span class="number">0</span>; <span class="comment">// 私有字段</span></span><br><span class="line">  y = <span class="number">1</span>; <span class="comment">// 公共字段</span></span><br><span class="line">  a () &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="9-Private-methods-and-accessors"><a href="#9-Private-methods-and-accessors" class="headerlink" title="9 Private methods and accessors"></a>9 Private methods and accessors</h3><ul>
<li>class语法新增申明私有方法和访问器<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">HTMLElement</span> </span>&#123;</span><br><span class="line">  #x = <span class="number">0</span>; <span class="comment">// 私有字段</span></span><br><span class="line">  y = <span class="number">1</span>; <span class="comment">// 公共字段</span></span><br><span class="line">  #a () &#123;</span><br><span class="line">    <span class="keyword">this</span>.#x++</span><br><span class="line">  &#125;</span><br><span class="line">  get #x() &#123;&#125;</span><br><span class="line">  set #x(value) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="10-async-iteration"><a href="#10-async-iteration" class="headerlink" title="10 async-iteration"></a>10 async-iteration</h3><ul>
<li>新增异步迭代器，针对异步数据迭代<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; value, done &#125; = syncIterator.next();</span><br><span class="line"></span><br><span class="line">asyncIterator.next().then((&#123; value, done &#125;) =&gt; <span class="comment">/* ... */</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">for</span> <span class="title">await</span> <span class="params">(<span class="keyword">const</span> <span class="built_in">line</span> of readLines(filePath))</span> </span>&#123;</span><br><span class="line">  console.<span class="built_in">log</span>(<span class="built_in">line</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="11-RegExp-Lookbehind-Assertions"><a href="#11-RegExp-Lookbehind-Assertions" class="headerlink" title="11 RegExp Lookbehind Assertions"></a>11 RegExp Lookbehind Assertions</h3><ul>
<li>正则表达式以前只有先行断言，现在新增正向后行断言(?&lt;=…)和负向后行断言(?&lt;!…)<figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/<span class="comment">(?&lt;=\$)</span>\d+<span class="comment">(\.\d*)</span>?/.test<span class="comment">('$10.53')</span> <span class="comment">// true</span></span><br><span class="line">/<span class="comment">(?&lt;=\$)</span>\d+<span class="comment">(\.\d*)</span>?/.test<span class="comment">('&amp;10.53')</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">/<span class="comment">(?&lt;!\$)</span>\d+<span class="comment">(\.\d*)</span>?/.test<span class="comment">('$10.53')</span> <span class="comment">// false</span></span><br><span class="line">/<span class="comment">(?&lt;!\$)</span>\d+<span class="comment">(\.\d*)</span>?/.test<span class="comment">('&amp;10.53')</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="12-Unicode-property-escapes-in-regular-expressions"><a href="#12-Unicode-property-escapes-in-regular-expressions" class="headerlink" title="12 Unicode property escapes in regular expressions"></a>12 Unicode property escapes in regular expressions</h3><ul>
<li><p>正则表达式新增一种方式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure>
<p>const regex = /^\p{Decimal_Number}+$/u;<br>regex.test(‘𝟏𝟐𝟑𝟜𝟝𝟞𝟩𝟪𝟫𝟬𝟭𝟮𝟯𝟺𝟻𝟼’);<br>// → true</p>
<p>const regex = /\p{Emoji_Modifier_Base}$/u;<br>regex.test(‘⌚’);<br>// → true</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### <span class="number">13</span> RegExp named capture groups</span><br><span class="line">* 正则表达式新增命名捕获分组语法```(?&lt;name&gt;...)</span><br></pre></td></tr></table></figure>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let &#123;groups: &#123;<span class="keyword">one</span>, <span class="keyword">two</span>&#125;&#125; = /^(?&lt;<span class="keyword">one</span>&gt;.*):(?&lt;<span class="keyword">two</span>&gt;.*)$/<span class="keyword">u</span>.exec('foo:bar');</span><br><span class="line">console.<span class="built_in">log</span>(`<span class="keyword">one</span>: <span class="variable">$&#123;one&#125;</span>, <span class="keyword">two</span>: <span class="variable">$&#123;two&#125;</span>`);  <span class="comment">// prints one: foo, two: bar</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="14-Numeric-separators"><a href="#14-Numeric-separators" class="headerlink" title="14 Numeric separators"></a>14 Numeric separators</h3><p><a href="https://github.com/tc39/proposal-numeric-separator" target="_blank" rel="noopener">见文档</a>,就是利用underscore的_符号，对数字进行分割，从而更直观的知道数字的大小，比如<br><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1_000_000_000</span>           <span class="comment">// Ah, so a billion</span></span><br><span class="line"><span class="number">101_475_938.3</span><span class="number">8</span>          <span class="comment">// And this is hundreds of millions</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fee = <span class="number">123_00</span>;       <span class="comment">// $123 (12300 cents, apparently)</span></span><br><span class="line"><span class="keyword">let</span> fee = <span class="number">12_300</span>;       <span class="comment">// $12,300 (woah, that fee!)</span></span><br><span class="line"><span class="keyword">let</span> amount = <span class="number">12345_00</span>;  <span class="comment">// 12,345 (1234500 cents, apparently)</span></span><br><span class="line"><span class="keyword">let</span> amount = <span class="number">123_4500</span>;  <span class="comment">// 123.45 (4-fixed financial)</span></span><br><span class="line"><span class="keyword">let</span> amount = <span class="number">1_234_500</span>; <span class="comment">// 1,234,500</span></span><br></pre></td></tr></table></figure></p>
<h3 id="15-regexp-legacy-features"><a href="#15-regexp-legacy-features" class="headerlink" title="15 regexp-legacy-features"></a>15 regexp-legacy-features</h3><ul>
<li>将很多浏览器已经实现了的，但是没有写入规范的RegExp构造函数上的属性，比如RegExp.$1-9、RegExp.input等写入规范，并且规定这些属性的特性。<a href="https://github.com/tc39/proposal-regexp-legacy-features/blob/master/changes.md" target="_blank" rel="noopener">具体改动</a></li>
</ul>
<h3 id="16-BigInt"><a href="#16-BigInt" class="headerlink" title="16 BigInt"></a>16 BigInt</h3><ul>
<li><p>新增一个数值类型：BigInt，用来表示大于2^53和小于-2^53的整数。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">123</span>n === <span class="string">'bigint'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Number和BigInt不能互转</p>
</li>
<li>重载了+ / 等运算符</li>
</ul>
<h3 id="17-Array-prototype-flatMap-flat"><a href="#17-Array-prototype-flatMap-flat" class="headerlink" title="17 Array.prototype.{flatMap,flat}"></a>17 Array.prototype.{flatMap,flat}</h3><ul>
<li>Array增加了两个原型方法，拍平数组（flatten），以及可以传入处理函数处理后再拍平（flatMap）</li>
<li>flatten 由于很多第第三方库已经实现了这个方法，所以为了避免冲突，这个方法在规范中已经改名为flat，并且chrome69已经实现了</li>
</ul>
<h2 id="ASI和class-fields"><a href="#ASI和class-fields" class="headerlink" title="ASI和class fields"></a>ASI和class fields</h2><p>由于增加了class field语法，这就导致和原本的ASI会有一些冲突迷惑的地方，会让ASI很难处理。具体的问题可以看这个<a href="https://docs.google.com/presentation/d/1bPzE6i_Bpm6FXgzfx9XFJNHGkVcM42lux-6bUNhxpl4/edit#slide=id.g29382c0eba_0_157" target="_blank" rel="noopener">slide</a>。经过讨论，TC39决定在class内还是要ASI，并且在规范内增加个声明，描述ASI可能遇到风险，但是有一句话是，explicit semicolon use is recommended。激起了社区广泛的讨论，质疑TC39是不是从官方的角度建议加上分好，不推荐semicolon-less风格。具体讨论见<a href="https://github.com/tc39/ecma262/pull/1062" target="_blank" rel="noopener">PR</a></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://kangax.github.io/compat-table/esnext/" target="_blank" rel="noopener">各个提案浏览器的实现情况</a></li>
<li><a href="https://github.com/tc39/proposals/blob/master/README.md" target="_blank" rel="noopener">所有proposal</a></li>
<li><a href="https://github.com/rwaldron/tc39-notes" target="_blank" rel="noopener">tc39的会议纪要</a></li>
<li><a href="https://github.com/tc39/agendas" target="_blank" rel="noopener">tc39的会议日程</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> ECMAScript规范 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ECMAScript规范 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ECMAScript2016规范理解（8）-new表达式的执行过程]]></title>
      <url>http://ldllidonglin.github.io/blog/2019/04/26/2019-04-26-ECMAScript2016%E8%A7%84%E8%8C%83%E7%90%86%E8%A7%A3%EF%BC%888%EF%BC%89-new%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>new 的执行过程是非常常见的一个问题，《JavaScript高级程序设计》中也讲了这个问题。现在有个问题：new一个bind之后的函数，结果是怎样的？本文尝试从规范的角度来解答这个问题<br><a id="more"></a></p>
<h2 id="new-表达式"><a href="#new-表达式" class="headerlink" title="new 表达式"></a>new 表达式</h2><h3 id="《JavaScript高级程序设计》中的说明"><a href="#《JavaScript高级程序设计》中的说明" class="headerlink" title="《JavaScript高级程序设计》中的说明"></a>《JavaScript高级程序设计》中的说明</h3><ul>
<li>创建一个新对象</li>
<li>将构造函数的作用域赋给新对象（因此this就指向了这个新对象）</li>
<li>执行构造函数中的代码（为这个新对象添加属性）</li>
<li>返回新对象</li>
</ul>
<h3 id="看看规范中是怎么讲的"><a href="#看看规范中是怎么讲的" class="headerlink" title="看看规范中是怎么讲的"></a>看看规范中是怎么讲的</h3><p><img src="./new.png" alt="new"><br>可以看到最终是执行了Construct<br><img src="./construct.png" alt="construct"><br>然后又去执行了Function对象的内置[[Construct]]方法<br><img src="./fc.png" alt="fc"><br>简单翻译下[[Construct]]函数的执行过程</p>
<ol>
<li>如果ConstructorKind记录为kind为base，那么this值为以 F.prototype || “%ObjectPrototype%”为原型创建的一个空对象，记为thisArg</li>
<li>创建新的函数执行上下文3，并且推入执行上下文堆栈，成为当前执行上下文</li>
<li>如果kind是base，给当前的执行上下文中环境记录项envRec中的this值设置为thisArg</li>
<li>执行函数体，结果为result（如果函数体中有this.x类似这样的赋值，那就能把值赋值到thisArg中了）</li>
<li>如果函数有return，并且返回的是object，那么直接返回函数体执行的结果</li>
<li>如果函数有return，返回的不是object，但是kind是base， 那么直接返回之前创建的thisArg</li>
<li>如果函数有return，返回的不是object也不是undefined，但是kind不是base，那么就抛出异常（kind一共只有两种值，正常函数是kind，使用了class继承预发的是derived，也就是说在使用了class继承的类的构造函数中，如果有return语句，必须return object，否则会报错）</li>
<li>如果函数没有return，那就看函数的执行结果类型如果是 break continue throw，一般都会报错</li>
<li>函数没有return，执行结果是正常的，那么就返回之前执行上线文中的环境记录项envRec的this值，其实就是thisArg</li>
</ol>
<p>规范是不是很繁琐？因为它必须严谨，必须使用规范中的文法来描述整个执行过程，其实和高级程序设计中描述的基本一致，除了没有说明es6新增的class继承语法的边界问题。如果是考虑普通函数的话，用代码标识如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newFn</span>(<span class="params">constructor</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> obj = <span class="built_in">Object</span>.create(<span class="keyword">constructor</span>.prototype)</span><br><span class="line">  const result = <span class="keyword">constructor</span>.apply(obj, arguments.slice(1))</span><br><span class="line">  return (typeof result === 'object' &amp;&amp; result != null) ? result : obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="super-arguments"><a href="#super-arguments" class="headerlink" title="super(arguments)"></a>super(arguments)</h2><p>上面提到[[Construct]]在执行的时候，会判断[[ConstructorKind]]这个属性。而这个属性的定义在<a href="https://tc39.github.io/ecma262/#sec-ecmascript-function-objects" target="_blank" rel="noopener">9.2ECMAScript Function Objects</a>。其中规定了只有两种值，分别是kind和derived。全局搜索就能发现在普通函数定义时，会把[[ConstructorKind]]设置为base，在使用了extends实现继承的class定义时，会被设置为derived。 所以上面的执行过程中，如果是derived有两个特殊情况：</p>
<ol>
<li>不会默认用当前函数的原型去创建一个对象作为this绑定在当前执行上下文</li>
<li>[[Construct]]函数要么不返回，要么返回对象或者undefined，其余值都会报错<br>这也就是为何要规定，如果声明了constructor函数就必须显示的调用super来设置当前执行环境中环境记录项的this值。在<a href="http://xiaoxuehua.xyz/blog/2019/04/09/2019-04-09-ECMAScript2016%E8%A7%84%E8%8C%83%E7%90%86%E8%A7%A3%EF%BC%886%EF%BC%89-super/" target="_blank" rel="noopener">ECMAScript2016规范理解（6）-super</a>中有说明super(arguments)的执行过程。其最终也是调用了Construct(func, argList, newTarget)。并且把result设置为当前含有this的环境记录项中的的this值（有点绕）。这就有问题了，调用super时，也就是调用父类的构造函数，父类的构造函数中往往有this.x等这样的赋值操作，为何this.x最终是赋值到了子类的对象上，而不是父类构造出来的对象呢？用如下示例代码来解释：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> A()</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> B()</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>注意：<ul>
<li>在调用Construct时的 newTarget 参数是通过 GetNewTarget()获得的，而GetNewTarget是获取GetThisEnvironment 的 [[NewTarget]] ，根据Function Environment Records的说明，当环境记录项是由[[Construct]]执行时创建的，那么[[NewTarget]] 就是正在执行的[[Construct]]函数的newTarget参数。也就是说，上面示例代码中的 b函数本身。</li>
<li>所以最终去执行通过super找到父类的构造函数，然后去执行父类构造函数a的内置[[Construct]] 方法时，newTarge是子类函数b。所以创建出来的thisArg是子类函数b为原型创建的空对象，这就解释了为何通过super调用父类的构造函数创建出来的对象，其原型反而是子类的prototype</li>
</ul>
</li>
</ul>
<h2 id="当new操作符对应的是bind后的函数时"><a href="#当new操作符对应的是bind后的函数时" class="headerlink" title="当new操作符对应的是bind后的函数时"></a>当new操作符对应的是bind后的函数时</h2><p>在规范中，bind之后的那个函数，是被定义为Bound Function Exotic Objects。其Construct方法和前文说的不一样。并且它还有三个内置属性[[BoundTargetFunction]]    [[BoundThis]]    [[BoundArguments]]，其实从名字基本能猜出其意思，正是由于[[BoundThis]]的存在，bind之后的函数，使用call，apply都是没法改变其执行是的this值的，接下来我们看看规范中是怎么描述[[Construct]]方法的<br><img src="./bindc.png" alt="bindc"><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = funa.bind(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">new</span> fun()</span><br><span class="line"><span class="comment">// 执行流程</span></span><br><span class="line"><span class="comment">// -&gt; new constructor();</span></span><br><span class="line"><span class="comment">// -&gt; Construct(constructor, argList)</span></span><br><span class="line"><span class="comment">// -&gt; constructor.[[Construct]](argumentsList, newTarget)</span></span><br><span class="line"><span class="comment">// -&gt; Construct(BoundTargetFunction, argList)</span></span><br><span class="line"><span class="comment">// -&gt; BoundTargetFunction.[[Construct]](argumentsList, BoundTargetFunction)</span></span><br><span class="line"><span class="comment">// -&gt; 普通函数的构造方法流程</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>注意<ul>
<li>执行new表达式的时候，执行这句Construct(constructor, argList)，是没有带第三个参数newTarget的。Construct内部会把newTarget的值设置为F，然后再去调用 F.<a href="argumentsList, newTarget">[Construct]</a>，F是参数constructor</li>
<li>在Bound Function 的[[Construct]]中，执行的Construct(target, args, newTarget)，其实target为bind前的源函数[[BoundTargetFunction]]，newTarget由于和F是相等的，所以newTarge也为[[BoundTargetFunction]]。</li>
<li>所有最终，Bound Function 的[[Construct]]，又去调用了[[BoundTargetFunction]]的内置属性，区别是args是合并了[[BoundArguments]]和new时传入的参数</li>
</ul>
</li>
</ul>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a, b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = a.bind(obj, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">new</span> b(<span class="number">2</span>)</span><br><span class="line"><span class="comment">// 1 2</span></span><br></pre></td></tr></table></figure>
<p>最终打印出来的是 1 2</p>
]]></content>
      
        <categories>
            
            <category> ECMAScript规范 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ECMAScript规范 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTTP Cache]]></title>
      <url>http://ldllidonglin.github.io/blog/2019/04/22/2019-04-22-HTTP%20Cache/</url>
      <content type="html"><![CDATA[<p>HTTP 缓存机制和规范<br><a id="more"></a></p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>先看下mdn上对缓存的定义和解释</p>
<blockquote>
<p>缓存是一种保存资源副本并在下次请求时直接使用该副本的技术。当 web 缓存发现请求的资源已经被存储，它会拦截请求，返回该资源的拷贝，而不会去源服务器重新下载。这样带来的好处有：缓解服务器端压力，提升性能(获取资源的耗时更短了)。对于网站来说，缓存是达到高性能的重要组成部分。缓存需要合理配置，因为并不是所有资源都是永久不变的：重要的是对一个资源的缓存应截止到其下一次发生改变（即不能缓存过期的资源）。<br>缓存的种类有很多,其大致可归为两类：私有与共享缓存。共享缓存存储的响应能够被多个用户使用。私有缓存只能用于单独用户。本文将主要介绍浏览器与代理缓存，除此之外还有网关缓存、CDN、反向代理缓存和负载均衡器等部署在服务器上，为站点和 web 应用提供更好的稳定性、性能和扩展性。</p>
</blockquote>
<h2 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h2><p>主要涉及到的规范有</p>
<ul>
<li><a href="https://tools.ietf.org/html/rfc7234" target="_blank" rel="noopener">rfc7234 Caching</a></li>
<li><a href="https://tools.ietf.org/html/rfc7232" target="_blank" rel="noopener">rfc7232 Conditional Requests</a></li>
</ul>
<h2 id="Header字段定义"><a href="#Header字段定义" class="headerlink" title="Header字段定义"></a>Header字段定义</h2><ul>
<li><p>Age</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Age:</span> <span class="number">8890</span></span><br></pre></td></tr></table></figure>
<p>respons Header中才可能有该字段，单位为秒。有这个字段说明是该请求命中了代理缓存，比如cdn。这个值就是当前时间减去代理缓存建立的时间（respons中的Date字段）</p>
</li>
<li><p>Cache-Control<br>这个字段在request和respons的header中都可能出现。</p>
<ul>
<li>request<ul>
<li>max-age，缓存有效时间，单位为秒。在request中使用该字段，意思是说将不会使用respons中的Age大于该值的缓存。</li>
<li>max-stale，单位为秒。意思是可以使用过期时间在这个值内的缓存，如果不设置值，那意思是说，可以接收过期时间为任意值的缓存。</li>
<li>min-fresh，告诉缓存服务器，可接受的缓存的过期时间必须要 &gt; Age + min-fresh</li>
<li>no-cache，不校验本地的缓存，直接请求，但是可能会命中304的规则</li>
<li>no-store，告诉中间所有过程，不允许缓存任何内容包括request和respons。注意：如果请求是从一个cache中获取的，cache中现有的respons是不会被清除的。</li>
<li>no-transform，告诉中间代理，不允许改变结果的媒体类型</li>
<li>only-if-cached，告诉中间代理，只接受缓存响应，无缓存则返回504</li>
</ul>
</li>
<li>respons<ul>
<li>must-revalidate，忽略max-stale参数，当缓存过期时，必须向源服务器验证缓存是否有效，只适用于public</li>
<li>no-store，不允许中间过程缓存任何信息</li>
<li>no-cache，告诉浏览器，下次请求不校验本地的缓存，直接请求，但是可能会命中304的规则。就算返回了304，缓存中的header不能被使用，只能把body和304回来的header合并作为respons响应304的request</li>
<li>no-transform，告诉中间代理，不允许改变结果的媒体类型</li>
<li>public，所有中间过程都可以缓存。当在request中有Authorization字段时，给Cache-Control指定public也能让respons缓存</li>
<li>private，所有中间过程不允许缓存，只有浏览器可以</li>
<li>proxy-revalidate，和must-revalidate意义一样，但是这个是适用于private</li>
<li>max-age，缓存有效时间，单位为秒</li>
<li>s-maxage，在中间代理中，s-maxage会覆盖max-age的作用</li>
</ul>
</li>
<li>可以使用扩展字段，形如：Cache-Control: private, community=”UCI”。但是扩展字段目前很少使用，因为得依赖客户端(浏览器的实现，浏览器不识别将被忽略)</li>
</ul>
</li>
<li><p>Expires, 服务端返回的具体的绝对时间的时间戳，精确到秒。例如：Expires: Thu, 01 Dec 1994 16:00:00 GMT。是HTTP/1.0的产物，在现代浏览器中基本没用了，一般都会用Cache-Control来替代，但是为了兼容性，一般web server还是会返回这个字段。</p>
</li>
<li><p>Pragma，HTTP/1.0，只有一种值：Pragma: no-cache；和Cache-Control: no-cache作用一样，用来兼容使用了Cache-Control的请求在HTTP/1.0的环境下能正常工作。优先级比Cache-Control低</p>
</li>
<li><p>Last-Modified/If-Modified-Since</p>
<ul>
<li>HTTP/1.0规定的协商缓存的方案，值是时间戳，和Expires有一样的问题，只能精确到秒。当respons中有Last-Modified时，下次request就会带上 If-Modified-Since</li>
</ul>
</li>
<li><p>ETag/If-None-Match</p>
<ul>
<li>HTTP/1.1 用来解决Last-Modified/If-Modified-Since解决不了的问题，更准确，当有If-None-Match字段时，要忽略If-Modified-Since字段。当respons中有ETag时，下次request就会带上 If-None-Match</li>
</ul>
</li>
<li><p>Vary，respons中的字段，告诉中间代理，通过缓存中的Vary标识的字段来判断，后续请求是否可以使用缓存，还是去服务器重新请求。最常见的情况是Vary: Accept-Encoding。意思就是如果request中的Accept-Encoding和缓存中的Accept-Encoding不一样的话，不能使用缓存，要重新请求。Vary: *和Cache-Control: private效果一样，就是中间代理不会缓存，每次都会去源服务器重新请求资源</p>
</li>
<li><p>If-Match/If-Unmodified-Since 这是两个和If-None-Match/If-Modified-Since出现的时机一样，但作用相反，都是在request中出现，但是一般用于PUT、POST等请求中用于校验请求是否能被处理。如果校验结果为false，则返回412 Precondition Failed。请求失败。可以避免<a href="https://www.w3.org/1999/04/Editing/#3.1" target="_blank" rel="noopener">请求丢失问题</a></p>
</li>
<li><p>ETag有强弱之分，我们常见的都是强ETag，弱ETag的格式是W/“1”，他们的区别可以用规范中的一张图来说明<br><img src="./Etag.png" alt="etag"></p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>HTTP/1.0时期的缓存解决方案是Pragma和Expires，功能单一，且Expires用的是服务端时间和客户端的时间不一致的实话，会造成时间冲突，从而造成缓存失效。</li>
<li>HTTP/1.1后使用Cache-Control来控制客户端以及中间代理的缓存，Last-Modified/If-Modified-Since、ETag/If-None-Match这两组来实现协商缓存</li>
<li>注意带有Vary的响应头，可以控制中间代理是否能使用缓存来响应请求。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HTTP缓存 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ECMAScript2016规范理解（7）-Function.prototype]]></title>
      <url>http://ldllidonglin.github.io/blog/2019/04/17/2019-04-17-ECMAScript2016%E8%A7%84%E8%8C%83%E7%90%86%E8%A7%A3%EF%BC%887%EF%BC%89-Function.prototype/</url>
      <content type="html"><![CDATA[<p>Function.prototype这个特殊的函数对象，导致在分析原型链的时候，容易造成困扰<br><a id="more"></a></p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>先看一段代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span> <span class="keyword">instanceof</span> <span class="built_in">Object</span>                <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span> <span class="keyword">instanceof</span> <span class="built_in">Function</span> 		<span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Function</span> <span class="keyword">instanceof</span> <span class="built_in">Object</span> 		<span class="comment">// true</span></span><br><span class="line"><span class="built_in">Function</span> <span class="keyword">instanceof</span> <span class="built_in">Function</span> 	        <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p>
<p>从代码上来看，是Function和Object互相为各自的构造函数，这是为何？</p>
<h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><ul>
<li><p>Object</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="built_in">Object</span> <span class="comment">// function</span></span><br><span class="line"><span class="built_in">Object</span> <span class="keyword">instanceof</span> <span class="built_in">Function</span> <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Object</span>.__proto__ === <span class="built_in">Function</span>.prototype <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>先看规范中怎么说<br><img src="./Object.png" alt="Object"><br>说明他是一个内置对象，普通函数调用就是做类型转换，用new调用就是返回一个普通对象。<br>从代码中看它是Function.prototype构造出来的实例</p>
</li>
<li><p>Object.prototype</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="built_in">Object</span>.prototype <span class="comment">// object</span></span><br><span class="line"><span class="built_in">Object</span>.prototype <span class="keyword">instanceof</span> <span class="built_in">Object</span> <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.__proto__ === <span class="literal">null</span>  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p><img src="./Object.prototype.png" alt="Object.prototype"><br>Object.prototype是一个对象，但它不是由Object创建的，它是一个内置对象。这个对象是规范规定的所有对象的原型链的终点，因为其内置[[prototype]]属性为null。</p>
</li>
<li><p>Function </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="built_in">Function</span> <span class="comment">// function</span></span><br><span class="line"><span class="built_in">Function</span> <span class="keyword">instanceof</span> <span class="built_in">Object</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>通过以上代码，显而易见，Function是Object的实例，再看看规范中的定义<br><img src="./Function.png" alt="Function"></p>
</li>
<li><p>Function.prototype</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="built_in">Function</span>.prototype <span class="comment">// function</span></span><br><span class="line"><span class="built_in">Function</span>.prototype <span class="keyword">instanceof</span> <span class="built_in">Function</span> <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Function</span>.prototype <span class="keyword">instanceof</span> <span class="built_in">Object</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>以上代码会带来疑惑，typeof的结果是个function，但是又不是Function的实例，反而是Object的实例。也就是说，他是个函数对象，但是内部[[prototype]]属性是Object.prototype。说明它是一个特殊函数。看看规范中是怎么写的<br><img src="./Function.prototype.png" alt="Function.prototype"><br>明确规定了它：</p>
<ul>
<li>是%FunctionPrototype%内置对象，</li>
<li>是function object</li>
<li>可以接收任何参数执行，返回undefined</li>
<li>没有[[Construct]]内置方法，所以不能被当做构造函数用new调用</li>
<li>有 [[Prototype]] 内置属性，值为 %ObjectPrototype%.</li>
<li>作为函数没有prototype属性</li>
<li>作为函数其length属性为0</li>
<li>Function.prototype.name为空字符串</li>
</ul>
</li>
</ul>
<h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><ul>
<li>规范中规定Object是个函数，且其内置属性<strong>proto</strong> 是Function.prototype。所以Object instanceof Function为true。而规范中又规定Function.prototype是个函数对象，也就是他的内置属性<strong>proto</strong>是Object.prototype。所以Object instanceof Object也为true</li>
<li>规范中规定Function的内置属性<strong>proto</strong>是Function.prototype。从字面意思来说，就是说他是由自身构造出来的一个对象。所以Function instanceof Function为true。然后又因为Function.<strong>proto</strong>.<strong>proto</strong>也就是Function.prototype.<strong>proto</strong>是Object.prototype，所以Function instanceof Object也是true</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>Object是个函数，所以其<strong>proto</strong>是Function.prototype，这个好理解</li>
<li>Function也是一个函数，所以其<strong>proto</strong>是Function.prototype，这个也好理解</li>
<li>特殊之处在Function.prototype，原型链这种机制必须有终点，规范中规定所有对象的原型链终点是Object.prototype。所以Function.prototype的<strong>proto</strong>是Object.prototype。但是又把Function.prototype设计为一个函数，所以导致了迷惑。但是如果把它的<strong>proto</strong>设置成和普通函数一样是Function.prototype。那原型链就死循环了，所以只能是Object.prototype。可以说Function.prototype是唯一一个不继承Function.prototype的函数</li>
</ul>
<h2 id="相关博文"><a href="#相关博文" class="headerlink" title="相关博文"></a>相关博文</h2><p><a href="https://github.com/creeperyang/blog/issues/9" target="_blank" rel="noopener">从<strong>proto</strong>和prototype来深入理解JS对象和原型链</a><br><a href="https://github.com/yygmind/blog/issues/35" target="_blank" rel="noopener">【进阶5-3期】深入探究 Function &amp; Object 鸡蛋问题</a></p>
]]></content>
      
        <categories>
            
            <category> ECMAScript规范 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ECMAScript规范 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ECMAScript2016规范理解（6）-super]]></title>
      <url>http://ldllidonglin.github.io/blog/2019/04/09/2019-04-09-ECMAScript2016%E8%A7%84%E8%8C%83%E7%90%86%E8%A7%A3%EF%BC%886%EF%BC%89-super/</url>
      <content type="html"><![CDATA[<p>super关键字的理解<br><a id="more"></a><br>super关键字最常出现的地方就是在继承时会使用到。class A 继承 class B 的时候，在A的construction中的必须有super函数的调用。那super关键字在规范中是怎么定义的呢</p>
<h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>在<a href="https://tc39.github.io/ecma262/#sec-reserved-words" target="_blank" rel="noopener">11.6.2.1 Keywords</a>中，规定了super是一个关键字</p>
<h3 id="左值表达式"><a href="#左值表达式" class="headerlink" title="左值表达式"></a>左值表达式</h3><p>在<a href="https://tc39.github.io/ecma262/#prod-SuperProperty" target="_blank" rel="noopener">12.3</a>中规定了使用super可以组成一种左值表达式，形式一种有两种：</p>
<ul>
<li>super property<br><img src="super-property.png" alt="super-property"></li>
<li>super call<br><img src="super-call.png" alt="super-call"><br>用代码来表示就是<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">super</span>[<span class="string">'a'</span>]</span><br><span class="line"><span class="keyword">super</span>.a</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="keyword">super</span>(<span class="built_in">arguments</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>在<a href="https://tc39.github.io/ecma262/#sec-super-keyword" target="_blank" rel="noopener">12.3.5.1</a>中具体规定了这两种表达式的执行过程。<br><img src="super-eva.png" alt="super-eva"></p>
<h3 id="注意的点"><a href="#注意的点" class="headerlink" title="注意的点"></a>注意的点</h3><ul>
<li>super property<br>这种表达式最终会执行GetSuperBase来获取super的值，就是当前函数的[[prototype]]内部属性。这个函数执行过程是取当前执行环境的Environment Record 的 [[HomeObject]]属性，然后再取它的[[prototype]]内部属性值。</li>
<li><p>在GetSuperBase执行过程中，如果发现当前环境不是method的话，那么会报错，如下代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  b: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">super</span>.d)</span><br><span class="line">  &#125;,</span><br><span class="line">  d: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Uncaught SyntaxError: 'super' keyword unexpected here</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  b() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">super</span>.d)</span><br><span class="line">  &#125;,</span><br><span class="line">  d: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 正确</span></span><br></pre></td></tr></table></figure>
<p>因为第一个定义b时，在规范中属于PropertyDefinition，而在第二个定义的时候，是MethodDefinition。PropertyDefinition中是不允许使用super关键字的。</p>
</li>
<li><p>super.x = 1 和 super.x 这时super指向的值是不一样的</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.x = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">super</span>.x = <span class="number">30</span>;<span class="comment">// 此时的 super 就是 b，也就是</span></span><br><span class="line">    console.log(<span class="keyword">super</span>.x); <span class="comment">// undefined 等用于是 A.prototype.x,所以是undefined</span></span><br><span class="line">    console.log(<span class="keyword">this</span>.x); <span class="comment">// 30</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let b = <span class="keyword">new</span> <span class="type">B</span>();</span><br></pre></td></tr></table></figure>
<p>上面的代码从规范的角度来讲，区别就是super.x = 30 是一个赋值表达式，执行赋值表达式时对super.x这种是会特殊处理的，最终是把x写到this对象上了，而在constructor中的this就是最终的实例对象b</p>
</li>
<li>super可以在子类的静态方法中调用父类的静态方法，可以在子类的普通方法中调用父类的普通方法。两者不能混着调用。因为静态方法是定义在父类函数上的，而普通方法是定义在父类函数的prototype上的。super property执行的时候，super === [[HomeObject]][prototype], 而[[HomeObject]] === 调用当前方法的那个对象</li>
<li>super call 的执行过程简单来说就是两件事，获取当前函数对象的[[prototype]]，也就是父类的构造函数。然后以构造函数的形式执行这个函数，执行这个函数的结果为result，然后把当前执行堆栈中有this的执行环境的词法记录项中的this值设置为result,所以，super在子类的构造函数中必须在使用this之前执行。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> ECMAScript规范 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ECMAScript规范 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ECMAScript2016规范理解（5）-Object]]></title>
      <url>http://ldllidonglin.github.io/blog/2018/11/24/2018-11-24-ECMAScript2016%E8%A7%84%E8%8C%83%E7%90%86%E8%A7%A3%EF%BC%885%EF%BC%89-Object/</url>
      <content type="html"><![CDATA[<p>Object() 和 new Object()的区别<br><a id="more"></a></p>
<h2 id="问题的来源"><a href="#问题的来源" class="headerlink" title="问题的来源"></a>问题的来源</h2><p>事情的起源是我在看react组件被babel编译后的代码长什么样，发现对于一个组件，编译后的代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> App =</span><br><span class="line"><span class="comment">/*#__PURE__*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">_Component</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Object</span>(_Users_dongtu_Documents_ldl_react_demo_react_demo_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__[<span class="string">"default"</span>])(App, _Component);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">Object</span>(_Users_dongtu_Documents_ldl_react_demo_react_demo_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__[<span class="string">"default"</span>])(<span class="keyword">this</span>, App);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>(_Users_dongtu_Documents_ldl_react_demo_react_demo_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__[<span class="string">"default"</span>])(<span class="keyword">this</span>, <span class="built_in">Object</span>(_Users_dongtu_Documents_ldl_react_demo_react_demo_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__[<span class="string">"default"</span>])(App).apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>(_Users_dongtu_Documents_ldl_react_demo_react_demo_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__[<span class="string">"default"</span>])(App, [&#123;</span><br><span class="line">    key: <span class="string">"render"</span>,</span><br><span class="line">    value: <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(<span class="string">"div"</span>, &#123;</span><br><span class="line">        className: <span class="string">"App"</span>,</span><br><span class="line">        __source: &#123;</span><br><span class="line">          fileName: _jsxFileName,</span><br><span class="line">          lineNumber: <span class="number">8</span></span><br><span class="line">        &#125;,</span><br><span class="line">        __self: <span class="keyword">this</span></span><br><span class="line">      &#125;, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(<span class="string">"header"</span>, &#123;</span><br><span class="line">        className: <span class="string">"App-header"</span>,</span><br><span class="line">        __source: &#123;</span><br><span class="line">          fileName: _jsxFileName,</span><br><span class="line">          lineNumber: <span class="number">9</span></span><br><span class="line">        &#125;,</span><br><span class="line">        __self: <span class="keyword">this</span></span><br><span class="line">      &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> App;</span><br><span class="line">&#125;(react__WEBPACK_IMPORTED_MODULE_5__[<span class="string">"Component"</span>]);</span><br></pre></td></tr></table></figure></p>
<p>我发现竟然有很多直接调用Object(v)方法，而不是new Object(v), 或者直接使用v。然后我就在想为何要这么用，这俩有啥区别,网上搜了一遍也没搜到答案，还是看规范吧，规范在<a href="https://tc39.github.io/ecma262/#sec-object-objects" target="_blank" rel="noopener">19章</a><br><img src="object.png" alt="object"><br>意思就是：</p>
<ul>
<li>如果NewTarget既不是undefined，也不是当前执行环境的active function时，就会执行OrdinaryCreateFromConstructor，就是从构造函数创建对象</li>
<li>如果value是null或者undefined或者没有提供，返回一个用ObjectPrototype为原型创建的对象</li>
<li>以上都不是，那就返回ToObject(value)</li>
</ul>
<h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><h3 id="NewTarget"><a href="#NewTarget" class="headerlink" title="NewTarget"></a>NewTarget</h3><p>规范在<a href="https://tc39.github.io/ecma262/#prod-NewTarget" target="_blank" rel="noopener">12.3</a>,它是一个左值表达式分类下的MetaProperty，它返回的是当前Environment Records的[[NewTarget]]属性，<code>new.target</code>看<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target" target="_blank" rel="noopener">MDN</a>的解释,这个时候new并不是一个对象，<code>new.</code>被认为是一个虚拟的上下文，从而让<code>target</code>能返回值。</p>
<h3 id="active-function"><a href="#active-function" class="headerlink" title="active function"></a>active function</h3><p>规范在<a href="https://tc39.github.io/ecma262/#active-function-object" target="_blank" rel="noopener">8.3 执行上下文</a>,原文是<code>The value of the Function component of the running execution context is also called the active function object.</code> 其实就是当前执行环境的function component</p>
<h3 id="ToObject"><a href="#ToObject" class="headerlink" title="ToObject"></a>ToObject</h3><p><img src="toobject.png" alt="toobject"></p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">new</span>.target);</span><br><span class="line">&#125;</span><br><span class="line">a(); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">new</span> a(); <span class="comment">// ƒ a()&#123;</span></span><br><span class="line">        <span class="comment">//    console.log(new.target);</span></span><br><span class="line">        <span class="comment">//  &#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>也就是说，当使用new Object(…)时，NewTarget就是function object(new 表达式执行时决定的)，所以最终是到了ToObject()，当直接使用Object()时，NewTarget是undefined，所以最终还是到了ToObject，也就是说这俩在使用的时候没有区别。。。。那规范中Object函数的执行为何要加上对NewTarget既不是undefined也不是当前执行函数的情况的处理逻辑，什么情况下NewTarget才会满足这个情况呢？我是想不出来…</p>
]]></content>
      
        <categories>
            
            <category> ECMAScript规范 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ECMAScript规范 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端性能优化]]></title>
      <url>http://ldllidonglin.github.io/blog/2018/11/05/2018-11-05-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<p>前端性能优化是一个老生常谈的问题，并且在面试的时候，这个题几乎是面试官非常喜欢的一道题。这篇文章主要是总结自己之前在移动端H5性能优化上的实践和思考。<br><a id="more"></a></p>
<h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>对于前端页面来说来说，性能优化的点可以分为两大类：加载性能优化和渲染性能优化。加载性能越好，用户就能越快的看到页面，跳失率越低，从商业的角度来看就是收益会越高。渲染性能决定了数据到达用户手机后能够多块的展现，这一块其实还包括了交互性能。</p>
<h3 id="加载性能"><a href="#加载性能" class="headerlink" title="加载性能"></a>加载性能</h3><h4 id="静态资源加载"><a href="#静态资源加载" class="headerlink" title="静态资源加载"></a>静态资源加载</h4><ul>
<li>速度。主要就是两点：减小体积、减少请求数。<ul>
<li>js和css，目前正常的线上应用应该都会压缩代码、合并combo请求。理想是1个css、1个js请求。对于目前大量的SPA，并且基本都会依赖webpack等打包工具，需要注意减少不必要的无用包被打到bundle中，可以利用<a href="https://www.npmjs.com/package/webpack-bundle-analyzer" target="_blank" rel="noopener">webpack-bundle-analyzer</a>这个工具进行分析。还有就是充分利用webpack提供的各种分包工具、依赖动态加载、异步路由等等工具实现首屏加载的资源最小化。</li>
<li>图片压缩。tiny.png是一个很好的在线压缩图片的地方。最好是能有一个公共库处理所有图片资源。最简单的比如安卓采用webp。如果cdn支持压缩参数，那必须根据网络环境、设备屏幕大小、图片所占空间的尺寸，来控制图片尺寸、压缩比例。还可以用DataURI、iconfont、svg等方式替换图片，也可以有效减少图片请求</li>
<li>域名收敛。由于目前移动端HTTP/2的支持率已经很高了，所以已经不需要分拆域名了，收敛域名反而能加快资源的加载。期望的效果是：图片一个域名，js和css一个域名、动态请求一个域名。</li>
</ul>
</li>
<li>优先级。<ul>
<li>如果是后端渲染的页面，那在dom渲染之前不应该出现任何js，因为渲染DOM的优先级是最高的。如果是SPA等采用前端渲染的应用的话那就另说。</li>
<li>css要在head中，但是在移动端要考虑首屏，所以如果css很多的话，需要考虑css分拆，在head中只加载首屏用到的css，非首屏的css可以在后面引入。</li>
<li>减少不必要的DOM。最好的方案应该是首屏直出，后面的DOM用前端渲染。或者使用懒渲染。直出的页面只有占坑的DOM，随着滚动加载对应的DOM。或者对于需要接口数据来渲染的DOM，可以用js来渲染，而不是直接将全部DOM预设在HTML中，影响文档加载时间和DOM渲染时间。</li>
<li>所有图片、视频都必须懒加载。无论是img标签还是背景图片，一律懒加载。因为不懒加载的话，非首屏的图片会在页面进入的时候，严重占用系统资源，影响首屏时间。图片懒加载需要考虑一个问题就是懒加载是由js触发的，所以其执行的时机一定要靠前，因为一开始进入页面的时候，首屏图片由于懒加载时也是没有加载渲染的，所以可以考虑把懒加载的相关逻辑代码直接内嵌在html中，并且在其他的js之前。让首屏的图片尽可能的快加载。如果页面是知道哪些资源是首屏的话，那首屏的图片就不要懒加载了。</li>
</ul>
</li>
</ul>
<h4 id="网络性能优化"><a href="#网络性能优化" class="headerlink" title="网络性能优化"></a>网络性能优化</h4><p>网络层面的优化前端能做的事情不多，主要有以下几个方面:</p>
<ul>
<li>dns-prefetch、preconnect</li>
<li>使用http2</li>
<li>native容器代理前端请求。由于容器可以做提前建连等优化，所以如果容器能够代理前端的请求，那请求时间也能减少。</li>
</ul>
<h3 id="渲染性能"><a href="#渲染性能" class="headerlink" title="渲染性能"></a>渲染性能</h3><h4 id="优化CRP-Critical-Rendering-Path"><a href="#优化CRP-Critical-Rendering-Path" class="headerlink" title="优化CRP(Critical-Rendering-Path)"></a>优化CRP(Critical-Rendering-Path)</h4><p>关键渲染路径:从收到 HTML、CSS 和 JavaScript 字节到对其进行必需的处理，从而将它们转变成渲染的像素这一过程中的一些中间步骤。关于CRP的解释以及优化思路和方法可以参考谷歌官方的博客<a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/" target="_blank" rel="noopener">优化CRP</a>，总的来说就是减少关键资源的数量、关键路径长度、关键字节的数量</p>
<h4 id="优化数据获取速度"><a href="#优化数据获取速度" class="headerlink" title="优化数据获取速度"></a>优化数据获取速度</h4><p>需要进行前端渲染的页面都是在前端实现（数据+模板）=&gt; dom 这个过程的。由于生成dom已经够快了，并不是瓶颈，所以优化渲染性能需要解决的就是如何更快的获取到数据</p>
<ul>
<li>本地硬缓存，这个缓存的粒度可粗可细，可以直接把数据缓存，也可以把渲染后的dom直接缓存了，但这只适用于数据变化不大的页面。</li>
<li>数据预加载。目前预加载需要容器的配合，通过和容器的约定，在请求页面的时候容器同步请求数据，这样在js执行到获取数据的时候，数据其实已经到容器了。</li>
</ul>
<h4 id="交互体验优化"><a href="#交互体验优化" class="headerlink" title="交互体验优化"></a>交互体验优化</h4><ul>
<li>这个主要是css和dom的渲染速度优化，基本的规则都已经深入人心了，比如利用css3特性提升渲染层、合成层优化、避免reflow|repaint等等</li>
<li>大量动画的时候注意css的性能，避免使用js动画</li>
<li>滚动事件，一般是懒加载或者是需要根据滚动进行不同展现的一些需求，一般滚动都要用throttle处理，不然必然会影响滚动的体验，还有就是绑定事件时使用 passive 参数</li>
</ul>
<h2 id="性能数据采集"><a href="#性能数据采集" class="headerlink" title="性能数据采集"></a>性能数据采集</h2><p>在进行性能优化之前，必须进行性能数据采集这项工作。这个的重要性不言而喻。性能数据采集主要有以下几个问题需要解答：采集什么？如何采集？采集后如何处理？</p>
<h3 id="采集指标"><a href="#采集指标" class="headerlink" title="采集指标"></a>采集指标</h3><p>这个问题其实目前并没有完美的解决方案，因为性能是一个感官上的东西，要对他进行量化本来就很难，而且怎么量化的精确、准确就更难了，我所了解的主要有一下几种方案：</p>
<ul>
<li>window.performance.timing<br>这个方案最简单、兼容性最好，可以完整的记录整个文档生命周期中的各个时间节点，但是缺陷就是它是描述整个页面的，并不能直接给出比如白屏时间、首屏时间等指标</li>
<li>fcp\fmp\fci<br>这个是lighthouse的工具使用的一些指标，First Contentful Paint（首次内容渲染）、First Meaningful Paint（首次有效渲染）、First CPU Idle（首次可交互时间）。这些指标是直接面向用户的指标，具体计算方法可以参考<a href="https://developers.google.com/web/fundamentals/performance/user-centric-performance-metrics#first_paint_and_first_contentful_paint" target="_blank" rel="noopener">谷歌官方解释</a></li>
</ul>
<h3 id="采集方法"><a href="#采集方法" class="headerlink" title="采集方法"></a>采集方法</h3><p>其实就是如何把采集到的数据上报，有两种方式比较常见：页面关闭时、页面onload后。我的经验是用页面关闭时触发的事件来发送埋点不是非常可靠，比如有的情况是页面不关闭，或者关闭太快js并没有执行，会导致整体的丢包率有点高。所以我采用的方式是onload后触发埋点上报</p>
<h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><p>这一块经验不多，推荐博客<a href="https://zhuanlan.zhihu.com/p/32262716" target="_blank" rel="noopener">把前端监控做到极致</a>。目标就是要实现前端性能监控。那就需要数据的实时处理、实时展现。这样才能实现前端性能优化的闭环，发现问题-&gt;解决问题-&gt;线上监控实时反馈-&gt;继续发现问题-&gt;…</p>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ul>
<li>一直以来web的性能都是一大槽点，也是和native相比最大的劣势。到底web的性能能不能和native接近，甚至超过。之前我一直觉得没可能，因为硬件性能的提升是普惠的，并不是只对web有提升。但是后来看了U4内核研发负责人的<a href="https://mp.weixin.qq.com/s/g1odJQZUgIvk4oJysKPnbw" target="_blank" rel="noopener">分享</a>，感觉还是有那么一点可能的，但是要付出很大的代价，并且肯定是前端、容器、网络、后端一起协同改造优化的结果，只靠前端那点优化手段是不可能的。</li>
<li>优化来优化去，在现在机器性能普遍提升的情况下，除了对动画性能要求高的各种炫酷页面、电商会场、游戏等等，渲染层面对于普通的页面其实已经没有多大的问题了。最大的问题还是在加载，目前虽然普及了4G，但是网络速度还是堪忧，并且网络链路非常复杂，也不好优化。那杀手锏级别的优化手段是什么？强缓存，无论是SW还是其他技术，就是在端（native、浏览器）直接把你的资源缓存在本地，资源加载时间在几十毫秒内，那页面秒开也就好办多了，但是又同时会引来缓存更新、到达率等等的新问题</li>
<li>这篇文章是20180118开始写的，今天才写完。。。</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://juejin.im/post/5a966bd16fb9a0635172a50a" target="_blank" rel="noopener">前端性能优化清单</a><br><a href="https://developers.google.com/web/tools/chrome-devtools/rendering-tools/" target="_blank" rel="noopener">chrome文档 分析运行时性能</a><br><a href="https://segmentfault.com/a/1190000008693178" target="_blank" rel="noopener">Web性能优化</a><br><a href="https://developers.google.com/web/tools/lighthouse/" target="_blank" rel="noopener">chrome文档 使用 Lighthouse 审查网络应用</a><br><a href="http://taobaofed.org/blog/2016/04/25/performance-composite/" target="_blank" rel="noopener">淘宝FED Composite优化</a><br><a href="https://www.w3.org/TR/navigation-timing/#sec-window.performance-attribute" target="_blank" rel="noopener">window.performance attribute</a><br><a href="https://developers.google.com/web/fundamentals/performance/user-centric-performance-metrics#tracking_fpfcp" target="_blank" rel="noopener">user-centric-performance-metrics</a><br><a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/" target="_blank" rel="noopener">critical-rendering-path</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 性能 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[service worker的思考]]></title>
      <url>http://ldllidonglin.github.io/blog/2018/06/03/2018-06-03-service%20worker%E7%9A%84%E6%80%9D%E8%80%83/</url>
      <content type="html"><![CDATA[<p>对service worker的思考<br><a id="more"></a></p>
<h2 id="what？"><a href="#what？" class="headerlink" title="what？"></a>what？</h2><ul>
<li>Chrome 提出和力推的一个 WEB API，用于给 web 应用提供高级的可持续的后台处理能力。该 WEB API 标准起草于 2013 年，于 2014 年纳入 W3C WEB 标准草案，当前还在草案阶段。</li>
<li>Service workers 本质上充当Web应用程序与浏览器之间的代理服务器，也可以在网络可用时作为浏览器和网络间的代理。它们旨在（除其他之外）使得能够创建有效的离线体验，拦截网络请求并基于网络是否可用以及更新的资源是否驻留在服务器上来采取适当的动作。他们还允许访问推送通知和后台同步API</li>
<li>在页面中注册并安装成功后，运行于浏览器后台，不受页面刷新的影响，可以监听和截拦作用域范围内所有页面的 HTTP 请求。结合 Fetch API、Cache API、Push API、postMessage API 和 Notification API，可以在基于浏览器的 web 应用中实现如离线缓存、消息推送、静默更新等 native 应用常见的功能，以给 web 应用提供更好更丰富的使用体验。</li>
<li>必须在 localhost 域或 HTTPS 域下运行、注册的js必须和站点同域</li>
<li><a href="https://caniuse.com/#feat=serviceworkers" target="_blank" rel="noopener">兼容性</a></li>
<li>应用场景（MDN）<ul>
<li>后台数据同步</li>
<li>响应来自其它源的资源请求</li>
<li>集中接收计算成本高的数据更新，比如地理位置和陀螺仪信息，这样多个页面就可以利用同一组数据</li>
<li>在客户端进行CoffeeScript，LESS，CJS/AMD等模块编译和依赖管理（用于开发目的）</li>
<li>后台服务钩子</li>
<li>自定义模板用于特定URL模式</li>
<li>性能增强，比如预取用户可能需要的资源，比如相册中的后面数张图片</li>
</ul>
</li>
</ul>
<h2 id="how？"><a href="#how？" class="headerlink" title="how？"></a>how？</h2><h3 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h3><ul>
<li><p>在html中加入如下脚本</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (navigator.serviceWorker != <span class="literal">null</span>) &#123;</span><br><span class="line">    navigator.serviceWorker.register(<span class="string">'/service-worker.js'</span>)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">registration</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Registered events at scope: '</span>, registration.scope);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>(<span class="string">'不支持sw'</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>service-worker.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cacheStorageKey = <span class="string">'blog-pwa-2018060100'</span></span><br><span class="line"><span class="keyword">var</span> cacheList = [</span><br><span class="line">  <span class="string">'/'</span>,</span><br><span class="line">  <span class="string">"/index.html"</span>,</span><br><span class="line">  <span class="string">"/statics/css/swiper.css"</span>,</span><br><span class="line">  <span class="string">"/statics/js/swiper.js"</span>,</span><br><span class="line">  <span class="string">"/statics/images/1.jpeg"</span>,</span><br><span class="line">  <span class="string">"/statics/images/6.jpeg"</span>,</span><br><span class="line">  <span class="string">"/statics/images/7.jpeg"</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.addEventListener(<span class="string">'install'</span>, e =&gt; &#123;</span><br><span class="line">  e.waitUntil(</span><br><span class="line">    caches.open(cacheStorageKey)</span><br><span class="line">    .then(<span class="function"><span class="params">cache</span> =&gt;</span> cache.addAll(cacheList))</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> self.skipWaiting())</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.addEventListener(<span class="string">'fetch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.respondWith(</span><br><span class="line">    caches.match(e.request).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (response != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> fetch(e.request.url)</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>经过以上处理，站点就能简单的拥有离线能力了。</p>
</li>
</ul>
<h3 id="需要思考的问题"><a href="#需要思考的问题" class="headerlink" title="需要思考的问题"></a>需要思考的问题</h3><ul>
<li>如何快速方便的更新service-worker.js?<ul>
<li>由于service-worker.js 需要和站点同源，所以在前后端分离的项目，就需要后端将将service-worker.js的请求转发到前端能控制的某个资源处</li>
<li>如果站点的html是由前端控制，而不是由后端模板控制的话，前端发布上线的时候需要更新service-worker的请求，带上时间戳或者md5戳都行，防止被http缓存从而没法更新</li>
<li>如果站点的html不是由前端控制，那为了保证service-worker.js的及时更新，最好设为无缓存时间，或者缓存时间特别短，比如5s。或者请求url上每次都自动加上时间戳，其实就是无缓存时间。避免每次上线还需要更新后端的模板。</li>
</ul>
</li>
<li>如何更新被serviceWorker缓存的资源？<ul>
<li>更新service-worker.js，会重新执行 install actived等事件，在这些事件中删除旧缓存，添加新缓存</li>
<li>由于旧的已经激活了的service worker还在运行，就会导致fetch会执行。在fetch中使用cache.match来判断是否命中缓存。由于cache.match是用request来匹配的，所以如果url没有变化的话，会返回true，从而直接从缓存中取response，会导致第一次打开页面获取的资源还是上一版本的。</li>
<li>所以要在前端更新的时候，url必须变化，从而在第一次打开的时候能正确更新</li>
</ul>
</li>
<li>自动化生成service-worker.js?<ul>
<li><a href="https://www.npmjs.com/package/sw-precache" target="_blank" rel="noopener">sw-precache</a>和<a href="https://github.com/GoogleChromeLabs/sw-toolbox" target="_blank" rel="noopener">sw-toolbox</a>是谷歌早前开发的工具；sw-precache是cache-first策略的缓存工具，会自动根据文件hash自动生成sw.js。fetch命中缓存后会直接返回缓存，然后会根据最新的缓存列表对缓存进行增删操作。sw-toolbox用来缓存一些第三方的资源以及增加了根据路由定制缓存策略的能力</li>
<li>谷歌都不会再维护以上两种工具了，他们认为的终极解决方案是<a href="https://developers.google.com/web/tools/workbox/" target="_blank" rel="noopener">workbox</a>，比上述两个工具的功能还要丰富，并且配合插件，使用也更便捷。</li>
<li>官方提供了npm包、cli、webpack的插件<a href="https://www.npmjs.com/package/workbox-webpack-plugin" target="_blank" rel="noopener">workbox-webpack-plugin</a></li>
</ul>
</li>
</ul>
<h3 id="有多大的收益？"><a href="#有多大的收益？" class="headerlink" title="有多大的收益？"></a>有多大的收益？</h3><ul>
<li>需要离线体验么？<ul>
<li>展示型的可以有，但是对于需要在线才有可用性的项目，可能真的没必要。</li>
<li>离线功能可以一定程度上保证低速网络的可用性</li>
</ul>
</li>
<li>SW的缓存和普通的HTTP缓存比，有何优势？<ul>
<li>控制力更强、粒度更细，缓存的时间、更新全部由前端代码完成，而不是nginx等服务器上的配置。</li>
<li>速度上应该没区别，都是缓存，而且应该都是存在硬盘中。</li>
</ul>
</li>
<li>消息推送通知<ul>
<li>国内无法使用</li>
</ul>
</li>
</ul>
<h3 id="上这样新技术，有怎样的风险点"><a href="#上这样新技术，有怎样的风险点" class="headerlink" title="上这样新技术，有怎样的风险点"></a>上这样新技术，有怎样的风险点</h3><ul>
<li>会不会增加白屏的可能性？<ul>
<li>增加sw，就和以前不同了，前端控制了请求的返回。请求直接在sw中进行一些逻辑判断，然后要么从缓存中取，要么直接去cdn中获取，那sw就需要考虑到各种情况，做好兜底，避免由于sw的问题，导致请求出错。sw最好是用sw-precache或者workbox生成的脚本，或者参考它生成的脚本来编写。</li>
</ul>
</li>
<li>浏览器兼容性<ul>
<li>目前IE和Safari都已经支持了SW，但是里面用到的Cache、Fetch等API及方法兼容性还不是很好，需要做好判断</li>
</ul>
</li>
</ul>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://w3c.github.io/ServiceWorker/" target="_blank" rel="noopener">service worker draft</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API" target="_blank" rel="noopener">MDN Service Worker API</a><br><a href="http://lzw.me/a/pwa-service-worker.html" target="_blank" rel="noopener">网站渐进式增强体验(PWA)改造：Service Worker 应用详解</a><br><a href="https://huangxuan.me/2017/07/12/upgrading-eleme-to-pwa/" target="_blank" rel="noopener">饿了么PWA实践</a><br><a href="http://www.zhangxinxu.com/wordpress/2017/07/service-worker-cachestorage-offline-develop/" target="_blank" rel="noopener">借助Service Worker和cacheStorage缓存及离线开发</a><br><a href="https://www.npmjs.com/package/sw-precache" target="_blank" rel="noopener">sw-precache</a><br><a href="https://github.com/GoogleChromeLabs/sw-toolbox" target="_blank" rel="noopener">sw-toolbox</a><br><a href="https://developers.google.com/web/tools/workbox/" target="_blank" rel="noopener">workbox</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> service-worker，缓存 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端数据管理]]></title>
      <url>http://ldllidonglin.github.io/blog/2018/04/06/2018-04-06-%E5%89%8D%E7%AB%AF%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<p>介绍当前比较流行的几种前端数据管理的解决方案<br><a id="more"></a></p>
<h1 id="flux"><a href="#flux" class="headerlink" title="flux"></a>flux</h1><p>facebook推出的构建用户界面的应用架构<br><img src="./flux.png" alt="flux结构"></p>
<ul>
<li>单向数据流，在view层不能直接修改数据，要修改数据只能通过提交action，然后dispatcher到stroe，使得整体数据的变化是可控的。</li>
<li>dispatcher作为连接action和store的通道，一个dispatcher必须注册各个action type的回调函数，从而实现，在回调函数中调用stroe的各种函数，让store实现变化。</li>
<li>在view层监听store的变化，从而更改view内部的state</li>
<li>官方实现版本<h2 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h2></li>
<li>dispatcher是否可以去掉，从flux/util提供的reduceStore来看，也是可以丢掉的。</li>
<li>太繁琐了，需要自己在view层监听store的变化，从而去改变state，应该设计一种根store传递到view，提交action时，修改store，从而直接导致view的变化。</li>
</ul>
<h1 id="flux-utils"><a href="#flux-utils" class="headerlink" title="flux/utils"></a>flux/utils</h1><ul>
<li><p>flux应该也知道其官方实现的flux太繁琐了，所以进化出flux/utils，其中有几个重要的概念</p>
<ul>
<li><p>container</p>
<ul>
<li>控制view，收集信息<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> AppView <span class="keyword">from</span> <span class="string">'../views/AppView'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Container&#125; <span class="keyword">from</span> <span class="string">'flux/utils'</span>;</span><br><span class="line"><span class="keyword">import</span> TodoActions <span class="keyword">from</span> <span class="string">'../data/TodoActions'</span>;</span><br><span class="line"><span class="keyword">import</span> TodoDraftStore <span class="keyword">from</span> <span class="string">'../data/TodoDraftStore'</span>;</span><br><span class="line"><span class="keyword">import</span> TodoEditStore <span class="keyword">from</span> <span class="string">'../data/TodoEditStore'</span>;</span><br><span class="line"><span class="keyword">import</span> TodoStore <span class="keyword">from</span> <span class="string">'../data/TodoStore'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStores</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    TodoEditStore,</span><br><span class="line">    TodoDraftStore,</span><br><span class="line">    TodoStore,</span><br><span class="line">  ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getState</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    draft: TodoDraftStore.getState(),</span><br><span class="line">    editing: TodoEditStore.getState(),</span><br><span class="line">    todos: TodoStore.getState(),</span><br><span class="line"></span><br><span class="line">    onAdd: TodoActions.addTodo,</span><br><span class="line">    onDeleteCompletedTodos: TodoActions.deleteCompletedTodos,</span><br><span class="line">    onDeleteTodo: TodoActions.deleteTodo,</span><br><span class="line">    onEditTodo: TodoActions.editTodo,</span><br><span class="line">    onStartEditingTodo: TodoActions.startEditingTodo,</span><br><span class="line">    onStopEditingTodo: TodoActions.stopEditingTodo,</span><br><span class="line">    onToggleAllTodos: TodoActions.toggleAllTodos,</span><br><span class="line">    onToggleTodo: TodoActions.toggleTodo,</span><br><span class="line">    onUpdateDraft: TodoActions.updateDraft,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Container.createFunctional(AppView, getStores, getState);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>reduceStore</p>
<ul>
<li>为了解决之前的store太繁琐。在container执行的时候，会传入action的所有handler，view层手动执行handler，从而触发dispatch。在store的reduce方法中，会针对各种action type返回全新的store<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//view</span></span><br><span class="line">&lt;input</span><br><span class="line">  checked=&#123;areAllComplete ? <span class="string">'checked'</span> : <span class="string">''</span>&#125;</span><br><span class="line">  id=<span class="string">"toggle-all"</span></span><br><span class="line">  <span class="keyword">type</span>=<span class="string">"checkbox"</span></span><br><span class="line">  onChange=&#123;props.onToggleAllTodos&#125;</span><br><span class="line">/&gt;</span><br><span class="line"><span class="comment">// action</span></span><br><span class="line">toggleAllTodos() &#123;</span><br><span class="line">  TodoDispatcher.dispatch(&#123;</span><br><span class="line">    <span class="keyword">type</span>: TodoActionTypes.TOGGLE_ALL_TODOS,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// store</span></span><br><span class="line"><span class="keyword">case</span> TodoActionTypes.TOGGLE_ALL_TODOS:</span><br><span class="line">  <span class="keyword">const</span> areAllComplete = state.every(<span class="function"><span class="params">todo</span> =&gt;</span> todo.complete);</span><br><span class="line">  <span class="keyword">return</span> state.map(<span class="function"><span class="params">todo</span> =&gt;</span> todo.set(<span class="string">'complete'</span>, !areAllComplete));</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>解决了最初版本中，需要在view层监听数据变化，从而触发view更新。</p>
</li>
</ul>
</li>
</ul>
<h1 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h1><ul>
<li>和flux加上flux/util很相似。就三个概念，action描述数据变化，reducer根据action来产生新的state。store就是联系action和reducer的。他会负责dispatch action。dispatch内部会执行reducer方法，从而更新state</li>
<li>store有一个subscribe函数，用来注册数据变化的监听函数，dispatch时，会在执行完reducer后，执行subscribe注册的函数。</li>
<li>总的来讲就是比flux简洁许多，整个结构清晰明了。</li>
<li>使用中间件的方式来处理异步数据流，比较有名的有<a href="https://github.com/gaearon/redux-thunk" target="_blank" rel="noopener">redux-thunk</a>和<a href="https://github.com/redux-saga/redux-saga" target="_blank" rel="noopener">redux-saga</a>和<a href="https://github.com/redux-utilities/redux-promise" target="_blank" rel="noopener">redux-promise</a></li>
<li>示例：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">state = &#123;count: 0&#125;, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'INCREASE'</span>: <span class="keyword">return</span> &#123;count: state.count + <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'DECREASE'</span>: <span class="keyword">return</span> &#123;count: state.count - <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">default</span>: <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  increase: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;<span class="keyword">type</span>: <span class="string">'INCREASE'</span>&#125;),</span><br><span class="line">  decrease: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;<span class="keyword">type</span>: <span class="string">'DECREASE'</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer);</span><br><span class="line"></span><br><span class="line">store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  <span class="built_in">console</span>.log(store.getState())</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">store.dispatch(actions.increase()) <span class="comment">// &#123;count: 1&#125;</span></span><br><span class="line">store.dispatch(actions.increase()) <span class="comment">// &#123;count: 2&#125;</span></span><br><span class="line">store.dispatch(actions.increase()) <span class="comment">// &#123;count: 3&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="react-redux"><a href="#react-redux" class="headerlink" title="react-redux"></a>react-redux</h1><ul>
<li>通过provider 在getChildContext 把store挂在context上，子组件就能通过context获取store，解决了用props层层传递的问题</li>
<li>容器组件都是connect过的，connect通过context获取store，然后再map到纯UI组件。</li>
<li>为了避免每个组件都从context上获取数据，又衍生了容器组件和purComponent。并且提供connect方法，把container包装一下，connect去context上获取数据<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">export <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Provider</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  getChildContext() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; store: <span class="keyword">this</span>.store &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  constructor(props, context) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props, context)</span><br><span class="line">    <span class="keyword">this</span>.store = props.store</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Children</span>.only(<span class="keyword">this</span>.props.children)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h1><ul>
<li>使用单一状态树，一个对象就包含了全部的应用层级状态。</li>
<li>几个概念，state(状态)、mutations(同步更改)、actions(异步更改)、getters(store的计算属性)、Module(模块化分割单一状态树)。</li>
<li>为了解决在不同组件中重复声明内部状态和store的联系，增加了mapState、mapMutations、mapGetters、mapActions几个辅助函数。</li>
<li><p>mutation必须是同步的，异步数据用dispatch action来触发异步操作。action中获取要异步数据后使用commit mutation来更新state。利用promise来解决异步数据的管理</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  actionA (&#123; commit &#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Promise(<span class="function"><span class="params">(resolve, reject)</span> =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        commit(<span class="string">'someMutation'</span>)</span><br><span class="line">        resolve()</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">store.dispatch(<span class="string">'actionA'</span>).<span class="keyword">then</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="regexp">//</span> ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>例子：</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  <span class="keyword">state</span>: &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (<span class="keyword">state</span>,payload) &#123;</span><br><span class="line">      <span class="keyword">state</span>.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    doneTodos: <span class="keyword">state</span> =&gt; &#123;</span><br><span class="line">      return <span class="keyword">state</span>.todos.filter(todo =&gt; todo.done)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    increment (context) &#123;</span><br><span class="line">      context.commit('increment')</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.commit('increment', <span class="number">10</span>)</span><br><span class="line">    </span><br><span class="line">const moduleA = &#123;</span><br><span class="line">  <span class="keyword">state</span>: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;,</span><br><span class="line">  getters: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const moduleB = &#123;</span><br><span class="line">  <span class="keyword">state</span>: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    a: moduleA,</span><br><span class="line">    b: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="Mobx"><a href="#Mobx" class="headerlink" title="Mobx"></a>Mobx</h1><ul>
<li>响应式、依赖收集</li>
<li>和react结合的例子，对视图用@observer装饰器，声明为依赖。数据变化的时候会自动执行数据对应的依赖<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;observer&#125; <span class="keyword">from</span> <span class="string">'mobx-react'</span>;</span><br><span class="line"></span><br><span class="line">@observer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimerView</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.onReset.bind(this)&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                Seconds passed: &#123;this.props.appState.timer&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    onReset () &#123;</span><br><span class="line">        <span class="keyword">this</span>.props.appState.resetTimer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">TimerView</span> <span class="attr">appState</span>=<span class="string">&#123;appState&#125;</span> /&gt;</span></span>, <span class="built_in">document</span>.body);</span><br><span class="line"></span><br><span class="line">appState.resetTimer = action(<span class="function"><span class="keyword">function</span> <span class="title">reset</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    appState.timer = <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">setInterval(action(<span class="function"><span class="keyword">function</span> <span class="title">tick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    appState.timer += <span class="number">1</span>;</span><br><span class="line">&#125;), <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="rxjs"><a href="#rxjs" class="headerlink" title="rxjs"></a>rxjs</h1><ul>
<li>结合了观察者模式、迭代器模式 和 使用集合的函数式编程，以满足以一种理想方式来管理事件序列所需要的一切。事件驱动、流管理。</li>
<li>结合react的例子<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> messages <span class="keyword">from</span> <span class="string">'./someObservable'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">ObservableComponent</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">messages</span>: []&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.messages = messages</span><br><span class="line">      <span class="comment">// 在数组中累积我们的消息</span></span><br><span class="line">      .scan(<span class="function">(<span class="params">messages, message</span>) =&gt;</span> [message].concat(messages), [])</span><br><span class="line">      <span class="comment">// 当得到一条新消息时进行渲染</span></span><br><span class="line">      .subscribe(<span class="function"><span class="params">messages</span> =&gt;</span> <span class="keyword">this</span>.setState(&#123;<span class="attr">messages</span>: messages&#125;));</span><br><span class="line">  &#125;</span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.messages.unsubscribe();</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &#123;<span class="keyword">this</span>.state.messages.map(<span class="function"><span class="params">message</span> =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;message.text&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>)&#125;</span><br><span class="line">        &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> MyComponent;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://github.com/facebook/flux/" target="_blank" rel="noopener">flux</a></li>
<li><a href="https://github.com/reactjs/redux/" target="_blank" rel="noopener">redux</a></li>
<li><a href="https://segmentfault.com/a/1190000009626788" target="_blank" rel="noopener">redux源码解析</a></li>
<li><a href="http://cn.redux.js.org/docs/api/createStore.html" target="_blank" rel="noopener">redux中文文档</a></li>
<li><a href="http://taobaofed.org/blog/2016/08/18/react-redux-connect/" target="_blank" rel="noopener">淘宝FED：React 实践心得：react-redux 之 connect 方法详解</a></li>
<li><a href="https://vuex.vuejs.org" target="_blank" rel="noopener">vuex</a></li>
<li><a href="https://mobx.js.org/" target="_blank" rel="noopener">mobx</a></li>
<li><a href="http://reactivex.io/rxjs/" target="_blank" rel="noopener">rxjs</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> flux </tag>
            
            <tag> redux </tag>
            
            <tag> vuex </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2017年终总结]]></title>
      <url>http://ldllidonglin.github.io/blog/2018/01/02/2018-01-02-2017%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>发现2015年的总结也是在1月2号写的，哈哈！！年终总结的主要作用就是回顾自己2017年的得与失，顺便思考下自己2018年的计划。<br><a id="more"></a></p>
<h2 id="跳槽前"><a href="#跳槽前" class="headerlink" title="跳槽前"></a>跳槽前</h2><p>2017年7月份的时候换了工作，所以基本可以把一年的时间切成两半–跳槽前与跳槽后。7月份之前在搜狐工作。前三个月还是在做媒体那块的业务，工作不难，业务量也不大，并且就我一个正式前端和一个实习生，所以很清闲。各种开发也都没有规范，我一个刚踏入职场半年的小白，就要自己定技术方案，全权负责前端的业务开发，当然对自己也是一种锻炼，但是没有有经验的前辈带，总感觉不是那么回事。那段时间因为工作清闲，所以有空闲时间，就看了一些技术相关的东西，weex、vue、ECMAScript规范都是那段时间看的。现在回头看，才发现有空闲时间是有多好。<br>后来工作变动，我也换到另一个部门，也是一些琐碎的活，没什么意思。我之所以换部门而不是换公司，是因为工作还没满一年，不好跳槽，哈哈，所以就换个部门再待几个月。这段时间也主要是看ECMAScript规范。后来部门又变动，自己也赶紧的找下家了。</p>
<h2 id="跳槽后"><a href="#跳槽后" class="headerlink" title="跳槽后"></a>跳槽后</h2><p>经过一些面试，最后定了现在的公司，面试就是累，跑来跑去，和面试官你来我往的交锋。去之前就赶紧准备各种面试相关的知识，还怕自己面不上。还好自己最终拿到了自己满意的offer。跳槽了，工资肯定涨了，但属于正常涨幅，所以结果就是自己很快就要被应届生倒挂了！！来到新公司后，工作变得忙碌起来了，加班也成了常态。发现自己根本没精力看工作之外的技术了，业务实在是太紧，当然一部分原因也是自己效率太低。晚上加班，甚至周末都要加班，真是有点累啊。所以趁今天晚上不用加班，赶紧抽时间总结下过去的一年，也能静下心来思考下自己的未来。写这篇博客的时候，看了下目录，发现自己17年一共就发了6篇博客，最后一篇是8.16，那个时候刚到公司一个月，还处于熟悉业务的阶段，才有时间写博客，后来就再也没写过了。。。可见跳槽后自己根本就没有任何工作之外的技术积累了。</p>
<h2 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h2><ul>
<li>技术人对技术的学习永远不能停止。后半年精力全部扑在业务开发上了，希望2018年能有所改善。</li>
<li>精力全部扑在业务上，也不能说自己没有收获。在新公司还是看到了很多之前不了解的技术、并且在不断的解决业务的过程中，自己积累了经验。这也是我需要的一些东西吧。代码写多了，自然就会更熟练了，写代码时也考虑的更全面了。当然是和以前相比更熟练了，和厉害的人比自己在这方面还有很大的提升空间。</li>
<li>技术是自己的，业务是公司的。你的技术很大程度决定了你的收入以及未来发展。</li>
</ul>
<h2 id="2018计划"><a href="#2018计划" class="headerlink" title="2018计划"></a>2018计划</h2><p>定这个计划就是为了督促自己2018年不能懈怠，要继续努力。</p>
<ul>
<li>react的源码学习，和vue源码的对比，必须最少产出2篇总结。</li>
<li>ECMAScript规范跟进、阅读主要章节，继续完成翻译工作。</li>
<li>端技术、weex、nodejs等技术需要有进一步的学习，并且必须有产出。</li>
<li>目标是一专多长，找到自己的擅长的地方。</li>
<li>12篇博客，并且不能滥竽充数。</li>
<li>学会平衡业务开发和个人成长，技术了技术是自己安身立命之本，但是对业务的理解也是必不可少的。</li>
</ul>
<p>希望自己总结2018的时候，上面的计划都能完成。</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 年终总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ECMAScript2016规范理解（4）-let]]></title>
      <url>http://ldllidonglin.github.io/blog/2017/08/16/2017-08-16-ECMAScript2016%E8%A7%84%E8%8C%83%E7%90%86%E8%A7%A3%EF%BC%884%EF%BC%89-let/</url>
      <content type="html"><![CDATA[<p>ES2015开始，JavaScript中提供了另外两个用来声明变量的关键字，分别是let和const，这篇文章主要从规范的角度来解释一些let的行为表现。</p>
<a id="more"></a>
<h2 id="for循环中的let"><a href="#for循环中的let" class="headerlink" title="for循环中的let"></a>for循环中的let</h2><p>以下两段代码，除了var换成let，其他都一样，但是执行结果却不一样.<br><img src="var.png" alt="var"><img src="let.png" alt="let"><br>有以下疑惑：</p>
<ol>
<li>按照以前的理解，setTimeout执行的时候，for循环已经执行完了，此时i应该是4才对。let为何能让setTimeout执行时取到for循环执行到的那一步的i值，而不是一律打印4？。</li>
<li>for循环执行后，为何i会报ReferenceError而var不会？。</li>
</ol>
<h3 id="for语句的执行"><a href="#for语句的执行" class="headerlink" title="for语句的执行"></a>for语句的执行</h3><p>首先肯定要看for语句是怎么执行的，是在规范的<a href="http://www.ecma-international.org/ecma-262/7.0/index.html#sec-for-statement-runtime-semantics-labelledevaluation" target="_blank" rel="noopener">13.7.4.7</a>中定义的，如下图所示：<br><img src="forstatement.png" alt="forstatement"><br>简单来说就是如下几步：</p>
<ol>
<li>以当前执行上下文的词法环境oldEnv为outer，创建新的声明式词法环境loopEnv</li>
<li>把let所定义的变量在loopEnv中创建绑定。</li>
<li>把当前执行上下文的词法环境设为loopEnv。</li>
<li>执行let声明语句</li>
<li>执行 ForBodyEvaluation</li>
<li>把当前执行上下文的词法环境还原为oldEnv。</li>
</ol>
<p>这里帮我们解答了疑惑2，当执行for循环时，会创建一个新的词法环境，然后在这个新的词法环境对变量进行绑定，所以执行完for循环，词法环境就回到之前的那个词法环境了，console.log(i)当然会报ReferenceError。要解答疑惑1还得继续看ForBodyEvaluation是怎么执行的。</p>
<h3 id="ForBodyEvaluation"><a href="#ForBodyEvaluation" class="headerlink" title="ForBodyEvaluation"></a>ForBodyEvaluation</h3><p><img src="ForBodyEvaluation.png" alt="ForBodyEvaluation"></p>
<p>这个方法的执行很简单的描述就是如下：</p>
<ol>
<li>执行CreatePerIterationEnvironment</li>
<li>执行for循环内的语句和increment（就是for循环中的例如i++语句）</li>
<li>如果循环能继续，则执行CreatePerIterationEnvironment，然后回到第二步</li>
</ol>
<h3 id="CreatePerIterationEnvironment"><a href="#CreatePerIterationEnvironment" class="headerlink" title="CreatePerIterationEnvironment"></a>CreatePerIterationEnvironment</h3><p>这个函数才是最终体现let的特殊性的，在规范中的说明如下：<br><img src="CreatePerIterationEnvironment.png" alt="CreatePerIterationEnvironment"><br>就是：</p>
<ol>
<li>以当前执行上下文的词法环境lastIterationEnv的outer为outer（也就是进入for循环之前的词法环境），创建新的声明式词法环境thisIterationEnv</li>
<li>在thisIterationEnv中为let定义的变量创建绑定，并且把lastIterationEnv中对应变量的值在thisIterationEnv中初始化</li>
<li>把当前执行上下文的词法环境设为thisIterationEnv</li>
</ol>
<p>这下就明朗了，并且解答了第一个疑惑。因为CreatePerIterationEnvironment函数是每一次for循环都会执行的，所以每执行一次for循环，都会创建一个环境变量，里面绑定了let声明的变量i，并且初始化的值为当前的i值。然后for循环内的语句是在这个新创建的词法环境下执行的，所以能依次输出1,2,3</p>
<h2 id="let是否提升"><a href="#let是否提升" class="headerlink" title="let是否提升"></a>let是否提升</h2><p>先贴一段代码：<br><img src="let-e.png" alt="let-e"><br>对于代码为什么会报错，大家都知道，let声明不会被提升，所以不能在声明i之前使用i，会有一个<strong>暂时性死区</strong>。但是<strong>暂时性死区</strong>是怎么形成，对应到规范中是怎么描述的呢？以及规范里是怎么处理let声明变量，以及为何会报错的？<br>对于let声明的变量是怎么处理的，由于声明语句可能是在全局环境、块、函数中执行，所以规范里有好几个地方说明了这个步骤，但是都差不多，我们就以全局环境执行时为例，在规范的<a href="http://www.ecma-international.org/ecma-262/7.0/index.html#sec-globaldeclarationinstantiation" target="_blank" rel="noopener">15.1.1</a>中：<br><img src="globaldeclarationinstantiation1.jpg" alt="globaldeclarationinstantiation1"><br><img src="globaldeclarationinstantiation2.jpg" alt="globaldeclarationinstantiation2"><br>关于let声明的语句在第16步，也就是说，它会并且只做了envRec.CreateMutableBinding(dn, false)这么一个操作。还专门说明了，只是实例化并没有初始化（因为对于var声明的变量，其值会被初始化为undefined，所以这里要特别说明没有进行初始化）。那好，为什么实例化没有初始化，就会报错呢？<code>i = 1</code>这个语句是一个赋值表达式，看规范中是怎么定义其执行过程的，如下图<br><img src="assignment.png" alt="assignment"><br>那么<code>i</code>就是LeftHandSideExpression，一路查规范，最终<code>lref也就是i</code>是一个Reference，然后执行PutValue(lref, rval)，然后查PutValue的执行规范，<br>最后是到词法环境的SetMutableBinding函数：<br><img src="setmutablebinding.png" alt="setmutablebinding"><br>其中有一句话说明了，<strong>如果N也就是i是还没有被初始化，那么会抛出ReferenceError异常</strong>。到这里终于完整了理顺了整个代码执行过程了。</p>
<h2 id="let遇到typeof"><a href="#let遇到typeof" class="headerlink" title="let遇到typeof"></a>let遇到typeof</h2><p>这个问题是和朋友讨论问题时遇到的一个点，觉得有意思，就记录下来。众所周知，typeof是唯一一个可以操作未定义的变量的操作符，那么typeof操作一个let声明但是没有赋值的变量会是怎么样？<br><img src="typeof.png" alt="typeof"><br>直接看规范中typeof操作符的定义：<br><img src="typeof-o.png" alt="typeof-o"><br>对于未声明的变量，是会返回undefined。所以对于let声明的变量，出错是处在GetValue这一步，这一步最终调用的是词法环境的GetBindingValue，而词法环境的这个方法：<br><img src="getBindingValue.png" alt="getBindingValue"><br>同样的，对于未初始化的变量，<strong>会抛出ReferenceError异常</strong>。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上几个例子可以发现，由于以前的规范就规定了在执行声明语句前，会把var的声明操作前置在所有语句执行前，并且初始化为undefined。这其实可以算是JavaScript语言的一个缺陷。在未执行声明语句之前，竟然就能访问这个变量，并且还把其初始化为undefined。undefined可是一个合法的值，这就相当于JavaScript引擎帮我们插入了一段代码，这不符合我们的正常思维，也是不合理的。所以ES2015以后推出let和const这种机制来修正这个缺陷，在执行声明语句前使用变量，会抛出错误。<br>还有就是typeof，typeof能对未定义的变量操作，并且返回undefined，其实也是JavaScript的缺陷，既然let的作用是必须执行前才可使用，那么一视同仁，typeof一样的抛出错误。如果typeof不抛出错误也返回undefined，那就和let设计的初衷相违背了。</p>
]]></content>
      
        <categories>
            
            <category> ECMAScript规范 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ECMAScript规范 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ECMAScript2016规范理解（3）-属性描述对象]]></title>
      <url>http://ldllidonglin.github.io/blog/2017/07/23/2017-07-23-ECMAScript2016%E8%A7%84%E8%8C%83%E7%90%86%E8%A7%A3%EF%BC%883%EF%BC%89-%E5%B1%9E%E6%80%A7%E6%8F%8F%E8%BF%B0%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<p>属性描述对象在ECMAScript5.1就已经成为标准了，但是IE9+才支持。属性描述对象在规范中是一个规范类型，也就是用来更好的描述规范的，其实也就是用来描述对象的属性的。大名鼎鼎的Vue.js正是使用的这个属性描述对象，实现的数据双向绑定，也正是因为如此，才不支持IE9以下浏览器。</p>
<a id="more"></a>
<h2 id="属性描述对象"><a href="#属性描述对象" class="headerlink" title="属性描述对象"></a>属性描述对象</h2><p>在规范中中的6.2.4就是讲属性描述对象的，属性描述对象的具体属性则在6.1.7.1中说明的。因为6.2是讲规范属性，6.1是讲ECMAScript语言，其中6.1.7又是专门讲对象的小节。<br>在规范中，对属性描述对象又做了进一步的分类，属性描述对象一般有两种比较常见，叫data Property Descriptors 和 accessor Property Descriptors。我这里就简单的翻译为数据属性描述对象，访问器属性描述对象。而他们的分类标准就是，只要有[[Value]] 或者 [[Writable]]属性其中一个或者两个，就算数据属性描述对象，只要有[[Get]] 或者 [[Set]]属性其中的一个或者两个，就算是访问器属性描述对象。但是一个属性描述对象不能既是数据描述符，同时也是访问器属性描述对象。如果两则都不是，就叫普通属性描述对象，这个分类很少见，其实就是为了分类的完整性，而弄出这个分类的。常见的都是数据属性描述对象和访问器属性描述对象，对象的属性的属性描述对象只能是这两种之一。</p>
<h3 id="数据属性描述对象"><a href="#数据属性描述对象" class="headerlink" title="数据属性描述对象"></a>数据属性描述对象</h3><p>属性描述对象一共可以有4个属性，如图所示：<br><img src="dataAttr.png" alt="dataAttr.png"></p>
<ul>
<li>[[Value]]就是这个属性的值，默认undefined</li>
<li>[[Writable]]，决定了这个属性的[[Set]]操作是否成功，默认false</li>
<li>[[Enumerable]]，枚举决定了这个属性能否在for-in和Object.keys()中出现，默认false</li>
<li>[[Configurable]]，可配置性，如果为false，那么除了把[[Writable]]改变为false和修改[[Value]]，其他操作，比如删除属性，把属性改成访问器属性等等都会报错。默认值是false。</li>
</ul>
<h3 id="访问器属性描述对象"><a href="#访问器属性描述对象" class="headerlink" title="访问器属性描述对象"></a>访问器属性描述对象</h3><p>访问器属性描述对象也是一共可以有4个属性，如图所示：<br><img src="accessAttr.png" alt="accessAttr"><br>可以看出，它也有[[Enumerable]]和[[Configurable]]属性，然后还有两个访问器属性描述对象特有的属性：</p>
<ul>
<li>[[Set]]，默认值是undefined，其值只能是函数或者undefined，当set操作被调用时，是会以要赋值的那个值作为唯一参数调用函数的[[Call]]操作。一般情况下，这个操作应该都会对[[Get]]操作产生影响，但不是必须，可以和[[Get]]没有任何关系。</li>
<li>[[Get]], 默认值是undefined其值只能是函数或者undefined，当get操作被调用时，是会以空参数的形式调用这个函数的[[Call]]操作。</li>
</ul>
<h2 id="属性描述对象相关操作"><a href="#属性描述对象相关操作" class="headerlink" title="属性描述对象相关操作"></a>属性描述对象相关操作</h2><h3 id="Object-defineProperty（O，P，Desc）"><a href="#Object-defineProperty（O，P，Desc）" class="headerlink" title="Object.defineProperty（O，P，Desc）"></a>Object.defineProperty（O，P，Desc）</h3><p>给一个对象添加属性或者修改属性一般有两种方式，一是直接使用赋值表达式，二就是使用Object.defineProperty。这个方法接受三个参数：O就是要改变的对象，P是要改变的属性，Desc就是要给这个属性定义的属性描述对象。Object.defineProperty执行的具体步骤在规范的19.1.2.4节，如下图所示：<br><img src="defineProperty.png" alt="defineProperty.png"><br>继续追规范下去，会发现最终是执行如下所示操作：<br><img src="validateDesc.png" alt="validateDesc"><br>这个函数的执行要判断很多种情况，总结如下：</p>
<ul>
<li>如果属性之前的Desc为undefined，那就是直接更改为最新的Desc，相应类型的属性描述对象的缺省字段将被设为默认值。</li>
<li>如果属性之前的Desc和将要赋值的Desc一样，那么直接返回true。</li>
<li>如果新的Desc既不是</li>
<li>如果现在的Desc中的[[Configurable]]为false，那么除了把[[Writable]]有true改为false，或者是在[[Writable]]为true的情况下，修改[[Value]],剩余情况一律返回false</li>
<li>只要[[Configurable]]为true，任何操作都是允许的，就算[[Writable]]为false，也能修改[[Value]]</li>
</ul>
<h3 id="Object-defineProperties-O-P"><a href="#Object-defineProperties-O-P" class="headerlink" title="Object.defineProperties(O, P)"></a>Object.defineProperties(O, P)</h3><p>这个函数有两个参数，一个是对象O，另一个也是是一个对象，但是这个对象的key是要改变的属性名，value为这个属性的属性描述对象，实际操作就是根据key，不断的循环调用Object.defineProperty（O，key，value）</p>
<h3 id="Object-getOwnPropertyDescriptor"><a href="#Object-getOwnPropertyDescriptor" class="headerlink" title="Object.getOwnPropertyDescriptor"></a>Object.getOwnPropertyDescriptor</h3><p>在规范中，关键步骤如下所示：<br><img src="getDesc.png" alt="getDesc"><br>也就是说，它会把规范类型属性描述对象，转换为一个语言类型对象，并且会把这个类型的属性描述对象的所有属性都返回。</p>
<h3 id="Object-getOwnPropertyDescriptors"><a href="#Object-getOwnPropertyDescriptors" class="headerlink" title="Object.getOwnPropertyDescriptors"></a>Object.getOwnPropertyDescriptors</h3><p>这个方法是在ECMAScript2017中定义的和defineProperties一样，具体实现肯定和getOwnPropertyDescriptor一样，这是是返回对象的全部属性的属性描述符。</p>
<h3 id="Object-seal-amp-amp-Object-freeze"><a href="#Object-seal-amp-amp-Object-freeze" class="headerlink" title="Object.seal &amp;&amp; Object.freeze"></a>Object.seal &amp;&amp; Object.freeze</h3><p>这两个函数在规范中最终都是调用的同一个内部操作，如下所示：<br><img src="setIntegrityLevel.png" alt="setIntegrityLevel"><br>seal是执行SetIntegrityLevel(O, “sealed”)，freeze是执行SetIntegrityLevel(O, “frozen”)。从以上可以看出这两个函数的区别：</p>
<ul>
<li>seal只是封印的意思，只是把[[Configurable]]设置false</li>
<li>freeze是冰封的意思，会同时把[[Configurable]]和[[Writable]]设为false。也就是说这个属性将不能再发生任何改变。</li>
</ul>
<p>### </p>
]]></content>
      
        <categories>
            
            <category> ECMAScript规范 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ECMAScript规范 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ECMAScript2016规范理解（2）-执行上下文和词法作用域]]></title>
      <url>http://ldllidonglin.github.io/blog/2017/07/16/2017-07-16-ECMAScript2016%E8%A7%84%E8%8C%83%E7%90%86%E8%A7%A3%EF%BC%882%EF%BC%89-%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E5%92%8C%E8%AF%8D%E6%B3%95%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
      <content type="html"><![CDATA[<p>平常面试，总是会遇到this、闭包、作用域相关的问题。要捋清楚这些问题，就必须理解执行上下文以及词法作用域。ECMAScript2016的第八章是专门讲执行上下文这个问题的，我的上一篇文章<a href="http://ldllidonglin.github.io/blog/2017/07/06/2017-07-06-ECMAScript2016%E8%A7%84%E8%8C%83%E7%90%86%E8%A7%A3（1）-this/">ECMAScript2016规范理解(1)-this</a>中对于this的理解，需要对执行上下文和词法环境有一定的了解，所以在此补上</p>
<a id="more"></a>
<h2 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h2><p>规范中对于执行上下文的描述是在8.3中，规范的说明是执行上下文是ECMAScript实现的一种用来追踪代码运行的机制。执行上下文会在当JavaScript引擎从当前执行上下文所关联的代码进入另一段和当前上下文不关联的可执行代码的时候，就会创建一个可执行上下文（Execution Context）。任何时刻都只能有一个执行上下文，把其称为运行时执行上下文（running execution context.）。</p>
<p>引擎会有一个叫执行上下文栈的东西来管理执行上下文的切换，栈顶的执行上下文永远是运行时执行上下文。当从执行上下文A进入另一个执行上下文B时，会把B推入栈中，称为栈顶元素，也就是运行时执行上下文，当B执行完，会从栈中推出，从而使引擎回到A的执行上下文。如下代码<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;                <span class="comment">// A</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span> <span class="params">()</span> <span class="comment">&#123;       </span></span></span><br><span class="line"><span class="function"><span class="comment">    console.log(b);       // B</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span></span></span><br><span class="line"><span class="function"><span class="title">b</span><span class="params">()</span>;</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">1</span>                 <span class="comment">// A</span></span><br></pre></td></tr></table></figure></p>
<p>当前执行上下文会从A -&gt; B -&gt; A</p>
<h2 id="执行上下文的组成"><a href="#执行上下文的组成" class="headerlink" title="执行上下文的组成"></a>执行上下文的组成</h2><p>规范中规定执行上下文是包含任何可追踪代码状态的组件。其中<strong>词法环境（LexicalEnvironment）</strong>和<strong>变量环境（VariableEnvironment）</strong>是其非常重要的两个部分。在初始化执行上下文的时候，词法环境和变量环境的值是一样的，都是<strong>词法环境（Lexical Environments）</strong>他们的唯一区别就是变量环境是不会变化的，而词法环境有可能会在代码执行的时候被改变。一个执行上下文会有很多抽象操作，我就介绍两个在<a href="http://ldllidonglin.github.io/blog/2017/07/06/2017-07-06-ECMAScript2016%E8%A7%84%E8%8C%83%E7%90%86%E8%A7%A3（1）-this">ECMAScript2016规范理解(1)-this</a>中提到的方法</p>
<p><img src="GetThisEnvironment.png" alt="GetThisEnvironment"><br>GetThisEnvironment这个方法翻译下来就是会从当前执行上下文开始，通过outer不断递归找有this绑定的词法环境，这个操作一定会找到，因为所有词法环境的最外层词法环境都是全局词法环境，它是有this绑定的。</p>
<p><img src="ResolveThisBinding.png" alt="ResolveThisBinding"><br>ResolveThisBinding 这个方法就是在执行this表达式的时候会使用，返回当前词法环境中this绑定的值。</p>
<h2 id="词法环境"><a href="#词法环境" class="headerlink" title="词法环境"></a>词法环境</h2><p>规范规定，词法环境是一个用于定义标识符和特定变量和函数在 ECMAScript 代码的词法嵌套结构上关联关系的规范类型。一个词法环境包括一个环境记录项和可能为null的外部词法环境的引用。</p>
<h3 id="环境记录项"><a href="#环境记录项" class="headerlink" title="环境记录项"></a>环境记录项</h3><p>环境记录项一共有5种: 声明式、对象式、函数式、模块式、全局。他们各有不同，如下图<br><img src="context.png" alt="context"><br>HasThisBinding()函数返回为true的说明该环境记录是有this绑定的，那它就会实现一个GetThisBinding方法，从而返回其this值。</p>
<h3 id="外部词法环境的引用"><a href="#外部词法环境的引用" class="headerlink" title="外部词法环境的引用"></a>外部词法环境的引用</h3><p>这个定义其实就解释了作用域链，因为每个词法环境在初始化的时候，就会给其outer初始化一个值，从而在变量查找的时候，当前环境记录项中没有时，就可以从outer得到当前词法环境的父环境，从而如事件冒泡一样，不断往上查找，直到全局词法环境，因为全局词法环境的外部引用是null。</p>
<h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><p>作用域就是一套变量的查找规则，或者说是可访问变量的集合。也就是说作用域定义了一个变量可访问的范围，超出这个范围，那变量将不可被访问。JavaScript的作用域是静态作用域，也就是说变量可被访问的范围在变量被定义的时候就确定了。</p>
<h3 id="词法环境初始化"><a href="#词法环境初始化" class="headerlink" title="词法环境初始化"></a>词法环境初始化</h3><p>当建立执行上下文时，作为执行上下文的一部分，词法环境当然也会被创建并且初始化。就拿函数词法环境的创建为例说明：</p>
<p><img src="NewFunctionEnvironment.png" alt="NewFunctionEnvironment"><br>倒数第二步很关键，把F.[[Environment]]设为改词法环境env的外部引用（outer lexical environment reference of env）。那F.[[Environment]]是什么值？肯定也是词法环境，就看是在哪初始化的了。是函数的内部属性，那很有可能就是在函数初始化的时候。在规范中查找可得到如下图所示：<br><img src="FunctionInitialize.png" alt="FunctionInitialize"><br>在这个函数中，是把Scoped参数赋给[[Environment]]了，通过追溯规范中FunctionInitialize函数的调用过程，可以找到，Scoped的值为当前执行上下文的词法环境。</p>
<h3 id="变量的查找规则"><a href="#变量的查找规则" class="headerlink" title="变量的查找规则"></a>变量的查找规则</h3><p>在规范中，规定的词法环境的操作中，除了有5种词法环境记录的创建外，还定义了词法环境对变量的查找规则，如下图所示：<br><img src="GetIdentifierReference.png" alt="GetIdentifierReference"><br>就是首先在当前词法环境的环境记录中找，没有的话就从当前词法环境的外部引用outer中找。从此就理清楚作用域这个问题了，因为在初始化的时候，每个词法环境有对外部词法环境的引用outer，并且变量查找在本词法环境没找到时，会从outer中查找，不断递归这个过程。</p>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>其实理清楚了上面的问题，也就能明白闭包了。举一个经典闭包说明：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(tag++)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = a();</span><br><span class="line">b();                          <span class="comment">// 1</span></span><br><span class="line">b();                          <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></p>
<p>先设定函数a的词法环境为EnvA，设匿名函数为n，匿名函数n的词法环境为EnvC。在声明return语句返回的那个n时，n的[[Environment]]会被设为EnvA。执行n的时候，会创建n的词法环境EnvC，其outer为n.[[Environment]]。也就是EnvA。所以，执行b()的时候，在EnvC中并没有tag变量，但是从outer也就是EnvA中找到了。</p>
]]></content>
      
        <categories>
            
            <category> ECMAScript规范 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ECMAScript规范 </tag>
            
            <tag> 词法作用域 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ECMAScript2016规范理解（1）-this]]></title>
      <url>http://ldllidonglin.github.io/blog/2017/07/06/2017-07-06-ECMAScript2016%E8%A7%84%E8%8C%83%E7%90%86%E8%A7%A3%EF%BC%881%EF%BC%89-this/</url>
      <content type="html"><![CDATA[<p>对于this的解读已经非常多了，是一个已经讲烂了的话题，也是面试中一定会问的题目。you don‘t know js中对于this的总结也是非常全面，我看很多博客的内容其实都是这本书上的。但是我想从规范的角度去理解this，而不是从别人总结好的几条规律来理解。（我指的规范是<a href="http://www.ecma-international.org/ecma-262/7.0/index.html" target="_blank" rel="noopener">ECMAScript2016</a>），写这篇文章也是我对内的一次<a href="https://ldllidonglin.github.io/learn-output/slides/ECMAScript.html">分享</a>其中关于this的总结。<br><a id="more"></a></p>
<h2 id="this-是什么？"><a href="#this-是什么？" class="headerlink" title="this 是什么？"></a>this 是什么？</h2><p>规范中，有标明this是什么的地方一共有三处:</p>
<ul>
<li>关键字（11.6.2.1）</li>
<li>主值表达式（12.2.2）</li>
<li>词法环境中的环境记录项的属性（8.1.1）</li>
</ul>
<p>this是主值表达式，从这个定义出发，我们可以知道如何确定this的值，而他是词法环境中环境记录的一个属性就决定了其值是如何赋值的，以及从哪里去获取它的值。</p>
<h2 id="this表达式的执行过程"><a href="#this表达式的执行过程" class="headerlink" title="this表达式的执行过程"></a>this表达式的执行过程</h2><p>规范12.2.2.1<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PrimaryExpression:<span class="keyword">this</span></span><br><span class="line">    <span class="keyword">Return</span> ? ResolveThisBinding( ).</span><br></pre></td></tr></table></figure></p>
<p>规范的8.3.4 定义了ResolveThisBinding函数<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Let envRec be GetThisEnvironment( ).</span><br><span class="line">Return ? envRec.GetThisBinding().</span><br></pre></td></tr></table></figure></p>
<p>这里又涉及到两个函数，GetThisEnvironment和envRec.GetThisBinding()。<br>规范的8.3.3 定义了GetThisEnvironment<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Let</span> lex be the running execution context<span class="comment">'s LexicalEnvironment.</span></span><br><span class="line">Repeat:</span><br><span class="line">    <span class="keyword">Let</span> envRec be lex<span class="comment">'s EnvironmentRecord.</span></span><br><span class="line">    <span class="keyword">Let</span> exists be envRec.HasThisBinding().</span><br><span class="line">    <span class="keyword">If</span> exists <span class="keyword">is</span> <span class="literal">true</span>, <span class="keyword">return</span> envRec.</span><br><span class="line">    <span class="keyword">Let</span> outer be the value <span class="keyword">of</span> lex<span class="comment">'s outer environment reference.</span></span><br><span class="line">    <span class="keyword">Let</span> lex be outer.</span><br></pre></td></tr></table></figure></p>
<p>上面的意思就是，从当前执行上下文的词法环境开始，不断往上寻找含有this值的词法环境，直到找到为止，这个和原型链上属性的查找模式一样。一定会找到含有this的词法环境，因为规范规定，最外层的词法环境就是全局词法环境，而全局词法环境是一定有this值的。</p>
<p>找到了含有this的词法环境后，就是执行envRec.GetThisBinding()。规范规定一共有5种词法环境，其中声明式词法环境、对象式词法环境是没有this的，模块式词法环境的this值是undefined，全局词法环境的this值就是[[GlobalThisValue]]这个内部值，这个内部值有宿主环境提供，众所周知，在浏览器环境下this绑定的就是window对象。所以只剩下函数式词法环境的值了</p>
<p>8.1.1.3.4 定义了这个函数的执行过程<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Let</span> envRec be the function <span class="symbol">Environment</span> <span class="symbol">Record</span> for which the method was invoked.</span><br><span class="line"><span class="symbol">Assert</span>: envRec.[[<span class="symbol">ThisBindingStatus</span>]] is not <span class="string">"lexical"</span>.</span><br><span class="line"><span class="symbol">If</span> envRec.[[<span class="symbol">ThisBindingStatus</span>]] is <span class="string">"uninitialized"</span>, throw a <span class="symbol">ReferenceError</span> exception.</span><br><span class="line"><span class="symbol">Return</span> envRec.[[<span class="symbol">ThisValue</span>]].</span><br></pre></td></tr></table></figure></p>
<h2 id="this的使用场景"><a href="#this的使用场景" class="headerlink" title="this的使用场景"></a>this的使用场景</h2><p>前面讲了这么多，就是说this是如何取值的。同时规范也定义了this是词法环境中环境记录的一个属性，在初始化一个词法环境的时候，都会对this值进行初始化，也就是所谓的this绑定。所以就需要先明白this一共有多少种使用场景，根据使用场景来确定this值是如何进行绑定的。</p>
<h3 id="全局环境"><a href="#全局环境" class="headerlink" title="全局环境"></a>全局环境</h3><p>当JavaScript代码开始执行时，就会初始化一个全局词法环境，而全局词法环境中的this是由宿主环境定义的，浏览器环境下就是window，nodejs环境下就是global</p>
<h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><p>上面也提到了，this只在全局环境和函数词法环境有定义。函数环境下this的绑定会更复杂一些，因为函数可以当作构造函数，也能直接调用，并且还有call\apply，es6的箭头函数、es6的class等情况。</p>
<h4 id="普通函数调用"><a href="#普通函数调用" class="headerlink" title="普通函数调用"></a>普通函数调用</h4><p>首先需要先明确一点，所有的函数最终执行，都是调用的函数对象的[[Call]]方法，调用方式为[[Call]] ( thisArgument, argumentsList)。规范的9.2.1中定义了[[Call]]方法的执行过程：</p>
<ul>
<li>创建一个新的执行上下文，并且执行上下文的词法环境是函数词法环境</li>
<li>给当前的执行上下文绑定this<ul>
<li>如果函数的[[thisMode]]为lexical，返回</li>
<li>如果是严格模式，this值为thisArgument，返回</li>
<li>如果thisArgument是null或者undefined，this为全局环境的this值</li>
<li>否则设置this值为thisArgument</li>
</ul>
</li>
<li>执行函数体</li>
<li>遇到this时，是执行this表达式</li>
</ul>
<p>从上面的过程中可以得到三条非常有用的信息：</p>
<ul>
<li>函数执行的时候，已经确定this值了，并且会传给[[Call]]函数，只是在执行的时候进行绑定，从而使得this表达式执行的时候能取到this值。</li>
<li>箭头函数的[[thisMode]]为lexical，所以箭头函数执行时，是不绑定this值的。</li>
<li>严格模式下，任何值都会被绑定为this，非严格模式，绑定undefined和null，会被绑定为全局环境的this值。</li>
</ul>
<h5 id="函数执行前如何确定this"><a href="#函数执行前如何确定this" class="headerlink" title="函数执行前如何确定this"></a>函数执行前如何确定this</h5><p>普通函数的调用方式，属于Left-Hand-Side Expressions中的Call Expression：MemberExpression Arguments，在12.3.4中规定了其执行过程，关键就是确定MemberExpression的执行结果，从而确定this值。<br><figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Let</span> <span class="meta">ref</span> <span class="keyword">be</span> the result of evaluating <span class="type">MemberExpression</span>.</span><br><span class="line"><span class="type">Let</span> func <span class="keyword">be</span> ? <span class="type">GetValue</span>(<span class="meta">ref</span>).</span><br><span class="line"><span class="type">If</span> <span class="type">Type</span>(<span class="meta">ref</span>) <span class="keyword">is</span> <span class="type">Reference</span> <span class="keyword">and</span> <span class="type">IsPropertyReference</span>(<span class="meta">ref</span>) <span class="keyword">is</span> <span class="literal">false</span> <span class="keyword">and</span> <span class="type">GetReferencedName</span>(<span class="meta">ref</span>) <span class="keyword">is</span> <span class="string">"eval"</span>, <span class="keyword">then</span></span><br><span class="line">  <span class="type">If</span> <span class="type">SameValue</span>(func, %eval%) <span class="keyword">is</span> <span class="literal">true</span>, <span class="keyword">then</span></span><br><span class="line">    <span class="type">Let</span> argList <span class="keyword">be</span> ? <span class="type">ArgumentListEvaluation</span>(<span class="type">Arguments</span>).</span><br><span class="line">    <span class="type">If</span> argList has no elements, <span class="keyword">return</span> undefined.</span><br><span class="line">    <span class="type">Let</span> evalText <span class="keyword">be</span> the first element of argList.</span><br><span class="line">    <span class="type">If</span> the source code matching <span class="literal">this</span> <span class="type">CallExpression</span> <span class="keyword">is</span> strict code, <span class="keyword">let</span> strictCaller <span class="keyword">be</span> <span class="literal">true</span>. <span class="type">Otherwise</span> <span class="keyword">let</span> strictCaller <span class="keyword">be</span> <span class="literal">false</span>.</span><br><span class="line">    <span class="type">Let</span> evalRealm <span class="keyword">be</span> the current <span class="type">Realm</span> <span class="type">Record</span>.</span><br><span class="line">    <span class="type">Return</span> ? <span class="type">PerformEval</span>(evalText, evalRealm, strictCaller, <span class="literal">true</span>).</span><br><span class="line"><span class="type">If</span> <span class="type">Type</span>(<span class="meta">ref</span>) <span class="keyword">is</span> <span class="type">Reference</span>, <span class="keyword">then</span></span><br><span class="line">  <span class="type">If</span> <span class="type">IsPropertyReference</span>(<span class="meta">ref</span>) <span class="keyword">is</span> <span class="literal">true</span>, <span class="keyword">then</span></span><br><span class="line">    <span class="type">Let</span> thisValue <span class="keyword">be</span> <span class="type">GetThisValue</span>(<span class="meta">ref</span>).</span><br><span class="line">  <span class="type">Else</span>, the base of <span class="meta">ref</span> <span class="keyword">is</span> an <span class="type">Environment</span> <span class="type">Record</span></span><br><span class="line">    <span class="type">Let</span> refEnv <span class="keyword">be</span> <span class="type">GetBase</span>(<span class="meta">ref</span>).</span><br><span class="line">    <span class="type">Let</span> thisValue <span class="keyword">be</span> refEnv.<span class="type">WithBaseObject</span>().</span><br><span class="line"><span class="type">Else</span> <span class="type">Type</span>(<span class="meta">ref</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="type">Reference</span>,</span><br><span class="line">  <span class="type">Let</span> thisValue <span class="keyword">be</span> undefined.</span><br><span class="line"><span class="type">Let</span> thisCall <span class="keyword">be</span> <span class="literal">this</span> <span class="type">CallExpression</span>.</span><br><span class="line"><span class="type">Let</span> tailCall <span class="keyword">be</span> <span class="type">IsInTailPosition</span>(thisCall).</span><br><span class="line"><span class="type">Return</span> ? <span class="type">EvaluateDirectCall</span>(func, thisValue, <span class="type">Arguments</span>, tailCall)</span><br></pre></td></tr></table></figure></p>
<h5 id="b-方式"><a href="#b-方式" class="headerlink" title="b()方式"></a>b()方式</h5><ul>
<li>语法规则为：MemberExpression Arguments，其中b为MemberExpression</li>
<li>MemberExpression中包含PrimaryExpression，PrimaryExpression包含IdentifierReference，所以最终是执行IdentifierReference，在12.1中有定义</li>
<li>最终是ResolveBinding -&gt; GetIdentifierReference，最终返回一个引用类型，baseValue是环境记录项</li>
<li>所以thisValue be refEnv.WithBaseObject()</li>
<li>ResolveBinding -&gt; GetIdentifierReference这个过程最终会确定refEnv为具有b的绑定的词法环境，如果是全局词法环境的话，WithBaseObject()的结果为undefined</li>
</ul>
<h5 id="a-b-方式"><a href="#a-b-方式" class="headerlink" title="a.b()方式"></a>a.b()方式</h5><ul>
<li>语法规则为：MemberExpression Arguments，其中a.b为MemberExpression</li>
<li>MemberExpression中包含MemberExpression.IdentifierName是Property Accessors，在12.3.2.1中定义其执行过程</li>
<li>执行结果ref是返回一个Reference类型，baseValue为a,是一个对象，所以IsPropertyReference(ref) 为 true，然后thisValue 为 GetThisValue(ref)</li>
<li>GetThisValue返回的是ref的base，就是a对象，所以this就是a</li>
</ul>
<h5 id="其他方式"><a href="#其他方式" class="headerlink" title="其他方式"></a>其他方式</h5><p>还有很多函数调用的方式，但是分析方法都是一样的，先确定调用的表达式类型，然后去看返回的ref值是什么，从而确定this值，可以参考</p>
<ul>
<li><a href="http://www.baizhiedu.com/1587.html" target="_blank" rel="noopener">参考1</a></li>
<li><a href="http://www.smartcitychina.cn/QianYanJiShu/2016-09/7824.html" target="_blank" rel="noopener">参考2</a></li>
</ul>
<h4 id="call-apply"><a href="#call-apply" class="headerlink" title="call\apply"></a>call\apply</h4><p>在19.2.3中定义了Function.prototype的属性，其中就定义了call和apply是如何执行的。如Function.prototype.apply ( thisArg, argArray ):<br><figure class="highlight mercury"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">If IsCallable(<span class="keyword">func</span>) <span class="keyword">is</span> <span class="built_in">false</span>, throw a TypeError exception.</span><br><span class="line">If argArray <span class="keyword">is</span> null or undefined, <span class="built_in">then</span></span><br><span class="line">    Perform PrepareForTailCall().</span><br><span class="line">    Return ? Call(<span class="keyword">func</span>, thisArg).</span><br><span class="line">Let argList be ? CreateListFromArrayLike(argArray).</span><br><span class="line">Perform PrepareForTailCall().</span><br><span class="line">Return ? Call(<span class="keyword">func</span>, thisArg, argList).</span><br></pre></td></tr></table></figure></p>
<p>可见最终代码的执行其实还是回到F.[[Call]]，只是this值是有明确指定的thisArg参数。</p>
<h4 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h4><p>19.2.3.2中定义了bind函数的执行过程<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Let Target <span class="keyword">be</span> the this value.</span><br><span class="line">If IsCallable(Target) <span class="keyword">is</span> false, <span class="keyword">throw</span> <span class="keyword">a</span> TypeError exception.</span><br><span class="line">Let <span class="keyword">args</span> <span class="keyword">be</span> <span class="keyword">a</span> <span class="keyword">new</span> (possibly <span class="built_in">empty</span>) List consisting of <span class="keyword">all</span> of the <span class="keyword">argument</span> <span class="built_in">values</span> provided after thisArg in order.</span><br><span class="line">Let F <span class="keyword">be</span> ? BoundFunctionCreate(Target, thisArg, <span class="keyword">args</span>).</span><br><span class="line">Let targetHasLength <span class="keyword">be</span> ? HasOwnProperty(Target, <span class="string">"length"</span>).</span><br><span class="line">If targetHasLength <span class="keyword">is</span> true, then</span><br><span class="line">    Let targetLen <span class="keyword">be</span> ? Get(Target, <span class="string">"length"</span>).</span><br><span class="line">    If Type(targetLen) <span class="keyword">is</span> not Number, <span class="keyword">let</span> L <span class="keyword">be</span> <span class="number">0</span>.</span><br><span class="line">    Else,</span><br><span class="line">    Let targetLen <span class="keyword">be</span> ToInteger(targetLen).</span><br><span class="line">    Let L <span class="keyword">be</span> the larger of <span class="number">0</span> <span class="built_in">and</span> the result of targetLen minus the <span class="keyword">number</span> of elements of <span class="keyword">args</span>.</span><br><span class="line">Else <span class="keyword">let</span> L <span class="keyword">be</span> <span class="number">0</span>.</span><br><span class="line">Perform ! DefinePropertyOrThrow(F, <span class="string">"length"</span>, PropertyDescriptor &#123;[[Value]]: L, [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true&#125;).</span><br><span class="line">Let targetName <span class="keyword">be</span> ? Get(Target, <span class="string">"name"</span>).</span><br><span class="line">If Type(targetName) <span class="keyword">is</span> not String, <span class="keyword">let</span> targetName <span class="keyword">be</span> the <span class="built_in">empty</span> <span class="built_in">string</span>.</span><br><span class="line">Perform SetFunctionName(F, targetName, <span class="string">"bound"</span>).</span><br><span class="line">Return F.</span><br></pre></td></tr></table></figure></p>
<p>也就是说bind的返回结果是一个BoundFunction，这是一个Exotic Objects。</p>
<h5 id="BoundFunctionCreate-targetFunction-boundThis-boundArgs"><a href="#BoundFunctionCreate-targetFunction-boundThis-boundArgs" class="headerlink" title="BoundFunctionCreate (targetFunction, boundThis, boundArgs)"></a>BoundFunctionCreate (targetFunction, boundThis, boundArgs)</h5><p>在9.4.1.3中有定义BoundFunctionCreate的执行过程。会把boundThis值设为[[BoundThis]]这个内部属性。<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Assert: Type(targetFunction) <span class="keyword">is</span> <span class="built_in">Object</span>.</span><br><span class="line"><span class="keyword">Let</span> proto be ? targetFunction.[[GetPrototypeOf]]().</span><br><span class="line"><span class="keyword">Let</span> obj be a newly created <span class="built_in">object</span>.</span><br><span class="line"><span class="keyword">Set</span> obj<span class="comment">'s essential internal methods to the default ordinary object definitions specified in 9.1.</span></span><br><span class="line"><span class="keyword">Set</span> the [[<span class="keyword">Call</span>]] internal method <span class="keyword">of</span> obj <span class="keyword">as</span> described <span class="keyword">in</span> <span class="number">9.4</span><span class="number">.1</span><span class="number">.1</span>.</span><br><span class="line"><span class="keyword">If</span> targetFunction has a [[Construct]] internal method, <span class="keyword">then</span></span><br><span class="line"><span class="keyword">Set</span> the [[Construct]] internal method <span class="keyword">of</span> obj <span class="keyword">as</span> described <span class="keyword">in</span> <span class="number">9.4</span><span class="number">.1</span><span class="number">.2</span>.</span><br><span class="line"><span class="keyword">Set</span> the [[Prototype]] internal slot <span class="keyword">of</span> obj <span class="keyword">to</span> proto.</span><br><span class="line"><span class="keyword">Set</span> the [[Extensible]] internal slot <span class="keyword">of</span> obj <span class="keyword">to</span> <span class="literal">true</span>.</span><br><span class="line"><span class="keyword">Set</span> the [[BoundTargetFunction]] internal slot <span class="keyword">of</span> obj <span class="keyword">to</span> targetFunction.</span><br><span class="line"><span class="keyword">Set</span> the [[BoundThis]] internal slot <span class="keyword">of</span> obj <span class="keyword">to</span> the value <span class="keyword">of</span> boundThis.</span><br><span class="line"><span class="keyword">Set</span> the [[BoundArguments]] internal slot <span class="keyword">of</span> obj <span class="keyword">to</span> boundArgs.</span><br><span class="line"><span class="keyword">Return</span> obj.</span><br></pre></td></tr></table></figure></p>
<p>之前已经说明，任何函数执行都是执行自身的[[Call]]方法，而BoundFunction重定义了其[[Call]]属性，其执行过程如下：<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Let</span> target be the value <span class="keyword">of</span> F<span class="comment">'s [[BoundTargetFunction]] internal slot.</span></span><br><span class="line"><span class="keyword">Let</span> boundThis be the value <span class="keyword">of</span> F<span class="comment">'s [[BoundThis]] internal slot.</span></span><br><span class="line"><span class="keyword">Let</span> boundArgs be the value <span class="keyword">of</span> F<span class="comment">'s [[BoundArguments]] internal slot.</span></span><br><span class="line"><span class="keyword">Let</span> args be a <span class="keyword">new</span> list containing the same values <span class="keyword">as</span> the list boundArgs <span class="keyword">in</span> the same <span class="keyword">order</span> followed <span class="keyword">by</span> the same values <span class="keyword">as</span> the list argumentsList <span class="keyword">in</span> the same <span class="keyword">order</span>.</span><br><span class="line"><span class="keyword">Return</span> ? <span class="keyword">Call</span>(target, boundThis, args).</span><br></pre></td></tr></table></figure></p>
<p>也就是说会把BoundFunction的[[BoundThis]]值作为this值传入Call(target, boundThis, args)，而Call其实就是执行F.<a href="V, argumentsList">[Call]</a>.最终执行的函数代码还是之前被包裹的那个函数，从这个过程就会发现，一个函数bind得到的函数，再bind传入的this值不会传到最终执行的过程，举例说明：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.info);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> b = a.bind(&#123;<span class="attr">info</span>: <span class="number">1</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> c = b.bind(&#123;<span class="attr">info</span>: <span class="number">2</span>&#125;);</span><br><span class="line">b();</span><br><span class="line">c();</span><br></pre></td></tr></table></figure></p>
<p>最终结果是输出两个1。</p>
<ul>
<li>b就是一个BoundFunction，所以b() -&gt; b.[[Call]] -&gt; Call(a, {info: 1}, args) -&gt; a.[[Call]] ({info: 1});</li>
<li>c() -&gt; c.[[Call]] -&gt; Call(b, {info: 2}) -&gt; b.[[Call]] -&gt; Call(a, {info: 1}, args) -&gt; a.[[Call]] ({info: 1});<br>所以最终c()输出的还是1，因为BoundFunction的[[Call]]方法只会取其自身绑定的[[BoundThis]]作为this值。</li>
</ul>
<h4 id="构造函数调用"><a href="#构造函数调用" class="headerlink" title="构造函数调用"></a>构造函数调用</h4><p>所谓的构造函数调用，其实就是 new 表达式的执行过程，<a href="http://www.ecma-international.org/ecma-262/7.0/index.html#sec-new-operator" target="_blank" rel="noopener">12.3.3</a>定义了new表达式的执行过程。</p>
<ul>
<li>先获取函数的[[ConstructorKind]]属性，如果是base则用(fn.prototype||Object.prototype)为原型去创建对象o。</li>
<li>如果[[ConstructorKind]]是base，则把o对象绑定为当前执行上下文的this。</li>
<li>执行函数体，获取返回值result</li>
<li>如果result的类型是return<ul>
<li>如果其值的类型是Object，则返回result（任何函数，只要返回Object，就直接返回）</li>
<li>如果[[ConstructorKind]]是base，则返回对象o，（如果是普通函数，如果返回值不是Object，则返回创建的o）</li>
<li>如果返回值不是undefined，抛出TypeError异常（是返回非object和undefined的值）</li>
</ul>
</li>
<li>返回执行上下文中的this值（函数体中没有return语句）</li>
</ul>
<p><em>9.2 中规定[[ConstructorKind]]只有两种值，base和derived，derived就是指声明了继承的使用class语法得到的函数，剩下的就是base</em></p>
<p>从这个执行过程可以得到以下信息：</p>
<ul>
<li>es6+增加了class继承的语法糖，所以在new的过程中要判断继承和非继承两种情况。</li>
<li>声明了继承的class，不会去绑定this。</li>
<li>非继承的情况下，以fn.prototype为原型创建新对象o，把this值绑定为对象o。</li>
</ul>
<h5 id="子类构造函数调用super"><a href="#子类构造函数调用super" class="headerlink" title="子类构造函数调用super"></a>子类构造函数调用super</h5><p>super在规范也是关键字，super()构成superCall表达式，12.3.5中定义了其执行过程：<br><figure class="highlight mercury"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Let newTarget be GetNewTarget().</span><br><span class="line">If newTarget <span class="keyword">is</span> undefined, throw a ReferenceError exception.</span><br><span class="line">Let <span class="keyword">func</span> be ? GetSuperConstructor().</span><br><span class="line">Let argList be ArgumentListEvaluation of Arguments.</span><br><span class="line">ReturnIfAbrupt(argList).</span><br><span class="line">Let result be ? Construct(<span class="keyword">func</span>, argList, newTarget).</span><br><span class="line">Let thisER be GetThisEnvironment( ).</span><br><span class="line">Return ? thisER.BindThisValue(result).</span><br></pre></td></tr></table></figure></p>
<p>也就是，先获取父类的构造函数func，result为Construct(func, argList, newTarget)的结果，然后把当前词法环境绑定this为result。</p>
<h2 id="代码实战"><a href="#代码实战" class="headerlink" title="代码实战"></a>代码实战</h2><ul>
<li><p>第一题</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    b: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.c);</span><br><span class="line">    &#125;,</span><br><span class="line">    c: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line">a.b();</span><br><span class="line"><span class="keyword">new</span> a.b();</span><br></pre></td></tr></table></figure>
<p>  第一个输出是3，属于普通函数调用，好理解，第二个是undefined。因为new表达式的执行过程中，this是会被绑定为新创建的那个对象。</p>
</li>
<li><p>第二题</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> b = &#123;</span><br><span class="line">    d: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.c);</span><br><span class="line">    &#125;,</span><br><span class="line">    c: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">b.d();</span><br><span class="line">b.d.call(&#123;<span class="attr">c</span>:<span class="number">4</span>&#125;);</span><br></pre></td></tr></table></figure>
<p>  两个输出都是3，因为箭头函数执行的时候，不会绑定this，所以b.d()执行的时候不会把b绑定为this，所以this执行的时候会往上查找，最终查找到全局环境。<br>  同样的，执行call，因为是箭头函数，同样的不会进行绑定。</p>
</li>
<li><p>第三题</p>
  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;<span class="keyword">this</span>: <span class="number">1</span>, b: <span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">with</span>(a) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  这个会先输出2，然后输出window。因为with语句会创建一个新的词法环境，而其词法环境为对象词法环境，对象词法环境是没有this值的，所以在执行this表达式的时候，找打的词法环境是外层词法环境，所以如果上述代码在全局环境下的话，结果是window</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> ECMAScript规范 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ECMAScript规范 </tag>
            
            <tag> this </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[你所不知道的JavaScript中卷（1）]]></title>
      <url>http://ldllidonglin.github.io/blog/2017/02/16/2017-02-16-%E4%BD%A0%E6%89%80%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JavaScript%E4%B8%AD%E5%8D%B7%EF%BC%881%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="第一章-类型"><a href="#第一章-类型" class="headerlink" title="第一章 类型"></a>第一章 类型</h2><ul>
<li>变量没有类型，但他们持有的值有类型，类型定义了值的行为特征，typeof undefined和 undeclared虽然都返回Undefined。之所以typeof 未定义的变量不会报错，是因为<a href="https://tc39.github.io/ecma262/#sec-typeof-operator" target="_blank" rel="noopener">typeof操作符</a>会判断是否是未定义的变量，如果是，则直接返回”undefined”</li>
<li>typeof null === ‘object’<a id="more"></a>
<h2 id="第二章-值"><a href="#第二章-值" class="headerlink" title="第二章 值"></a>第二章 值</h2></li>
<li>数组，delete其中的值不会改变length</li>
<li>数组，添加字符串属性，不会改变length，除非是能转换成数字的字符串值</li>
<li>字符串的成员函数不会改变其原始值，而是创建并返回一个新的字符串。</li>
<li>数字中的‘.’运算符会被优先识别为数字常量的一部分，然后才是对象属性访问运算符，所以42.toFixed(3)会报语法错误。</li>
<li>如果想把代码中的值设为Undefined，可以使用void expression</li>
<li><p>window.isNaN是检查是否不是NaN，也不是数字，参数是string，也会返回true</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">Number</span>.isNaN) &#123;</span><br><span class="line">  <span class="built_in">Number</span>.isNaN = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n !== n;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>基本类型值是通过值复制来赋值/传递，而复合值（对象等）是通过引用复制来赋值/传递的</p>
</li>
</ul>
<h2 id="第三章-原生函数"><a href="#第三章-原生函数" class="headerlink" title="第三章 原生函数"></a>第三章 原生函数</h2><ul>
<li><p>原生函数就是说String,Array(),Number()之类的，尽量不要使用这些原生函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"a"</span>);<span class="keyword">typeof</span> a <span class="comment">// "object"</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">if</span>(b) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"会执行到这"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建Date对象必须使用new Date()，可以带参数，如果不用new，带的参数会被忽略，直接返回当前Unix时间的字符串</p>
</li>
<li>Function.prototype是一个空函数，RegExp.prototype是一个正则表达式，Array.prototype是一个数组</li>
</ul>
<h2 id="第四章-强制类型转换"><a href="#第四章-强制类型转换" class="headerlink" title="第四章 强制类型转换"></a>第四章 强制类型转换</h2><ul>
<li>undefined、function、symbol都是不安全的JSON值，JSON.string.ify时遇到这三个会自动忽略，如果在数组中，为了保证单元位置不变，会返回null。如果对象中定义了toJSON()方法，会先调用toJSON方法，然后再序列化</li>
<li>JSON.stringify有一个可选参数replacer，可以是数组或者函数，用来指定对象序列化过程中哪些对象的属性要被处理。如果是函数，针对某个属性返回undefined，该属性就会被忽略，还有一个space可选参数，正整数就是缩进的字符数，字符串的话前十个会被用来每一级的缩进</li>
<li>除了假值列表中的值，其他的都为true，假值列表是undefined、null、false、+0、-0、NaN、‘’;</li>
<li>假值对象转换为布尔值为true，比如Boolean(false)为true</li>
<li>~运算符也会导致强制类型转换，~x === -(x+1),所以~可以用在indexOf函数的结果，因为~-1 === 0 为false</li>
<li>||和&amp;&amp;只是返回两个操作数中的其中一个，并不是返回布尔值,||如果第一个为false,返回第二个值，否则返回第一个。&amp;&amp;如果第一个是false,返回第一个，否则返回第二个。在if等条件表达式中，最终会执行布尔值的隐式强制类型转换</li>
<li>Symbol类型可以被强制转换为String，但是隐式转换为String会报错，强制转换或者隐式转换为布尔值都会是true，不能转换为Number，显示和隐式都会报错</li>
<li>==操作符规则比较多，详细规则参见规范</li>
</ul>
<h2 id="第五章-语法"><a href="#第五章-语法" class="headerlink" title="第五章 语法"></a>第五章 语法</h2><ul>
<li><p>标签语句，下面语句是合法的，foo是语句bar()的标签</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attribute">foo</span>: <span class="built_in">bar</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>利用标签语句可以实现goto的效果</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//</span> <span class="string">标签为foo的循环</span></span><br><span class="line">  <span class="attr">foo:</span> <span class="string">for</span> <span class="string">(var</span> <span class="string">i=0;</span> <span class="string">i&lt;4;</span> <span class="string">i++)</span> <span class="string">&#123;</span></span><br><span class="line">          <span class="string">for</span> <span class="string">(var</span> <span class="string">j=0;</span> <span class="string">j&lt;4;</span> <span class="string">j++)</span> <span class="string">&#123;</span></span><br><span class="line">              <span class="string">if</span> <span class="string">((i</span> <span class="string">*</span> <span class="string">j)</span> <span class="string">&gt;=</span> <span class="number">3</span><span class="string">)</span> <span class="string">&#123;</span></span><br><span class="line">                  <span class="string">console.log(</span> <span class="string">"stopping!"</span><span class="string">,</span> <span class="string">i,</span> <span class="string">j</span> <span class="string">);</span></span><br><span class="line">                  <span class="string">break</span> <span class="string">foo;</span></span><br><span class="line">              <span class="string">&#125;</span></span><br><span class="line">              <span class="string">console.log(</span> <span class="string">i,</span> <span class="string">j</span> <span class="string">);</span></span><br><span class="line">          <span class="string">&#125;</span></span><br><span class="line">      <span class="string">&#125;</span></span><br><span class="line">      <span class="string">//</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">      <span class="string">//</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line">      <span class="string">//</span> <span class="number">0</span> <span class="number">2</span></span><br><span class="line">      <span class="string">//</span> <span class="number">0</span> <span class="number">3</span></span><br><span class="line">      <span class="string">//</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line">      <span class="string">//</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line">      <span class="string">//</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line">      <span class="string">//</span> <span class="string">停止！</span> <span class="number">1</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>这样就能实现跳出外层循环</p>
</li>
<li><p>{}即可以作为对象常量，也能作为代码块</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[]</span> + &#123;&#125; <span class="comment">// [object Object]</span></span><br><span class="line">&#123;&#125; + <span class="selector-attr">[]</span> <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>
<p>因为第一句，{}被当做一个对象才操作，第二句{}被当作一个空的独立代码块，返回undefined，所以 + []结果是0</p>
</li>
<li><p>JavaScript语法中其实是没有else if的，我们常用的else if其实是如下形式：</p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a) &#123;</span><br><span class="line">  <span class="comment">// ..</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (b) &#123;</span><br><span class="line">    <span class="comment">// ..</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// ..</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence" target="_blank" rel="noopener">运算符优先级</a></p>
</li>
<li>？：和=是右关联</li>
<li>自动插入分号是一种纠错机制，规范中规定的几种自动插入分号的情况，大部分都是因为如果缺少分号会报错。</li>
<li><p>需要注意函数里有带有return的try…catch语句，要明确哪个return先执行.try里的return会先执行，但是会执行完finally后，再返回函数的返回值</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> a += <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"finally"</span> + a );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="string">"never runs"</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log( foo() );</span><br><span class="line"><span class="comment">// finally2</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>规范中定义了很多早期错误，这些都是在编译时的错误，没法被try…catch捕获，语法错误都是早期错误，有语法错误，程序是无法运行的。</p>
</li>
</ul>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ul>
<li>创建带有id属性的DOM元素时，也会创建同名的全局变量</li>
<li>内联代码的script标签没有charset属性</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端线上统计及监控]]></title>
      <url>http://ldllidonglin.github.io/blog/2017/01/20/2017-01-20-%E5%89%8D%E7%AB%AF%E7%BA%BF%E4%B8%8A%E7%BB%9F%E8%AE%A1%E5%8F%8A%E7%9B%91%E6%8E%A7/</url>
      <content type="html"><![CDATA[<h1 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h1><p>第一次使用<a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">vue.js</a>在移动端的生产环境，所以就想在这次开发中真实的测试一下Vue的性能到底如何<br><a id="more"></a></p>
<h2 id="统计方案"><a href="#统计方案" class="headerlink" title="统计方案"></a>统计方案</h2><ul>
<li>前端发请求，后端写日志，用storm实时处理统计<h2 id="前端发送请求"><a href="#前端发送请求" class="headerlink" title="前端发送请求"></a>前端发送请求</h2><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">InfoStat</span> (<span class="params">type, info</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> Image()</span><br><span class="line">    img.onload = img.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        img = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">url</span></span><br><span class="line">    <span class="keyword">if</span> (type === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">url</span> = <span class="string">'/api/stat/err?err='</span> + <span class="built_in">encodeURIComponent</span>(info)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">url</span> = <span class="string">'/api/stat/time?time='</span> + info</span><br><span class="line">    &#125;</span><br><span class="line">    img.src = <span class="built_in">url</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="获取首屏时间"><a href="#获取首屏时间" class="headerlink" title="获取首屏时间"></a>获取首屏时间</h2><p>使用的方案比较粗糙，用的是<a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/performance" target="_blank" rel="noopener">performance API</a><br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> perf = (<span class="built_in">window</span>.performance ? <span class="built_in">window</span>.performance : <span class="built_in">window</span>.webkitPerformance)</span><br><span class="line"><span class="keyword">if</span> (perf &amp;&amp; perf.now) &#123;</span><br><span class="line">    InfoStat(<span class="number">2</span>, perf.now())</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    InfoStat(<span class="number">2</span>, <span class="number">1000.00</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在vue的主入口放置这么一行代码，所以这个时间应该是vue开始执行的时间，实际的首屏时间会比这个多一点，同时有一些低端手机不支持performance，就发送1000毫秒</p>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>总体来说，85%的请求是能在1秒内开始执行的，也就是说秒开率应该是大于70%的</p>
<h1 id="错误统计"><a href="#错误统计" class="headerlink" title="错误统计"></a>错误统计</h1><p>主要统计了两种错误，方案也比较粗糙。</p>
<ul>
<li>运行时错误，用的是window.onerror，但是这个方案有两个问题，导致根本没法实现错误分析<ul>
<li>和自身代码无关的运行时错误也会上报，比如各种厂商定制的浏览器、webview，尤其是微信内嵌的x5和搜狗浏览器，错误不断，不断上报导致收到的错误一堆，又没有任何价值</li>
<li>跨域限制，导致如果网站的域和js资源的域会跨域的话，收到的错误信息就是“script error.”, 没有任何信息。要想拿到详细的错误信息，必须让cdn改Access-Control-Allow-Origin头。</li>
</ul>
</li>
<li>异步请求失败<br>这也是为了监控网站正常服务，及早发现线上异常，如果线上接口挂了，那错误量一上去，后端实时统计的监控就会立即发报警短信。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>时间统计可以更细一些，错误监控window.onerror效果不太理想，我感觉还是比较大的用处是在用一些兼容性有问题，或者是比较容易出错的地方用try catch来捕获错误，然后上报，对业务的帮助比较大。</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 统计，错误监控 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[你所不知道的JavaScript上卷]]></title>
      <url>http://ldllidonglin.github.io/blog/2016/12/05/2016-12-05-%E4%BD%A0%E6%89%80%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JavaScript%E4%B8%8A%E5%8D%B7/</url>
      <content type="html"><![CDATA[<h1 id="第一部分-作用域和闭包"><a href="#第一部分-作用域和闭包" class="headerlink" title="第一部分 作用域和闭包"></a>第一部分 作用域和闭包</h1><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><ul>
<li>源代码在执行前一般会有三个步骤：词法分析(分词0)、解析（构造AST）、代码生成（AST转成可执行代码）</li>
<li>作用域是一套规则，用于确定在何处以及如何查找变量，赋值就用LHS查询，取值就是RHS查询。不成功的RHS会抛ReferenceError<a id="more"></a>
<h2 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h2></li>
<li>词法作用域就是定义在词法阶段的作用域，是由写代码时将变量和块作用域写在哪里决定的。</li>
<li>eval和with会在运行时修改词法作用域，导致无法再词法分析阶段明确知道当前作用域会发生怎样的修改，所以引擎也就没法优化，导致性能下降。</li>
</ul>
<h2 id="函数作用域和块作用域"><a href="#函数作用域和块作用域" class="headerlink" title="函数作用域和块作用域"></a>函数作用域和块作用域</h2><ul>
<li>函数是JavaScript中最常见的作用域单元；try/catch结构在catch分句中具有块作用域;ES6中引入了let关键字，可以在任意代码块中声明变量</li>
</ul>
<h2 id="提升"><a href="#提升" class="headerlink" title="提升"></a>提升</h2><ul>
<li>var a=2;这包括声明和赋值两部分;</li>
<li>只有声明本身会被提升，而赋值或其他运行逻辑会留在原地</li>
<li><p>普通块内部的函数声明通常会被提升到所在作用域的顶部</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">foo(); <span class="comment">//'b'</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(a)&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'a'</span>);&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'b'</span>);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>函数表达式是赋值操作，不会提升。</p>
</li>
</ul>
<h2 id="作用域闭包"><a href="#作用域闭包" class="headerlink" title="作用域闭包"></a>作用域闭包</h2><ul>
<li>无论通过何种手段将内部函数传递到所在的词法作用域以外，他都会持有对原始作用域的引用，无论在何处执行这个函数都会使用闭包。</li>
</ul>
<h1 id="第二部分-this和对象"><a href="#第二部分-this和对象" class="headerlink" title="第二部分 this和对象"></a>第二部分 this和对象</h1><h2 id="关于this"><a href="#关于this" class="headerlink" title="关于this"></a>关于this</h2><ul>
<li>this不指向函数本身也不指向函数的词法作用域，this是在函数被调用的时候绑定的，其指向取决于函数在哪调用。</li>
</ul>
<h2 id="this全面解析"><a href="#this全面解析" class="headerlink" title="this全面解析"></a>this全面解析</h2><ul>
<li>Array.forEach(callback, thisArg)也是一种显示绑定，它也使用了call或者apply</li>
<li><p>new绑定、显示绑定、隐式绑定、默认绑定优先级由高到低</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面代码说明new比显示绑定要高</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">s</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.a=s;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> obj=&#123;&#125;;</span><br><span class="line"> <span class="keyword">var</span> bar=foo.bind(obj);</span><br><span class="line"> bar(<span class="number">2</span>);</span><br><span class="line"> <span class="built_in">console</span>.log(obj.a);</span><br><span class="line"> <span class="keyword">var</span> baz=<span class="keyword">new</span> bar(<span class="number">3</span>);</span><br><span class="line"> <span class="built_in">console</span>.log(obj.a);</span><br><span class="line"> <span class="built_in">console</span>.log(baz.a);</span><br></pre></td></tr></table></figure>
</li>
<li><p>当把null、undefined作为this的绑定对象传入call或者apply中时，这些值在调用时会被忽略，实际应用的是默认绑定。</p>
</li>
<li><p>赋值时容易发生间接引用</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span><span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">   console.log(this.a);</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span></span></span><br><span class="line"><span class="function"><span class="title">var</span> <span class="title">a</span> = 2;</span></span><br><span class="line"><span class="keyword">var</span> o = <span class="comment">&#123; a:3, foo:foo &#125;</span>;</span><br><span class="line"><span class="keyword">var</span> p = <span class="comment">&#123; a:4 &#125;</span>;</span><br><span class="line">o.foo(); <span class="comment">// 3</span></span><br><span class="line">(p.foo() = o.foo())(); <span class="comment">//2</span></span><br></pre></td></tr></table></figure>
<ul>
<li>对于默认绑定，决定this绑定对象的并不是调用位置是否处于严格模式，而是函数体是否处于严格模式，是的话会被绑定到undefined。</li>
<li><p>硬绑定后，无论函数在哪调用都会带上绑定的this，除了new也无法改变了</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aa</span><span class="params">()</span><span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">  console.log(this.a)</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span></span></span><br><span class="line"><span class="function"><span class="title">b</span>=<span class="comment">&#123;a:2&#125;</span>;</span></span><br><span class="line">c=<span class="comment">&#123;a:4&#125;</span></span><br><span class="line">aa.call(b) <span class="comment">//2</span></span><br><span class="line">aa() <span class="comment">//2</span></span><br><span class="line">aa.call(c) <span class="comment">//4</span></span><br><span class="line">aa(); <span class="comment">//2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>箭头函数的绑定无法被修改，new也不行。它是根据当前词法环境来决定this，会继承外层函数调用的this绑定。</p>
</li>
</ul>
</li>
</ul>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><ul>
<li>字面量表示的字符串或者数据还有布尔值，并不是对象，当使用比如str.length时，是js引擎自动把字面量转换成String对象</li>
<li>Object、Array、Function、RegExp无论是字面量还是构造形式，都是对象。</li>
<li>在对象中，属性名永远是字符串。</li>
<li>判断一个对象是否可枚举，可以用for in 或者propertyIsEnumerable(‘a’)</li>
<li>Object.keys(..) 会返回一个数组,包含所有可枚举属性, Object.getOwnPropertyNames (..)<br>会返回一个数组, 包含所有属性, 无论它们是否可枚举</li>
<li>访问属性时，引擎实际上会调用内部的默认[[Get]]操作,设置时是调用[[Put]].[[Get]]会检查对象本身是否包含这个属性，如果没有的话会查找原型链</li>
<li><p>属性的特性可以通过属性描述符来控制， 比如 writable、 configurable、enumerable</p>
  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Object.defineProperty(myObject,</span> <span class="string">"a"</span><span class="string">,</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">value:</span> <span class="number">2</span><span class="string">,</span></span><br><span class="line">    <span class="attr">writable:</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line">    <span class="attr">configurable:</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line">    <span class="attr">enumerable:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>属性不一定包含值——它们可能是具备 getter/setter 的“ 访问描述符”。 此外， 属性可以是<br>可枚举或者不可枚举的， 这决定了它们是否会出现在 for..in 循环中</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">    <span class="comment">// 给 a 定义一个 getter</span></span><br><span class="line">    <span class="keyword">get</span> a() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(</span><br><span class="line">    myObject, <span class="comment">// 目标对象</span></span><br><span class="line">    <span class="string">"b"</span>, <span class="comment">// 属性名118 ｜ 第 3 章</span></span><br><span class="line">    &#123; <span class="comment">// 描述符</span></span><br><span class="line">        <span class="comment">// 给 b 设置一个 getter</span></span><br><span class="line">        <span class="keyword">get</span>: function()&#123; <span class="keyword">return</span> <span class="keyword">this</span>.a * <span class="number">2</span> &#125;,</span><br><span class="line">        <span class="comment">// 确保 b 会出现在对象的属性列表中</span></span><br><span class="line">        enumerable: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以使用 ES6 的 for..of 语法来遍历数据结构（ 数组、 对象， 等等） 中的值， for..of<br>会寻找内置或者自定义的 @@iterator 对象并调用它的 next() 方法来遍历数据值</p>
</li>
</ul>
<h2 id="混合对象“类”"><a href="#混合对象“类”" class="headerlink" title="混合对象“类”"></a>混合对象“类”</h2><p>面向对象编程中，JavaScript中的类，以及继承，多态</p>
<h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><ul>
<li>给对象赋值，如果key在prototype中存在并且被设置为writable:false，那赋值将失败，没法重写该属性</li>
<li>var a = new Foo() 就是把a的[[Prototype]]关联到Foo.prototype指向的那个对象，所以a可以访问Foo.prototype上的属性</li>
<li>JavaScript 机制和传统面向类语言中的“ 类初始化” 和“ 类继承” 很相似， 但是JavaScript 中的机制有一个核心区别， 那就是不会进行复制， 对象之间是通过内部的[[Prototype]] 链关联的</li>
<li>Bar.prototype = Object.create(Foo.prototype)是一种没有副作用的原型链继承方式</li>
</ul>
<h1 id="行为委托"><a href="#行为委托" class="headerlink" title="行为委托"></a>行为委托</h1><ul>
<li>类是一种可选的设计模式，而且在JavaScript这样的语言中实现类其实很别扭，还不如直接使用它的原型链</li>
<li>继承直接用Child.prototype = Object.create(Parent.prototype)</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《乌合之众》读后感]]></title>
      <url>http://ldllidonglin.github.io/blog/2016/09/27/2016-09-27-%E3%80%8A%E4%B9%8C%E5%90%88%E4%B9%8B%E4%BC%97%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F/</url>
      <content type="html"><![CDATA[<h2 id="总体"><a href="#总体" class="headerlink" title="总体"></a>总体</h2><p>这本书基本都是结论，并没有多少论证，因为心理上的理论本来也不好证明。作者全书基本上全是在批判群体，并且作者是神秘主义<br>种族论的支持者，全书很多地方都在强调种族的重要性。同时作者对妇女、拉丁名族有歧视。全书主要分了块，分别是群体心理、群体的主张<br>与信念、不同群体的分类及其特点。作者认为的群体是一个特殊的心理整体，指的是受某一个事件、演说、激情、恐惧、爱恨的刺激而<br>聚集在一起，为某个目标或某些精神需求而有所行动的人。<br><a id="more"></a></p>
<h2 id="群体的心理"><a href="#群体的心理" class="headerlink" title="群体的心理"></a>群体的心理</h2><ul>
<li>群体的一般特征：群体在智力上劣于独处的人，处于群体中的个人智力差异削弱，个性也会消失，无意识的特点占了上风</li>
<li>群体的感情与道德：冲动、多变、易怒，易受暗示、多变和轻信。群体的感情简单化和夸大化</li>
<li>群体的观念、推理和想象力。打动群体想象力的东西都具有突出和清晰的形象，没有多余的解释</li>
<li>群体的所有信仰都采取宗教形式，群体必须有个神</li>
</ul>
<h2 id="群体的主张与信念"><a href="#群体的主张与信念" class="headerlink" title="群体的主张与信念"></a>群体的主张与信念</h2><ul>
<li>决定群体的主张与信念的间接因素，主要有种族（作用远远超过其他因素）、传统、时间、政治与社会制度、智育和德育</li>
<li>群体主张的直接因素：（形象、词语、套话）、幻觉、经验、理性。意思越不明确的词越能引起行动，比如‘民主’、‘社会主义’。</li>
<li>群体领袖及其说服方式。领袖最初都是被领导者，本人也需要被某种思想所迷惑。群体最想得到的并不是自由，而是被奴役，非常渴望服从。<br>领袖起作用的方式主要靠断言、重复、传染。群体的主张与信念主要是靠传染而不是通过说理传播的。领袖一定要有声望。</li>
<li>群体信念与主张的变化范围。信念被质疑的时候就是走向衰亡的时候。群体的主张又是多变的</li>
</ul>
<h2 id="不同群体的分类及其特点"><a href="#不同群体的分类及其特点" class="headerlink" title="不同群体的分类及其特点"></a>不同群体的分类及其特点</h2><p>群体主要分为异质性群体和同质性群体，但是这本书只讨论了异质性群体，重罪法庭的陪审团、议会、选民</p>
<ul>
<li>重罪法庭的陪审团在裁决的时候智力不起作用。因为群体深受感情的影响，很少受理性的影响，律师只需要隐形陪审员的感情就行了，同时<br>要抓住能左右大家意见的领袖，靠他来影响剩余其他人。</li>
<li>选民有群体的各种特征，推理能力差、缺乏批判精神、易怒、轻信、头脑简单，所以候选人往往会抓住群体的特征，在选举时不断通过断言<br>重复、声望影响选民群体，说各种套话，激发群体的想象力。</li>
<li>议会也一样体现出思想简单化、受领袖人物的影响大，完全失去自我。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一个民族的生命周期就是从理想开始，获得了理想，使种族中的人在感情和思想上达到完全的统一。在追求理想的过程中，种族将创建<br>辉煌、日益强大，但是时间会破坏这种局面，随着时间的推移，理想逐渐衰亡，当理想彻底丧失的时候，种族将完全失去自己的灵魂<br>成了一群独处的人，回到了起点，名族也就消亡了。</p>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 心理 </tag>
            
            <tag> 群体 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Weex Android SDK源码学习]]></title>
      <url>http://ldllidonglin.github.io/blog/2016/09/07/2016-08-22-Weex%20Android%20SDK%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h2 id="1-Weex-Android的集成"><a href="#1-Weex-Android的集成" class="headerlink" title="1 Weex Android的集成"></a>1 Weex Android的集成</h2><p>具体过程可以查看<a href="http://alibaba.github.io/weex/doc/advanced/integrate-to-android.html" target="_blank" rel="noopener">官方文档</a></p>
<h3 id="1-1-在app运行的初始阶段对Weex-Engine进行初始化："><a href="#1-1-在app运行的初始阶段对Weex-Engine进行初始化：" class="headerlink" title="1.1 在app运行的初始阶段对Weex Engine进行初始化："></a>1.1 在app运行的初始阶段对Weex Engine进行初始化：</h3><a id="more"></a>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MyApplication.java</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">WeexApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void onCreate() &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        <span class="type">InitConfig</span>.<span class="type">Builder</span> builder = <span class="keyword">new</span> <span class="type">InitConfig</span>.<span class="type">Builder</span>();</span><br><span class="line">        builder.setImgAdapter(<span class="keyword">new</span> <span class="type">ImageAdapter</span>());</span><br><span class="line">        <span class="comment">//builder.setHttpAdapter(new DefaultWXHttpAdapter());</span></span><br><span class="line">        <span class="type">InitConfig</span> config = builder.build();</span><br><span class="line">        <span class="type">WXSDKEngine</span>.initialize(<span class="keyword">this</span>,config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="1-1-1-WXSDKEngine-java中的源码初始化部分"><a href="#1-1-1-WXSDKEngine-java中的源码初始化部分" class="headerlink" title="1.1.1 WXSDKEngine.java中的源码初始化部分"></a>1.1.1 WXSDKEngine.java中的源码初始化部分</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * @param application</span></span><br><span class="line"><span class="comment">  * @param config initial configurations or null</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(Application application,InitConfig <span class="built_in">config</span>)</span></span>&#123;</span><br><span class="line">  synchronized (mLock) &#123;</span><br><span class="line">    <span class="keyword">if</span> (init) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">    doInitInternal(application,<span class="built_in">config</span>);</span><br><span class="line">    WXEnvironment.sSDKInitInvokeTime = System.currentTimeMillis()-start;</span><br><span class="line">    init = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doInitInternal</span><span class="params">(<span class="keyword">final</span> Application application,<span class="keyword">final</span> InitConfig <span class="built_in">config</span>)</span></span>&#123;</span><br><span class="line">  WXEnvironment.sApplication = application;</span><br><span class="line">  WXEnvironment.JsFrameworkInit = <span class="literal">false</span>;</span><br><span class="line">  WXBridgeManager.getInstance().getJSHandler().post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">run</span>() &#123;</span><br><span class="line">      <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">      WXSDKManager sm = WXSDKManager.getInstance();</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">config</span> != null ) &#123;</span><br><span class="line">        sm.setIWXHttpAdapter(<span class="built_in">config</span>.getHttpAdapter());</span><br><span class="line">        sm.setIWXImgLoaderAdapter(<span class="built_in">config</span>.getImgAdapter());</span><br><span class="line">        sm.setIWXUserTrackAdapter(<span class="built_in">config</span>.getUtAdapter());</span><br><span class="line">        sm.setIWXDebugAdapter(<span class="built_in">config</span>.getDebugAdapter());</span><br><span class="line">        sm.setIWXStorageAdapter(<span class="built_in">config</span>.getStorageAdapter());</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">config</span>.getDebugAdapter()!=null)&#123;</span><br><span class="line">          <span class="built_in">config</span>.getDebugAdapter().initDebug(application);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      WXSoInstallMgrSdk.init(application);</span><br><span class="line">      <span class="keyword">boolean</span> isSoInitSuccess = WXSoInstallMgrSdk.initSo(V8_SO_NAME, <span class="number">1</span>, <span class="built_in">config</span>!=null?<span class="built_in">config</span>.getUtAdapter():null);</span><br><span class="line">      <span class="keyword">if</span> (!isSoInitSuccess) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      sm.initScriptsFramework(null);</span><br><span class="line"></span><br><span class="line">      WXEnvironment.sSDKInitExecuteTime = System.currentTimeMillis() - start;</span><br><span class="line">      WXLogUtils.renderPerformanceLog(<span class="string">"SDKInitInvokeTime"</span>, WXEnvironment.sSDKInitInvokeTime);</span><br><span class="line">      WXLogUtils.renderPerformanceLog(<span class="string">"SDKInitExecuteTime"</span>, WXEnvironment.sSDKInitExecuteTime);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">register</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="主要操作"><a href="#主要操作" class="headerlink" title="主要操作"></a>主要操作</h4><ul>
<li>初始化so库文件，渲染逻辑、脚本业务框架等都封装在了这里；</li>
<li>初始化initScriptsFramework，也就是初始化脚本框架；</li>
<li>register() 注册component、module<h2 id="1-2-生成SDK实例，开始渲染bundle-js，并且监听渲染完事件，添加到container中"><a href="#1-2-生成SDK实例，开始渲染bundle-js，并且监听渲染完事件，添加到container中" class="headerlink" title="1.2 生成SDK实例，开始渲染bundle.js，并且监听渲染完事件，添加到container中"></a>1.2 生成SDK实例，开始渲染bundle.js，并且监听渲染完事件，添加到container中</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MainActivity.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">IWXRenderListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MainActivity"</span>;</span><br><span class="line">    WXSDKInstance mInstance;</span><br><span class="line">    ViewGroup mContainer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        mContainer = (ViewGroup) findViewById(R.id.container);</span><br><span class="line">        mInstance = <span class="keyword">new</span> WXSDKInstance(<span class="keyword">this</span>); <span class="comment">//create weex instance</span></span><br><span class="line">        mInstance.registerRenderListener(<span class="keyword">this</span>); </span><br><span class="line">        <span class="comment">//mInstance.registerRenderListener(new SimpleRenderListener()) //SimpleRenderListener需要开发者来实现</span></span><br><span class="line">        instance.renderByUrl(TAG, WEEX_INDEX_URL, options, <span class="keyword">null</span>, ScreenUtil.getDisplayWidth(<span class="keyword">this</span>),  </span><br><span class="line">                             ScreenUtil.getDisplayHeight(<span class="keyword">this</span>), WXRenderStrategy.APPEND_ASYNC);  </span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//监听创建完命令，然后添加到container中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewCreated</span><span class="params">(WXSDKInstance wxsdkInstance, View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mContainer != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mContainer.addView(view);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="2-具体渲染源码"><a href="#2-具体渲染源码" class="headerlink" title="2 具体渲染源码"></a>2 具体渲染源码</h1><h2 id="2-1-源码中的renderByUrl函数"><a href="#2-1-源码中的renderByUrl函数" class="headerlink" title="2.1 源码中的renderByUrl函数"></a>2.1 源码中的renderByUrl函数</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//WXSDKInstance.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> renderByUrl(<span class="keyword">String</span> pageName, <span class="keyword">final</span> <span class="keyword">String</span> url, Map&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt; options, <span class="keyword">final</span> <span class="keyword">String</span> jsonInitData, <span class="keyword">final</span> <span class="built_in">int</span> <span class="built_in">width</span>, <span class="keyword">final</span> <span class="built_in">int</span> <span class="built_in">height</span>, <span class="keyword">final</span> WXRenderStrategy flag) &#123;</span><br><span class="line"></span><br><span class="line">    pageName = wrapPageName(pageName, url);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (options == <span class="keyword">null</span>) &#123;</span><br><span class="line">      options = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!options.containsKey(BUNDLE_URL)) &#123;</span><br><span class="line">      options.put(BUNDLE_URL, url);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Uri uri=Uri.parse(url);</span><br><span class="line">    <span class="keyword">if</span>(uri!=<span class="keyword">null</span> &amp;&amp; TextUtils.equals(uri.getScheme(),<span class="string">"file"</span>))&#123;</span><br><span class="line">      render(pageName, WXFileUtils.loadAsset(assembleFilePath(uri), mContext),options,jsonInitData,<span class="built_in">width</span>,<span class="built_in">height</span>,flag);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    IWXHttpAdapter adapter=WXSDKManager.getInstance().getIWXHttpAdapter();</span><br><span class="line"></span><br><span class="line">    WXRequest wxRequest = <span class="keyword">new</span> WXRequest();</span><br><span class="line">    wxRequest.url = url;</span><br><span class="line">    <span class="keyword">if</span> (wxRequest.paramMap == <span class="keyword">null</span>) &#123;</span><br><span class="line">      wxRequest.paramMap = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    wxRequest.paramMap.put(<span class="string">"user-agent"</span>, WXHttpUtil.assembleUserAgent(mContext,WXEnvironment.getConfig()));</span><br><span class="line">    adapter.sendRequest(wxRequest, <span class="keyword">new</span> WXHttpListener(pageName, options, jsonInitData, <span class="built_in">width</span>, <span class="built_in">height</span>, flag, System.currentTimeMillis()));</span><br><span class="line">    mWXHttpAdapter = adapter;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>如果是file那就直接调用render函数渲染，如果是远程地址，用http请求,在请求结束的回调中去渲染，WXHttpListener继承自IWXHttpAdapter.OnHttpListener，其有onHttpFinish回调<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> onHttpFinish(WXResponse response) &#123;</span><br><span class="line">  mWXPerformance.networkTime = System.currentTimeMillis() - startRequestTime;</span><br><span class="line">  <span class="keyword">if</span>(response.extendParams!=<span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">Object</span> actualNetworkTime=response.extendParams.<span class="built_in">get</span>(<span class="string">"actualNetworkTime"</span>);</span><br><span class="line">    mWXPerformance.actualNetworkTime=actualNetworkTime <span class="keyword">instanceof</span> Long?(<span class="keyword">long</span>)actualNetworkTime:<span class="number">0</span>;</span><br><span class="line">    WXLogUtils.renderPerformanceLog(<span class="string">"actualNetworkTime"</span>, mWXPerformance.actualNetworkTime);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Object</span> pureNetworkTime=response.extendParams.<span class="built_in">get</span>(<span class="string">"pureNetworkTime"</span>);</span><br><span class="line">    mWXPerformance.pureNetworkTime=pureNetworkTime <span class="keyword">instanceof</span> Long?(<span class="keyword">long</span>)pureNetworkTime:<span class="number">0</span>;</span><br><span class="line">    WXLogUtils.renderPerformanceLog(<span class="string">"pureNetworkTime"</span>, mWXPerformance.pureNetworkTime);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Object</span> connectionType=response.extendParams.<span class="built_in">get</span>(<span class="string">"connectionType"</span>);</span><br><span class="line">    mWXPerformance.connectionType=connectionType <span class="keyword">instanceof</span> <span class="keyword">String</span>?(<span class="keyword">String</span>)connectionType:<span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Object</span> packageSpendTime=response.extendParams.<span class="built_in">get</span>(<span class="string">"packageSpendTime"</span>);</span><br><span class="line">    mWXPerformance.packageSpendTime=packageSpendTime <span class="keyword">instanceof</span> Long ?(<span class="keyword">long</span>)packageSpendTime:<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Object</span> syncTaskTime=response.extendParams.<span class="built_in">get</span>(<span class="string">"syncTaskTime"</span>);</span><br><span class="line">    mWXPerformance.syncTaskTime=syncTaskTime <span class="keyword">instanceof</span> Long ?(<span class="keyword">long</span>)syncTaskTime:<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Object</span> requestType=response.extendParams.<span class="built_in">get</span>(<span class="string">"requestType"</span>);</span><br><span class="line">    mWXPerformance.requestType=requestType <span class="keyword">instanceof</span> <span class="keyword">String</span>?(<span class="keyword">String</span>)requestType:<span class="string">""</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  WXLogUtils.renderPerformanceLog(<span class="string">"networkTime"</span>, mWXPerformance.networkTime);</span><br><span class="line">  <span class="keyword">if</span> (response!=<span class="keyword">null</span> &amp;&amp; response.originalData!=<span class="keyword">null</span> &amp;&amp; TextUtils.equals(<span class="string">"200"</span>, response.statusCode)) &#123;</span><br><span class="line">    <span class="keyword">String</span> template = <span class="keyword">new</span> <span class="keyword">String</span>(response.originalData);</span><br><span class="line">    render(pageName, template, options, jsonInitData, <span class="built_in">width</span>, <span class="built_in">height</span>, flag);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (TextUtils.equals(WXRenderErrorCode.WX_USER_INTERCEPT_ERROR, response.statusCode)) &#123;</span><br><span class="line">    WXLogUtils.d(<span class="string">"user intercept"</span>);</span><br><span class="line">    onRenderError(WXRenderErrorCode.WX_USER_INTERCEPT_ERROR,response.errorMsg);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    onRenderError(WXRenderErrorCode.WX_NETWORK_ERROR, response.errorMsg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>最终还是调用render函数进行渲染<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">(<span class="keyword">String</span> pageName, <span class="keyword">String</span> <span class="keyword">template</span>, Map&lt;<span class="keyword">String</span>, Object&gt; options, <span class="keyword">String</span> jsonInitData, <span class="keyword">int</span> <span class="built_in">width</span>, <span class="keyword">int</span> <span class="built_in">height</span>, WXRenderStrategy flag)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mRendered || TextUtils.isEmpty(<span class="keyword">template</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(options==null)&#123;</span><br><span class="line">      options=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(WXEnvironment.sDynamicMode &amp;&amp; !TextUtils.isEmpty(WXEnvironment.sDynamicUrl) &amp;&amp; options!=null &amp;&amp; options.<span class="built_in">get</span>(<span class="string">"dynamicMode"</span>)==null)&#123;</span><br><span class="line">      options.<span class="built_in">put</span>(<span class="string">"dynamicMode"</span>,<span class="string">"true"</span>);</span><br><span class="line">      renderByUrl(pageName, WXEnvironment.sDynamicUrl, options, jsonInitData, <span class="built_in">width</span>, <span class="built_in">height</span>, flag);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mWXPerformance.pageName = pageName;</span><br><span class="line">    mWXPerformance.JSTemplateSize = <span class="keyword">template</span>.length() / <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    mRenderStartTime = System.currentTimeMillis();</span><br><span class="line">    mRenderStrategy = flag;</span><br><span class="line">    mGodViewWidth = <span class="built_in">width</span>;</span><br><span class="line">    mGodViewHeight = <span class="built_in">height</span>;</span><br><span class="line">    mInstanceId = WXSDKManager.getInstance().generateInstanceId();</span><br><span class="line">    WXSDKManager.getInstance().createInstance(<span class="keyword">this</span>, <span class="keyword">template</span>, options, jsonInitData);</span><br><span class="line">    mRendered = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p>render函数中关键的一步<br>其实是create了一个WXSDKManager的实例，并且把template传了过去<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WXSDKManager.getInstance().createInstance(<span class="keyword">this</span>, <span class="keyword">template</span>, options, jsonInitData);</span><br></pre></td></tr></table></figure></p>
<h2 id="2-2-WXSDKManager"><a href="#2-2-WXSDKManager" class="headerlink" title="2.2 WXSDKManager"></a>2.2 WXSDKManager</h2><p>创建WXSDKManager实例函数主要是创建了WXRenderManger和WXBridgeManger的实例，template是传递到了WXBridgeManger的实例<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//WXSDKManager.java</span></span><br><span class="line"><span class="keyword">void</span> createInstance(WXSDKInstance instance, <span class="built_in">String</span> code, <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; options, <span class="built_in">String</span> jsonInitData) &#123;</span><br><span class="line">    mWXRenderManager.createInstance(instance);</span><br><span class="line">    mBridgeManager.createInstance(instance.getInstanceId(), code, options, jsonInitData);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p>WXRenderManger创建实例只是把实例id和状态管理实例push到它的ConcurrentHashMap&lt;String, WXRenderStatement&gt; mRegistries中，为了便于管理多实例的情况<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mWXRenderManager.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createInstance</span><span class="params">(WXSDKInstance instance)</span> </span>&#123;</span><br><span class="line">    mRegistries.<span class="built_in">put</span>(instance.getInstanceId(), <span class="keyword">new</span> WXRenderStatement(instance));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p>WXBridgeManager的实例化，执行了一个post函数，启动一个线程执行<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">//WXBridgeManager.java</span><br><span class="line">/**</span><br><span class="line"> * Create instance.</span><br><span class="line">*/</span><br><span class="line">public void createInstance(final String instanceId,<span class="keyword"> final</span> String template,</span><br><span class="line">                            <span class="keyword"> final</span> Map&lt;String, Object&gt; options,<span class="keyword"> final</span> String data) &#123;</span><br><span class="line">   <span class="built_in"> if </span>( TextUtils.isEmpty(instanceId)</span><br><span class="line">        || TextUtils.isEmpty(template) || mJSHandler == null) &#123;</span><br><span class="line">      WXSDKInstance<span class="built_in"> instance </span>= WXSDKManager.getInstance().getSDKInstance(instanceId);</span><br><span class="line">     <span class="built_in"> if </span>(instance != null) &#123;</span><br><span class="line">        instance.onRenderError(WXRenderErrorCode.WX_CREATE_INSTANCE_ERROR, <span class="string">"createInstance fail!"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    post(new Runnable() &#123;</span><br><span class="line">      @Override</span><br><span class="line">     <span class="keyword"> public</span> void run() &#123;</span><br><span class="line">       <span class="built_in"> long </span>start = System.currentTimeMillis();</span><br><span class="line">        invokeCreateInstance(instanceId, template, options, data);</span><br><span class="line">       <span class="keyword"> final</span><span class="built_in"> long </span>totalTime = System.currentTimeMillis() - start;</span><br><span class="line">        WXSDKManager.getInstance().postOnUiThread(new Runnable() &#123;</span><br><span class="line"></span><br><span class="line">          @Override</span><br><span class="line">         <span class="keyword"> public</span> void run() &#123;</span><br><span class="line">            WXSDKInstance<span class="built_in"> instance </span>= WXSDKManager.getInstance().getSDKInstance(instanceId);</span><br><span class="line">           <span class="built_in"> if </span>(instance != null) &#123;</span><br><span class="line">              instance.createInstanceFinished(totalTime);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, 0);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, instanceId);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p>run函数内先是执行了invokeCreateInstance<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> void invokeCreateInstance(<span class="keyword">String</span> instanceId, <span class="keyword">String</span> template,</span><br><span class="line">                                    Map&lt;<span class="keyword">String</span>, Object&gt; options, <span class="keyword">String</span> data) &#123;</span><br><span class="line"></span><br><span class="line">    initFramework(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mMock) &#123;</span><br><span class="line">      mock(instanceId);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!isJSFrameworkInit()) &#123;</span><br><span class="line">        WXSDKInstance instance = WXSDKManager.getInstance().getSDKInstance(instanceId);</span><br><span class="line">        <span class="keyword">if</span> (instance != <span class="literal">null</span>) &#123;</span><br><span class="line">          instance.onRenderError(WXRenderErrorCode.WX_CREATE_INSTANCE_ERROR, <span class="string">"createInstance "</span></span><br><span class="line">                                                                             + <span class="string">"fail!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">String</span> err = <span class="string">"[WXBridgeManager] invokeCreateInstance: framework.js uninitialized."</span>;</span><br><span class="line">        WXErrorCode.WX_ERR_INVOKE_NATIVE.appendErrMsg(err);</span><br><span class="line">        commitJSBridgeAlarmMonitor(instanceId, WXErrorCode.WX_ERR_INVOKE_NATIVE);</span><br><span class="line">        WXLogUtils.e(err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (WXEnvironment.isApkDebugable()) &#123;</span><br><span class="line">          WXLogUtils.d(<span class="string">"createInstance &gt;&gt;&gt;&gt; instanceId:"</span> + instanceId</span><br><span class="line">                       + <span class="string">", options:"</span></span><br><span class="line">                       + WXJsonUtils.fromObjectToJSONString(options)</span><br><span class="line">                       + <span class="string">", data:"</span> + data);</span><br><span class="line">        &#125;</span><br><span class="line">        WXJSObject instanceIdObj = <span class="keyword">new</span> <span class="type">WXJSObject</span>(WXJSObject.<span class="keyword">String</span>,</span><br><span class="line">                                                  instanceId);</span><br><span class="line">        WXJSObject instanceObj = <span class="keyword">new</span> <span class="type">WXJSObject</span>(WXJSObject.<span class="keyword">String</span>,</span><br><span class="line">                                                template);</span><br><span class="line">        WXJSObject optionsObj = <span class="keyword">new</span> <span class="type">WXJSObject</span>(WXJSObject.JSON,</span><br><span class="line">                                               options == <span class="literal">null</span> ? <span class="string">"&#123;&#125;"</span></span><br><span class="line">                                                               : <span class="type">WXJsonUtils</span>.fromObjectToJSONString(options));</span><br><span class="line">        WXJSObject dataObj = <span class="keyword">new</span> <span class="type">WXJSObject</span>(WXJSObject.JSON,</span><br><span class="line">                                            data == <span class="literal">null</span> ? <span class="string">"&#123;&#125;"</span> : <span class="type">data</span>);</span><br><span class="line">        WXJSObject[] args = &#123;instanceIdObj, instanceObj, optionsObj,</span><br><span class="line">            dataObj&#125;;</span><br><span class="line">        invokeExecJS(instanceId, <span class="literal">null</span>, METHOD_CREATE_INSTANCE, args);</span><br><span class="line">        commitJSBridgeAlarmMonitor(instanceId, WXErrorCode.WX_SUCCESS);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        WXSDKInstance instance = WXSDKManager.getInstance().getSDKInstance(instanceId);</span><br><span class="line">        <span class="keyword">if</span> (instance != <span class="literal">null</span>) &#123;</span><br><span class="line">          instance.onRenderError(WXRenderErrorCode.WX_CREATE_INSTANCE_ERROR,</span><br><span class="line">                                 <span class="string">"createInstance failed!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">String</span> err = <span class="string">"[WXBridgeManager] invokeCreateInstance "</span> + e.getCause();</span><br><span class="line">        WXErrorCode.WX_ERR_INVOKE_NATIVE.appendErrMsg(err);</span><br><span class="line">        commitJSBridgeAlarmMonitor(instanceId, WXErrorCode.WX_ERR_INVOKE_NATIVE);</span><br><span class="line">        WXLogUtils.e(err);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p>它把之前传过来的参数又包装了以下，传给invokeExecJS执行<br><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">private void invokeExecJS(String instanceId, String namespace, String <span class="function"><span class="keyword">function</span>, <span class="title">WXJSObject</span>[] <span class="title">args</span>)&#123;</span></span><br><span class="line">    <span class="keyword">if</span> (WXEnvironment.isApkDebugable()) &#123;</span><br><span class="line">      mLodBuilder.append(<span class="string">"callJS &gt;&gt;&gt;&gt; instanceId:"</span>).append(instanceId)</span><br><span class="line">              .append(<span class="string">"function:"</span>).append(<span class="function"><span class="keyword">function</span>)</span></span><br><span class="line"><span class="function">              .<span class="title">append</span><span class="params">(<span class="string">" tasks:"</span>)</span>.<span class="title">append</span><span class="params">(WXJsonUtils.fromObjectToJSONString<span class="params">(args)</span>)</span>;</span></span><br><span class="line"><span class="function">      <span class="title">WXLogUtils</span>.<span class="title">d</span><span class="params">(mLodBuilder.substring<span class="params">(<span class="number">0</span>)</span>)</span>;</span></span><br><span class="line"><span class="function">      <span class="title">mLodBuilder</span>.<span class="title">setLength</span><span class="params">(<span class="number">0</span>)</span>;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">if</span><span class="params">(mDestroyedInstanceId!=null &amp;&amp; !mDestroyedInstanceId.contains<span class="params">(instanceId)</span>)</span> &#123;</span></span><br><span class="line">      mWXBridge.execJS(instanceId, namespace, <span class="function"><span class="keyword">function</span>, <span class="title">args</span>);</span></span><br><span class="line"><span class="function">    &#125;<span class="title">else</span>&#123;</span></span><br><span class="line">      WXLogUtils.w(<span class="string">"invokeExecJS: instanceId: "</span>+instanceId+<span class="string">"was  destroy !! ExecJS abandon !!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p>mWXBridge是WXBridge的实例，执行execJS调用so库方法进行js代码解析，在安卓中就是V8引擎，解析完后c++代码会调用callNative函数，将js中对native的操作告诉native，最终实现native端的渲染。</p>
<h2 id="2-3-native中处理v8引擎解析的js代码产生的回调，从而实现js–-gt-native"><a href="#2-3-native中处理v8引擎解析的js代码产生的回调，从而实现js–-gt-native" class="headerlink" title="2.3 native中处理v8引擎解析的js代码产生的回调，从而实现js–&gt;native"></a>2.3 native中处理v8引擎解析的js代码产生的回调，从而实现js–&gt;native</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> callNative(<span class="keyword">String</span> instanceId, <span class="keyword">String</span> tasks, <span class="keyword">String</span> callback) &#123;</span><br><span class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">if</span>(WXSDKManager.getInstance().getSDKInstance(instanceId)!=<span class="keyword">null</span>) &#123;</span><br><span class="line">      WXSDKManager.getInstance().getSDKInstance(instanceId).firstScreenCreateInstanceTime(start);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">int</span> errorCode = WXBridgeManager.getInstance().callNative(instanceId, tasks, callback);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(WXSDKManager.getInstance().getSDKInstance(instanceId)!=<span class="keyword">null</span>) &#123;</span><br><span class="line">      WXSDKManager.getInstance().getSDKInstance(instanceId).callNativeTime(System.currentTimeMillis() - start);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(WXEnvironment.isApkDebugable())&#123;</span><br><span class="line">      <span class="keyword">if</span>(errorCode == WXBridgeManager.DESTROY_INSTANCE)&#123;</span><br><span class="line">        WXLogUtils.w(<span class="string">"destroyInstance :"</span>+instanceId+<span class="string">" JSF must stop callNative"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> errorCode;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>它又调用了WXBridgeManager的callNative<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> callNative(<span class="keyword">String</span> instanceId, <span class="keyword">String</span> tasks, <span class="keyword">String</span> callback) &#123;</span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(tasks)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (WXEnvironment.isApkDebugable()) &#123;</span><br><span class="line">        WXLogUtils.e(<span class="string">"[WXBridgeManager] callNative: call Native tasks is null"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> INSTANCE_RENDERING_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (WXEnvironment.isApkDebugable()) &#123;</span><br><span class="line">      mLodBuilder.<span class="built_in">append</span>(<span class="string">"[WXBridgeManager] callNative &gt;&gt;&gt;&gt; instanceId:"</span>).<span class="built_in">append</span>(instanceId)</span><br><span class="line">          .<span class="built_in">append</span>(<span class="string">", tasks:"</span>).<span class="built_in">append</span>(tasks).<span class="built_in">append</span>(<span class="string">", callback:"</span>).<span class="built_in">append</span>(callback);</span><br><span class="line">      WXLogUtils.d(mLodBuilder.substring(<span class="number">0</span>));</span><br><span class="line">      mLodBuilder.setLength(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(mDestroyedInstanceId!=<span class="keyword">null</span> &amp;&amp;mDestroyedInstanceId.contains(instanceId))&#123;</span><br><span class="line">      <span class="keyword">return</span> DESTROY_INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">JSONArray</span> array = JSON.parseArray(tasks);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(WXSDKManager.getInstance().getSDKInstance(instanceId)!=<span class="keyword">null</span>) &#123;</span><br><span class="line">      WXSDKManager.getInstance().getSDKInstance(instanceId).jsonParseTime(System.currentTimeMillis() - start);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">size</span> = array.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">size</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">JSONObject</span> task;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; ++i) &#123;</span><br><span class="line">          task = (<span class="keyword">JSONObject</span>) array.<span class="built_in">get</span>(i);</span><br><span class="line">          <span class="keyword">if</span> (task != <span class="keyword">null</span> &amp;&amp; WXSDKManager.getInstance().getSDKInstance(instanceId) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (TextUtils.equals(WXDomModule.WXDOM, (<span class="keyword">String</span>) task.<span class="built_in">get</span>(WXDomModule.MODULE))) &#123;</span><br><span class="line">              sDomModule = getDomModule(instanceId);</span><br><span class="line">              sDomModule.callDomMethod(task);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              WXModuleManager.callModuleMethod(instanceId, (<span class="keyword">String</span>) task.<span class="built_in">get</span>(WXDomModule.MODULE),</span><br><span class="line">                      (<span class="keyword">String</span>) task.<span class="built_in">get</span>(WXDomModule.METHOD), (<span class="keyword">JSONArray</span>) task.<span class="built_in">get</span>(WXDomModule.ARGS));</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        WXLogUtils.e(<span class="string">"[WXBridgeManager] callNative exception: "</span>, e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (UNDEFINED.equals(callback)) &#123;</span><br><span class="line">      <span class="keyword">return</span> INSTANCE_RENDERING_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// get next tick</span></span><br><span class="line">    getNextTick(instanceId, callback);</span><br><span class="line">    <span class="keyword">return</span> INSTANCE_RENDERING;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> getNextTick(<span class="keyword">final</span> <span class="keyword">String</span> instanceId, <span class="keyword">final</span> <span class="keyword">String</span> callback) &#123;</span><br><span class="line">    addJSTask(METHOD_CALLBACK,instanceId, callback, <span class="string">"&#123;&#125;"</span>);</span><br><span class="line">    sendMessage(instanceId, WXJSBridgeMsgType.CALL_JS_BATCH);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> addJSTask(<span class="keyword">final</span> <span class="keyword">String</span> method, <span class="keyword">final</span> <span class="keyword">String</span> instanceId, <span class="keyword">final</span> <span class="keyword">Object</span>... args) &#123;</span><br><span class="line">    mJSHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">      @Override</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> run() &#123;</span><br><span class="line">        <span class="keyword">if</span> (args == <span class="keyword">null</span> || args.length == <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;<span class="keyword">Object</span>&gt; argsList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">Object</span> arg : args) &#123;</span><br><span class="line">          argsList.<span class="built_in">add</span>(arg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        WXHashMap&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt; task = <span class="keyword">new</span> WXHashMap&lt;&gt;();</span><br><span class="line">        task.put(WXConst.KEY_METHOD, method);</span><br><span class="line">        task.put(WXConst.KEY_ARGS, argsList);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mNextTickTasks.<span class="built_in">get</span>(instanceId) == <span class="keyword">null</span>) &#123;</span><br><span class="line">          ArrayList&lt;WXHashMap&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">          list.<span class="built_in">add</span>(task);</span><br><span class="line">          mNextTickTasks.put(instanceId, list);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          mNextTickTasks.<span class="built_in">get</span>(instanceId).<span class="built_in">add</span>(task);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> sendMessage(<span class="keyword">String</span> instanceId, <span class="built_in">int</span> what) &#123;</span><br><span class="line">    Message msg = Message.obtain(mJSHandler);</span><br><span class="line">    msg.obj = instanceId;</span><br><span class="line">    msg.what = what;</span><br><span class="line">    msg.sendToTarget();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p>在这个callNative函数中会分发task，并且获取getNextTick。tasks中就包含各种函数，下面的callDomMethod会进行判断，从而调用native中的对应方法</p>
<h2 id="2-4-WXDOMModule-java"><a href="#2-4-WXDOMModule-java" class="headerlink" title="2.4 WXDOMModule.java"></a>2.4 WXDOMModule.java</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> callDomMethod(<span class="keyword">JSONObject</span> task) &#123;</span><br><span class="line">    <span class="keyword">if</span>( task == <span class="keyword">null</span> ) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">String</span> method = (<span class="keyword">String</span>) task.<span class="built_in">get</span>(METHOD);</span><br><span class="line">    <span class="keyword">JSONArray</span> args = (<span class="keyword">JSONArray</span>) task.<span class="built_in">get</span>(ARGS);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(method == <span class="keyword">null</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">switch</span> (method) &#123;</span><br><span class="line">        <span class="keyword">case</span> CREATE_BODY:</span><br><span class="line">          <span class="keyword">if</span>(args == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          createBody((<span class="keyword">JSONObject</span>) args.<span class="built_in">get</span>(<span class="number">0</span>));</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> UPDATE_ATTRS:</span><br><span class="line">          <span class="keyword">if</span>(args == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          updateAttrs((<span class="keyword">String</span>) args.<span class="built_in">get</span>(<span class="number">0</span>), (<span class="keyword">JSONObject</span>) args.<span class="built_in">get</span>(<span class="number">1</span>));</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> UPDATE_STYLE:</span><br><span class="line">          <span class="keyword">if</span>(args == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          updateStyle((<span class="keyword">String</span>) args.<span class="built_in">get</span>(<span class="number">0</span>), (<span class="keyword">JSONObject</span>) args.<span class="built_in">get</span>(<span class="number">1</span>));</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> REMOVE_ELEMENT:</span><br><span class="line">          <span class="keyword">if</span>(args == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          removeElement((<span class="keyword">String</span>) args.<span class="built_in">get</span>(<span class="number">0</span>));</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ADD_ELEMENT:</span><br><span class="line">          <span class="keyword">if</span>(args == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          addElement((<span class="keyword">String</span>) args.<span class="built_in">get</span>(<span class="number">0</span>), (<span class="keyword">JSONObject</span>) args.<span class="built_in">get</span>(<span class="number">1</span>), (Integer) args.<span class="built_in">get</span>(<span class="number">2</span>));</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MOVE_ELEMENT:</span><br><span class="line">          <span class="keyword">if</span>(args == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          moveElement((<span class="keyword">String</span>) args.<span class="built_in">get</span>(<span class="number">0</span>), (<span class="keyword">String</span>) args.<span class="built_in">get</span>(<span class="number">1</span>), (Integer) args.<span class="built_in">get</span>(<span class="number">2</span>));</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ADD_EVENT:</span><br><span class="line">          <span class="keyword">if</span>(args == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          addEvent((<span class="keyword">String</span>) args.<span class="built_in">get</span>(<span class="number">0</span>), (<span class="keyword">String</span>) args.<span class="built_in">get</span>(<span class="number">1</span>));</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> REMOVE_EVENT:</span><br><span class="line">          <span class="keyword">if</span>(args == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          removeEvent((<span class="keyword">String</span>) args.<span class="built_in">get</span>(<span class="number">0</span>), (<span class="keyword">String</span>) args.<span class="built_in">get</span>(<span class="number">1</span>));</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> CREATE_FINISH:</span><br><span class="line">          createFinish();</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> REFRESH_FINISH:</span><br><span class="line">          refreshFinish();</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> UPDATE_FINISH:</span><br><span class="line">          updateFinish();</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SCROLL_TO_ELEMENT:</span><br><span class="line">          <span class="keyword">if</span>(args == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          scrollToElement((<span class="keyword">String</span>) args.<span class="built_in">get</span>(<span class="number">0</span>), (<span class="keyword">JSONObject</span>) args.<span class="built_in">get</span>(<span class="number">1</span>));</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ADD_RULE:</span><br><span class="line">          <span class="keyword">if</span> (args == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          addRule((<span class="keyword">String</span>) args.<span class="built_in">get</span>(<span class="number">0</span>), (<span class="keyword">JSONObject</span>) args.<span class="built_in">get</span>(<span class="number">1</span>));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">catch</span> (IndexOutOfBoundsException e)&#123;</span><br><span class="line">      <span class="comment">// no enougn args</span></span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      WXLogUtils.e(<span class="string">"Dom module call miss arguments."</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassCastException cce) &#123;</span><br><span class="line">      WXLogUtils.e(<span class="string">"Dom module call arguments format error!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h1 id="3-渲染举例"><a href="#3-渲染举例" class="headerlink" title="3 渲染举例"></a>3 渲染举例</h1><p>当method是CREATE_BODY时，会执行createBody函数<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Create a body for the current &#123;@link com.taobao.weex.WXSDKInstance&#125; according to given</span></span><br><span class="line"><span class="comment">* parameter.</span></span><br><span class="line"><span class="comment">* @param element info about how to create a body</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> createBody(JSONObject element) &#123;</span><br><span class="line">    <span class="keyword">if</span> (element == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Message msg = Message.obtain();</span><br><span class="line">    WXDomTask <span class="keyword">task</span> = <span class="keyword">new</span> WXDomTask();</span><br><span class="line">    <span class="keyword">task</span>.instanceId = mWXSDKInstance.getInstanceId();</span><br><span class="line">    <span class="keyword">task</span>.args = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">task</span>.args.add(element);</span><br><span class="line">    msg.what = WXDomHandler.MsgType.WX_DOM_CREATE_BODY;</span><br><span class="line">    msg.obj = <span class="keyword">task</span>;</span><br><span class="line">    WXSDKManager.getInstance().getWXDomManager().sendMessage(msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上面这个函数最终是调用了WXDOMManager中的sendMessage函数<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">public</span> <span class="string">void</span> <span class="string">sendMessage(Message</span> <span class="string">msg)</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">if</span> <span class="string">(msg</span> <span class="string">==</span> <span class="literal">null</span> <span class="string">||</span> <span class="string">mDomHandler</span> <span class="string">==</span> <span class="literal">null</span> <span class="string">||</span> <span class="string">mDomThread</span> <span class="string">==</span> <span class="literal">null</span></span><br><span class="line">        <span class="string">||</span> <span class="type">!mDomThread</span><span class="string">.isWXThreadAlive()</span> <span class="string">||</span> <span class="string">mDomThread.getLooper()</span> <span class="string">==</span> <span class="literal">null</span><span class="string">)</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="string">return;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">    <span class="string">mDomHandler.sendMessage(msg);</span></span><br><span class="line">  <span class="string">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>从代码中可以看到WXDOMManager中其实又是执行了mDomHandler的sendMessage。WXDomHandler负责响应消息，并且分发任务，<br>它继承了os.handler.callback。它会处理消息，最终createBody被分发到mWXDomManager.createBody,Manger中又是调用了<br>WXDOMStatement.createBody(element);下面看WXDOmStatement的createBody函数<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//WXDOMStatement.java</span></span><br><span class="line"><span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>Create command object for creating body according to </span>the<span class="markdown"> JSONObject. And put </span>the<span class="markdown"> command</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>object in </span>the<span class="markdown"> queue.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>@param element </span>the<span class="markdown"> jsonObject according to which to create command object.</span></span></span><br><span class="line"><span class="comment"><span class="markdown">*/</span></span></span><br><span class="line"><span class="keyword">void</span> createBody(JSONObject element) &#123;</span><br><span class="line">    <span class="keyword">if</span> (mDestroy) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    WXSDKInstance instance = WXSDKManager.getInstance().getSDKInstance(mInstanceId);</span><br><span class="line">    <span class="keyword">if</span> (element == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance != <span class="keyword">null</span>) &#123;</span><br><span class="line">        instance.commitUTStab(WXConst.DOM_MODULE, WXErrorCode.WX_ERR_DOM_CREATEBODY);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Parse the jsonObject to &#123;@link WXDomObject&#125; recursively</span></span><br><span class="line">    WXDomObject domObject = parseInner(element);</span><br><span class="line">    <span class="keyword">if</span>(domObject==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; style = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">if</span> (domObject.style == <span class="keyword">null</span> || !domObject.style.containsKey(WXDomPropConstant.WX_FLEXDIRECTION)) &#123;</span><br><span class="line">        style.put(WXDomPropConstant.WX_FLEXDIRECTION, <span class="string">"column"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (domObject.style == <span class="keyword">null</span> || !domObject.style.containsKey(WXDomPropConstant.WX_BACKGROUNDCOLOR)) &#123;</span><br><span class="line">        style.put(WXDomPropConstant.WX_BACKGROUNDCOLOR, <span class="string">"#ffffff"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//If there is height or width in JS, then that value will override value here.</span></span><br><span class="line">    <span class="keyword">if</span> (domObject.style == <span class="keyword">null</span> || !domObject.style.containsKey(WXDomPropConstant.WX_WIDTH)) &#123;</span><br><span class="line">        style.put(WXDomPropConstant.WX_WIDTH, WXViewUtils.getWebPxByWidth(WXViewUtils.getWeexWidth(mInstanceId)));</span><br><span class="line">        domObject.setModifyWidth(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (domObject.style == <span class="keyword">null</span> || !domObject.style.containsKey(WXDomPropConstant.WX_HEIGHT)) &#123;</span><br><span class="line">        style.put(WXDomPropConstant.WX_HEIGHT, WXViewUtils.getWebPxByWidth(WXViewUtils.getWeexHeight(mInstanceId)));</span><br><span class="line">        domObject.setModifyHeight(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    domObject.ref = WXDomObject.ROOT;</span><br><span class="line">    domObject.updateStyle(style);</span><br><span class="line">    transformStyle(domObject, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> WXComponent component = mWXRenderManager.createBodyOnDomThread(mInstanceId, domObject);</span><br><span class="line">        AddDomInfo addDomInfo = <span class="keyword">new</span> AddDomInfo();</span><br><span class="line">        addDomInfo.component = component;</span><br><span class="line">        mAddDom.put(domObject.ref, addDomInfo);</span><br><span class="line"></span><br><span class="line">        mNormalTasks.add(<span class="keyword">new</span> IWXRenderTask() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        public <span class="keyword">void</span> execute() &#123;</span><br><span class="line">            WXSDKInstance instance = WXSDKManager.getInstance().getSDKInstance(mInstanceId);</span><br><span class="line">            <span class="keyword">if</span> (instance == <span class="keyword">null</span> || instance.getContext() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                WXLogUtils.e(<span class="string">"instance is null or instance is destroy!"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                mWXRenderManager.createBody(mInstanceId, component);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                WXLogUtils.e(<span class="string">"create body failed."</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        public <span class="built_in">String</span> toString() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"createBody"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        animations.add(<span class="keyword">new</span> Pair&lt;<span class="built_in">String</span>, <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt;&gt;(domObject.ref,domObject.style));</span><br><span class="line">        mDirty = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (instance != <span class="keyword">null</span>) &#123;</span><br><span class="line">        instance.commitUTStab(WXConst.DOM_MODULE, WXErrorCode.WX_SUCCESS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line"></span><br><span class="line">        WXLogUtils.e(<span class="string">"create body in dom thread failed."</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这个函数中有一句parseInner函数把element这个JSONObject转换成domObject，给他加上了各种type、<br>event、childern等属性<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Parse the jsonObject to &#123;@link WXDomObject&#125; recursively</span></span><br><span class="line"><span class="comment">   * @param map the original JSONObject</span></span><br><span class="line"><span class="comment">   * @return Dom Object corresponding to the JSONObject.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> WXDomObject parseInner(<span class="keyword">JSONObject</span> <span class="built_in">map</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">map</span> == <span class="keyword">null</span> || <span class="built_in">map</span>.<span class="built_in">size</span>() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">String</span> type = (<span class="keyword">String</span>) <span class="built_in">map</span>.<span class="built_in">get</span>(<span class="string">"type"</span>);</span><br><span class="line">    WXDomObject domObject = WXDomObjectFactory.newInstance(type);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(domObject==<span class="keyword">null</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    domObject.type = type;</span><br><span class="line">    domObject.ref = (<span class="keyword">String</span>) <span class="built_in">map</span>.<span class="built_in">get</span>(<span class="string">"ref"</span>);</span><br><span class="line">    <span class="keyword">Object</span> style = <span class="built_in">map</span>.<span class="built_in">get</span>(<span class="string">"style"</span>);</span><br><span class="line">    <span class="keyword">if</span> (style != <span class="keyword">null</span> &amp;&amp; style <span class="keyword">instanceof</span> <span class="keyword">JSONObject</span>) &#123;</span><br><span class="line">      domObject.style = <span class="keyword">new</span> WXStyle();</span><br><span class="line">      putAll(domObject.style, (<span class="keyword">JSONObject</span>) style);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">Object</span> attr = <span class="built_in">map</span>.<span class="built_in">get</span>(<span class="string">"attr"</span>);</span><br><span class="line">    <span class="keyword">if</span> (attr != <span class="keyword">null</span> &amp;&amp; attr <span class="keyword">instanceof</span> <span class="keyword">JSONObject</span>) &#123;</span><br><span class="line">      domObject.attr = <span class="keyword">new</span> WXAttr();</span><br><span class="line">      putAll(domObject.attr, (<span class="keyword">JSONObject</span>) attr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">Object</span> event = <span class="built_in">map</span>.<span class="built_in">get</span>(<span class="string">"event"</span>);</span><br><span class="line">    <span class="keyword">if</span> (event != <span class="keyword">null</span> &amp;&amp; event <span class="keyword">instanceof</span> <span class="keyword">JSONArray</span>) &#123;</span><br><span class="line">      domObject.event = <span class="keyword">new</span> WXEvent();</span><br><span class="line">      <span class="keyword">JSONArray</span> eventArray = (<span class="keyword">JSONArray</span>) event;</span><br><span class="line">      <span class="built_in">int</span> count = eventArray.<span class="built_in">size</span>();</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; count; ++i) &#123;</span><br><span class="line">        domObject.event.<span class="built_in">add</span>(eventArray.getString(i));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">Object</span> children = <span class="built_in">map</span>.<span class="built_in">get</span>(<span class="string">"children"</span>);</span><br><span class="line">    <span class="keyword">if</span> (children != <span class="keyword">null</span> &amp;&amp; children <span class="keyword">instanceof</span> <span class="keyword">JSONArray</span>) &#123;</span><br><span class="line">      domObject.children = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">      <span class="keyword">JSONArray</span> childrenArray = (<span class="keyword">JSONArray</span>) children;</span><br><span class="line">      <span class="built_in">int</span> count = childrenArray.<span class="built_in">size</span>();</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; count; ++i) &#123;</span><br><span class="line">        domObject.children.<span class="built_in">add</span>(parseInner(childrenArray.getJSONObject(i)));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> domObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这createBody函数就是根据JSONObject创建一个创建body的命令并且推到队列中。<br>队列里会执行这么一句话，执行了mWXRenderManager的createBodyOnDomThread函数<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> WXComponent component = mWXRenderManager.createBodyOnDomThread(mInstanceId, domObject);</span><br></pre></td></tr></table></figure></p>
<p>看WXRenderManager中的createBodyOnDomThread函数<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> WXComponent createBodyOnDomThread(String instanceId, WXDomObject domObject) &#123;</span><br><span class="line">    WXRenderStatement statement = mRegistries.<span class="keyword">get</span>(instanceId);</span><br><span class="line">    <span class="keyword">if</span> (statement == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> statement.createBodyOnDomThread(domObject);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>又是调用了WXRenderStatement中的对应函数<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">WXComponent createBodyOnDomThread(WXDomObject dom) &#123;</span><br><span class="line">    <span class="keyword">if</span> (mWXSDKInstance == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    WXDomObject domObject = <span class="keyword">new</span> <span class="type">WXDomObject</span>();</span><br><span class="line">    domObject.type = WXBasicComponentType.DIV;</span><br><span class="line">    domObject.ref = <span class="string">"god"</span>;</span><br><span class="line">    mGodComponent = (WXVContainer) WXComponentFactory.<span class="keyword">new</span><span class="type">Instance</span>(mWXSDKInstance, domObject, <span class="literal">null</span>);</span><br><span class="line">    mGodComponent.createView(<span class="literal">null</span>, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span> (mGodComponent == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (WXEnvironment.isApkDebugable()) &#123;</span><br><span class="line">        WXLogUtils.e(<span class="string">"rootView failed!"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//TODO error callback</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    FrameLayout frameLayout = (FrameLayout) mGodComponent.getHostView();</span><br><span class="line">    ViewGroup.LayoutParams layoutParams = <span class="keyword">new</span> <span class="type">LayoutParams</span>(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);</span><br><span class="line">    frameLayout.setLayoutParams(layoutParams);</span><br><span class="line">    frameLayout.setBackgroundColor(Color.TRANSPARENT);</span><br><span class="line"></span><br><span class="line">    WXComponent component = generateComponentTree(dom, mGodComponent);</span><br><span class="line">    mGodComponent.addChild(component);</span><br><span class="line">    mRegistry.put(component.getRef(), component);</span><br><span class="line">    <span class="keyword">return</span> component;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这个函数就是创建WXComponent，但是component是由其中generateComponentTree这个函数是把之前传进来的WXDomObject转换成Component的<br><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> WXComponent generateComponentTree(WXDomObject dom, WXVContainer <span class="keyword">parent</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (dom == <span class="keyword">null</span> || <span class="keyword">parent</span> == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    WXComponent component = WXComponentFactory.newInstance(mWXSDKInstance, dom,</span><br><span class="line">                                                           <span class="keyword">parent</span>, <span class="keyword">parent</span>.isLazy());</span><br><span class="line"></span><br><span class="line">    mRegistry.put(dom.ref, component);</span><br><span class="line">    <span class="keyword">if</span> (component <span class="keyword">instanceof</span> WXVContainer) &#123;</span><br><span class="line">      WXVContainer parentC = (WXVContainer) component;</span><br><span class="line">      <span class="keyword">int</span> count = dom.childCount();</span><br><span class="line">      WXDomObject child = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; ++i) &#123;</span><br><span class="line">        child = dom.getChild(i);</span><br><span class="line">        <span class="keyword">if</span> (child != <span class="keyword">null</span>) &#123;</span><br><span class="line">          parentC.addChild(generateComponentTree(child, parentC));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> component;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>终于得到WXComponent后，在WXDOMStatement.createBody中接着就执行了<br>mWXRenderManager.createBody(mInstanceId, component);同样的它又<br>是调用了statement.createBody(component);<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * create RootView ，every weex Instance View has a rootView;</span></span><br><span class="line"><span class="comment">   * @see com.taobao.weex.dom.WXDomStatement#createBody(JSONObject)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">void createBody(WXComponent component) &#123;</span><br><span class="line">    long start = System.currentTimeMillis();</span><br><span class="line">    component.createView(mGodComponent, -<span class="number">1</span>);</span><br><span class="line">    if (WXEnvironment.isApkDebugable()) &#123;</span><br><span class="line">      WXLogUtils.renderPerformanceLog(<span class="string">"createView"</span>, (System.currentTimeMillis() - start));</span><br><span class="line">    &#125;</span><br><span class="line">    start = System.currentTimeMillis();</span><br><span class="line">    component.applyLayoutAndEvent(component);</span><br><span class="line">    component.<span class="keyword">bindData(component);</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"> </span>   if (WXEnvironment.isApkDebugable()) &#123;</span><br><span class="line">      WXLogUtils.renderPerformanceLog(<span class="string">"bind"</span>, (System.currentTimeMillis() - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (component <span class="keyword">instanceof </span>WXScroller) &#123;</span><br><span class="line">      WXScroller <span class="keyword">scroller </span>= (WXScroller) component;</span><br><span class="line">      if (<span class="keyword">scroller.getInnerView() </span><span class="keyword">instanceof </span><span class="keyword">ScrollView) </span>&#123;</span><br><span class="line">        mWXSDKInstance.setRootScrollView((<span class="keyword">ScrollView) </span><span class="keyword">scroller.getInnerView());</span></span><br><span class="line"><span class="keyword"> </span>     &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mWXSDKInstance.setRootView(mGodComponent.getRealView());</span><br><span class="line">    if (mWXSDKInstance.getRenderStrategy() != WXRenderStrategy.APPEND_ONCE) &#123;</span><br><span class="line">      mWXSDKInstance.onViewCreated(mGodComponent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>最终这两句话创建rootview并且触发mWXSDKInstance的onViewCreated<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">mWXSDKInstance</span><span class="selector-class">.setRootView</span>(mGodComponent.getRealView());</span><br><span class="line"><span class="selector-tag">if</span> (mWXSDKInstance.getRenderStrategy() != WXRenderStrategy.APPEND_ONCE) &#123;</span><br><span class="line">    <span class="selector-tag">mWXSDKInstance</span><span class="selector-class">.onViewCreated</span>(mGodComponent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="4-渲染结束调用过程"><a href="#4-渲染结束调用过程" class="headerlink" title="4 渲染结束调用过程"></a>4 渲染结束调用过程</h1><h2 id="4-1-当method是CREATE-FINISH时，调用createFinish"><a href="#4-1-当method是CREATE-FINISH时，调用createFinish" class="headerlink" title="4.1 当method是CREATE_FINISH时，调用createFinish"></a>4.1 当method是CREATE_FINISH时，调用createFinish</h2><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  * Notify <span class="keyword">the</span> &#123;@<span class="literal">link</span> WXDomManager&#125; <span class="keyword">that</span> <span class="keyword">creation</span> <span class="keyword">of</span> <span class="keyword">dom</span> <span class="keyword">tree</span> <span class="keyword">is</span> <span class="keyword">finished</span>.</span><br><span class="line">  * This notify is given by JS.</span><br><span class="line">*/</span><br><span class="line">public void createFinish() &#123;</span><br><span class="line">    Message msg = Message.obtain();</span><br><span class="line">    WXDomTask task = new WXDomTask();</span><br><span class="line">    task.instanceId = mWXSDKInstance.getInstanceId();</span><br><span class="line">    msg.what = WXDomHandler.MsgType.WX_DOM_CREATE_FINISH;</span><br><span class="line">    msg.obj = task;</span><br><span class="line">    WXSDKManager.getInstance().getWXDomManager().sendMessage(msg);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>getWXDomManager的sendMessage调用了mDomHandler.sendMessage(msg);<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">WXDomHandler.java</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Handler for dom operations.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> class WXDomHandler implements Handler.Callback &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The batch operation in dom thread will run at most once in 16ms.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> DELAY_TIME = <span class="number">16</span>;<span class="comment">//ms</span></span><br><span class="line">  <span class="keyword">private</span> WXDomManager mWXDomManager;</span><br><span class="line">  <span class="keyword">private</span> <span class="built_in">boolean</span> mHasBatch = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> WXDomHandler(WXDomManager domManager) &#123;</span><br><span class="line">    mWXDomManager = domManager;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">boolean</span> handleMessage(Message msg) &#123;</span><br><span class="line">    <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">int</span> what = msg.what;</span><br><span class="line">    <span class="keyword">Object</span> obj = msg.obj;</span><br><span class="line">    WXDomTask task = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> WXDomTask) &#123;</span><br><span class="line">      task = (WXDomTask) obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!mHasBatch) &#123;</span><br><span class="line">      mHasBatch = <span class="keyword">true</span>;</span><br><span class="line">      mWXDomManager.sendEmptyMessageDelayed(WXDomHandler.MsgType.WX_DOM_BATCH, DELAY_TIME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (what) &#123;</span><br><span class="line">      <span class="keyword">case</span> MsgType.WX_DOM_CREATE_BODY:</span><br><span class="line">        mWXDomManager.createBody(task.instanceId, (<span class="keyword">JSONObject</span>) task.args.<span class="built_in">get</span>(<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> MsgType.WX_DOM_UPDATE_ATTRS:</span><br><span class="line">        mWXDomManager.updateAttrs(task.instanceId, (<span class="keyword">String</span>) task.args.<span class="built_in">get</span>(<span class="number">0</span>), (<span class="keyword">JSONObject</span>) task.args.<span class="built_in">get</span>(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> MsgType.WX_DOM_UPDATE_STYLE:</span><br><span class="line">        mWXDomManager.updateStyle(task.instanceId, (<span class="keyword">String</span>) task.args.<span class="built_in">get</span>(<span class="number">0</span>), (<span class="keyword">JSONObject</span>) task.args.<span class="built_in">get</span>(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> MsgType.WX_DOM_ADD_DOM:</span><br><span class="line">        mWXDomManager.addDom(task.instanceId, (<span class="keyword">String</span>) task.args.<span class="built_in">get</span>(<span class="number">0</span>), (<span class="keyword">JSONObject</span>) task.args.<span class="built_in">get</span>(<span class="number">1</span>), (Integer) task.args.<span class="built_in">get</span>(<span class="number">2</span>));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> MsgType.WX_DOM_REMOVE_DOM:</span><br><span class="line">        mWXDomManager.removeDom(task.instanceId, (<span class="keyword">String</span>) task.args.<span class="built_in">get</span>(<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> MsgType.WX_DOM_MOVE_DOM:</span><br><span class="line">        mWXDomManager.moveDom(task.instanceId, (<span class="keyword">String</span>) task.args.<span class="built_in">get</span>(<span class="number">0</span>), (<span class="keyword">String</span>) task.args.<span class="built_in">get</span>(<span class="number">1</span>), (Integer) task.args.<span class="built_in">get</span>(<span class="number">2</span>));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> MsgType.WX_DOM_ADD_EVENT:</span><br><span class="line">        mWXDomManager.addEvent(task.instanceId, (<span class="keyword">String</span>) task.args.<span class="built_in">get</span>(<span class="number">0</span>), (<span class="keyword">String</span>) task.args.<span class="built_in">get</span>(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> MsgType.WX_DOM_REMOVE_EVENT:</span><br><span class="line">        mWXDomManager.removeEvent(task.instanceId, (<span class="keyword">String</span>) task.args.<span class="built_in">get</span>(<span class="number">0</span>), (<span class="keyword">String</span>) task.args.<span class="built_in">get</span>(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> MsgType.WX_DOM_CREATE_FINISH:</span><br><span class="line">        mWXDomManager.createFinish(task.instanceId);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> MsgType.WX_DOM_REFRESH_FINISH:</span><br><span class="line">        mWXDomManager.refreshFinish(task.instanceId);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> MsgType.WX_DOM_UPDATE_FINISH:</span><br><span class="line">        mWXDomManager.updateFinish(task.instanceId);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> MsgType.WX_ANIMATION:</span><br><span class="line">        mWXDomManager.startAnimation(task.instanceId,</span><br><span class="line">                                     (<span class="keyword">String</span>) task.args.<span class="built_in">get</span>(<span class="number">0</span>),</span><br><span class="line">                                     (<span class="keyword">String</span>) task.args.<span class="built_in">get</span>(<span class="number">1</span>),</span><br><span class="line">                                     (<span class="keyword">String</span>) task.args.<span class="built_in">get</span>(<span class="number">2</span>));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> MsgType.WX_DOM_BATCH:</span><br><span class="line">        mWXDomManager.batch();</span><br><span class="line">        mHasBatch = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> MsgType.WX_DOM_SCROLLTO:</span><br><span class="line">        mWXDomManager.scrollToDom(task.instanceId, (<span class="keyword">String</span>) task.args.<span class="built_in">get</span>(<span class="number">0</span>), (<span class="keyword">JSONObject</span>) task.args.<span class="built_in">get</span>(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> MsgType.WX_DOM_ADD_RULE:</span><br><span class="line">        mWXDomManager.addRule((<span class="keyword">String</span>) task.args.<span class="built_in">get</span>(<span class="number">0</span>), (<span class="keyword">JSONObject</span>) task.args.<span class="built_in">get</span>(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> class MsgType &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> WX_DOM_CREATE_BODY = <span class="number">0x0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> WX_DOM_UPDATE_ATTRS = <span class="number">0x01</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> WX_DOM_UPDATE_STYLE = <span class="number">0x02</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> WX_DOM_ADD_DOM = <span class="number">0x03</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> WX_DOM_REMOVE_DOM = <span class="number">0x04</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> WX_DOM_MOVE_DOM = <span class="number">0x05</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> WX_DOM_ADD_EVENT = <span class="number">0x06</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> WX_DOM_REMOVE_EVENT = <span class="number">0x07</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> WX_DOM_SCROLLTO = <span class="number">0x08</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> WX_DOM_CREATE_FINISH = <span class="number">0x09</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> WX_DOM_REFRESH_FINISH = <span class="number">0x0a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> WX_DOM_UPDATE_FINISH = <span class="number">0x0b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> WX_ANIMATION=<span class="number">0xc</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> WX_DOM_ADD_RULE=<span class="number">0xd</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> WX_DOM_BATCH = <span class="number">0xff</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>最终调用了mWXDomManager中的对应方法，而WXDomManager中最终又调用了WXDomStatement中的对应方法。</p>
<h2 id="4-2-WXDomStatement-java"><a href="#4-2-WXDomStatement-java" class="headerlink" title="4.2 WXDomStatement.java"></a>4.2 WXDomStatement.java</h2><p>weex.dom.WXDomStatement调用createFinish，通知WXRenderManager，given view is finished<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Create a command object for notifying &#123;<span class="doctag">@link</span> WXRenderManager&#125; that the process of creating</span></span><br><span class="line"><span class="comment">  * given view is finished, and put the command object in the queue.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createFinish</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mDestroy) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> WXDomObject root = mRegistry.get(WXDomObject.ROOT);</span><br><span class="line">    mNormalTasks.add(<span class="keyword">new</span> IWXRenderTask() &#123;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mWXRenderManager.createFinish(mInstanceId,</span><br><span class="line">                                      (<span class="keyword">int</span>) root.getLayoutWidth(),</span><br><span class="line">                                      (<span class="keyword">int</span>) root.getLayoutHeight());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="function">String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"createFinish"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    mDirty = <span class="keyword">true</span>;</span><br><span class="line">    WXSDKInstance instance = WXSDKManager.getInstance().getSDKInstance(mInstanceId);</span><br><span class="line">    <span class="keyword">if</span> (instance != <span class="keyword">null</span>) &#123;</span><br><span class="line">      instance.commitUTStab(WXConst.DOM_MODULE, WXErrorCode.WX_SUCCESS);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="4-3-渲染完触发回调"><a href="#4-3-渲染完触发回调" class="headerlink" title="4.3 渲染完触发回调"></a>4.3 渲染完触发回调</h2><p>WXRenderStatement调用createFinish，触发mWXSDKInstance.onViewCreated(mGodComponent);</p>
]]></content>
      
        <categories>
            
            <category> 自学 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Weex </tag>
            
            <tag> android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[白帽子讲web安全]]></title>
      <url>http://ldllidonglin.github.io/blog/2016/05/11/2016-05-11-%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%B2web%E5%AE%89%E5%85%A8%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>阿里巴巴高级安全专家吴翰清（道哥）写的入门书<br><a id="more"></a></p>
<h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><ul>
<li>安全三要素<ul>
<li>机密性、完整性、可用性</li>
</ul>
</li>
</ul>
<h1 id="第二章-浏览器安全"><a href="#第二章-浏览器安全" class="headerlink" title="第二章 浏览器安全"></a>第二章 浏览器安全</h1><ul>
<li>限制了来自不同源的document或者脚本对当前document读取或者设置某些属性</li>
<li>恶意网址拦截主要靠黑名单</li>
</ul>
<h1 id="第三章-跨站脚本攻击-XSS"><a href="#第三章-跨站脚本攻击-XSS" class="headerlink" title="第三章 跨站脚本攻击(XSS)"></a>第三章 跨站脚本攻击(XSS)</h1><ul>
<li>全称是cross site script，为了和css区分开</li>
<li><p>根据效果不同可以分为三类</p>
<ul>
<li><p>反射型XSS<br>把用户输入数据反射到浏览器，比如输入文本中有如下内容</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"<span class="tag">&lt;<span class="name">script</span>&gt;</span>alert()<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样的内容到达浏览器后脚本就会被执行</p>
</li>
<li>存储型XSS<br>输入数据存储在服务器端，效果持久，比如一篇博客，博客内容中有攻击脚本，那每个访问这篇博客的用户都将被攻击</li>
<li>DOM Based XSS<br>通过修改页面DOM来实现执行攻击脚本</li>
</ul>
</li>
<li>常见的攻击有劫持cookie</li>
<li>防御方法主要有：<ul>
<li>对输出到html中的变量进行htmlEncode，就是对特殊符号比如‘&lt;、&amp;、&gt;’等进行转义。</li>
<li>JavaScript代码则进行JavaScriptEncode，变量包括在引号内，防御哪些攻击代码被直接执行。</li>
</ul>
</li>
</ul>
<h1 id="第四章-跨站请求伪造"><a href="#第四章-跨站请求伪造" class="headerlink" title="第四章 跨站请求伪造"></a>第四章 跨站请求伪造</h1><ul>
<li>浏览器的session cookie在浏览器生命周期内都是有效的，所以新开一个页面，也是可以发送cookie的。所以常见的攻击模式就是伪造一个页面，诱使用户在点开想要攻击的页面后再点击该页面，该页面中伪造一个攻击请求，因为还在同一个浏览器进程中，所以session cookie会被发送，如果被攻击站点的cookie是被用来认证的话，那攻击就成功了。但是目前主流浏览器会拦截第三方cookie，即那些会保持在本地的cookie。</li>
<li>防御手段主要有：<ul>
<li>验证码。这样伪造的请求就不能自动发送了，必须通过交互的方式填验证码才能发送</li>
<li>Referer check。因为页面和页面之间的跳转是有一定的逻辑关系的，所以每次处理请求时检测Referer可以过滤掉很多异常请求。但是由于隐私或者其他情况，很多时候没法取得Referer，所以这个方法可用性不是很强。</li>
<li>Token。攻击之所以可以成功，是因为攻击者很容易从URL中猜测出如何去构造一个请求。如果我把请求参数进行加密，那攻击者就没法准确的构造出正确的请求了，就没法攻击了。常用的做法是把token当作一个字段或者放在请求头中一起发送，因为攻击则没法构造出准确的token值，就没法发起有效的攻击了。token要注意保密性和随机性。</li>
</ul>
</li>
</ul>
<h1 id="第五章-点击劫持"><a href="#第五章-点击劫持" class="headerlink" title="第五章 点击劫持"></a>第五章 点击劫持</h1><p>这是一种视觉欺骗，攻击者使用个透明的、不可见的iframe覆盖在网页上，然后诱使用户在网页上进行点击操作，从而从而在用户不知情的情况下触发iframe上的一些操作。通过调整iframe的位置，可以让iframe上的某些按钮或者链接覆盖在用户会点击的位置，从而实现攻击。</p>
<h1 id="第六章-HTML5安全"><a href="#第六章-HTML5安全" class="headerlink" title="第六章 HTML5安全"></a>第六章 HTML5安全</h1><ul>
<li>由于HTML5有很多新标签，以前的防护规则可能会没有考虑到这些新标签，所以有可能会发生新的xss攻击</li>
<li>canvas可以绘制图片，通过这一功能，可以在canvas上通过算法自动破解验证码</li>
<li>跨域Access-Control-Allow-Origin:*存在危险</li>
<li>本地存储将给攻击者带来便利，实现跨越页面攻击</li>
<li>postMessage可以实现页面间通信，也给攻击者带来便利</li>
</ul>
<h1 id="第七章-注入攻击"><a href="#第七章-注入攻击" class="headerlink" title="第七章 注入攻击"></a>第七章 注入攻击</h1><p>注入攻击的本质是把用户输入的数据当作代码来执行，违背“数据和代码相隔离原则”。这种攻击必须满足连个条件<br>1：用户能够控制输入。2：原本程序要执行的代码拼接了用户输入的数据。</p>
<ul>
<li>SQL注入<br>就是针对一些查询请求，构造恶意数据，比如添加一个引号，结束原来的sql查询语句，并在后面添加攻击查询语句<ul>
<li>预防这种简单的SQL注入就是使用预编译语句，避免直接拼接用户输入为sql语句。</li>
<li>进行数据过滤，比如检查数据类型</li>
<li>最小权限原则，避免web应用直接使用root，dbowner等高权限账户直接连接数据库</li>
</ul>
</li>
<li>CRLF注入<br>由于CRLF常用作不同语义之间的分隔符，因此注入CRLF字符，就会改变原有的语义，比如日志注入，HTTP头注入</li>
</ul>
<h1 id="第八章-文件上传漏洞"><a href="#第八章-文件上传漏洞" class="headerlink" title="第八章 文件上传漏洞"></a>第八章 文件上传漏洞</h1><ul>
<li>常见的安全问题：<ul>
<li>上传文件是Web脚本语言，服务器的Web容器解释并执行了用户上传的脚本，导致代码执行。</li>
<li>上传文件是钓鱼图片或者包含了脚本的图片，在某些低版本的浏览器会被作为脚本执行。</li>
</ul>
</li>
<li>预防:<ul>
<li>文件上传的目录设置为不可执行</li>
<li>判断文件类型，使用白名单的方式</li>
<li>使用随机的方式改写文件名和路径</li>
<li>文件服务器在不同的域名，由于同源策略，使得很多xss攻击失效</li>
</ul>
</li>
</ul>
<h1 id="第九章-认证与会话管理"><a href="#第九章-认证与会话管理" class="headerlink" title="第九章 认证与会话管理"></a>第九章 认证与会话管理</h1><ul>
<li>session在服务端要设置过期时间，到期强制销毁，防止被攻击者获取了之后就永久有效了。</li>
<li>单点登录，讲风险点集中于一点</li>
</ul>
<h1 id="第十章-访问控制"><a href="#第十章-访问控制" class="headerlink" title="第十章 访问控制"></a>第十章 访问控制</h1><ul>
<li>OAuth是用来解决跨应用授权的问题，比如微博登录等等授权问题。无需提供用户名和密码。</li>
</ul>
<h1 id="第十一章-加密算法与随机数"><a href="#第十一章-加密算法与随机数" class="headerlink" title="第十一章 加密算法与随机数"></a>第十一章 加密算法与随机数</h1><ul>
<li>不使用ECB模式</li>
<li>不使用流密码</li>
<li>使用HMAC-SHA1代替MD5</li>
<li>salts和IV要随机产生</li>
<li>不要自己实现加密算法，尽量使用安全专家已经实现好的库</li>
</ul>
<h1 id="第十二章-Web框架安全"><a href="#第十二章-Web框架安全" class="headerlink" title="第十二章 Web框架安全"></a>第十二章 Web框架安全</h1><ol>
<li>框架是处于基础和底层的位置，所以在这个地方处理安全问题有很大的便利性，可以避免在业务代码中去重复处理很多问题，在业务代码中处理效率低并且可靠性低。</li>
<li>MVC框架安全，现在流行MVC架构，所以可以在框架层面解决很多安全问题。用户提交的数据都会经过View层，所以可以在View层统一处理很多安全问题，View层一般都会有模板引擎，可以在这个地方解决XSS攻击。在Model层就可以解决SQL注入等问题。</li>
<li>框架自身的代码也需注意安全问题。</li>
</ol>
<h1 id="第十三章-应用层拒绝服务攻击"><a href="#第十三章-应用层拒绝服务攻击" class="headerlink" title="第十三章 应用层拒绝服务攻击"></a>第十三章 应用层拒绝服务攻击</h1><ol>
<li>DDOS攻击又称分布式拒绝服务，利用合理请求造成服务过载，导致服务不可用。</li>
<li>CC攻击，指的是通过对一些消耗资源较大的页面不断发起请求，造成服务器资源耗尽。因为这是一种消耗资源的攻击，所以防御方法就是优化应用，减少资源的消耗。防御方法主要有对使用很频繁的资源放到memcache中，命中了memcache后消耗服务器资源就很很少了、上CDN分流、对每一个客户端做访问频次限制。</li>
<li>验证码防御，但是目前自动识别验证码的技术已经非常成熟了，所以防御效果并不好。</li>
<li>资源耗尽攻击：发送畸形的HTTP请求，造成服务器以为请求还没结束，故一直占用资源。</li>
<li>正则表达式写的不好，也会造成正则表达式引擎资源耗尽，造成服务器性能下降，服务不可用。</li>
<li>总之就是得清洗流量，准确识别出攻击对象，拒绝攻击对象的访问。</li>
</ol>
<h1 id="第十四章-PHP安全"><a href="#第十四章-PHP安全" class="headerlink" title="第十四章 PHP安全"></a>第十四章 PHP安全</h1><ol>
<li>文件包含漏洞，php的include函数不会在意被包含的文件是什么类型，都将作为php代码执行，所以如果文件路径是动态变量的方式传入的，那就很容易被攻击，或者被攻击者读取到敏感文件从而获取敏感信息。</li>
<li>变量覆盖，php4.2.0之前版本，默认变量可以来自不同地方，比如页面表达和cookie，就非常容易被攻击者覆盖原来程序内的全局变量，实现攻击。</li>
<li>建议配置  <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">register_globals</span> = <span class="literal">off</span><span class="comment">;</span></span><br><span class="line"><span class="attr">open_basedir</span> = /home/web/html/ 限定只能操作指定目录下的文件</span><br><span class="line"><span class="attr">allow_url_include</span>  = <span class="literal">off</span></span><br><span class="line"><span class="attr">display_errors</span> = <span class="literal">off</span></span><br><span class="line"><span class="attr">log_errors</span> = <span class="literal">off</span></span><br><span class="line"><span class="attr">session.cookie_httponly</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="第十五章-Web-Server-配置安全"><a href="#第十五章-Web-Server-配置安全" class="headerlink" title="第十五章 Web Server 配置安全"></a>第十五章 Web Server 配置安全</h1><ol>
<li>Apache安全。最小权限原则，尽可能减少不必要的Module，对于要使用的Module，要检查其对应版本是否存在已知的安全漏洞。为Apache单独创建一个用户来运行，不能用root/admin身份。保护好log。</li>
<li>及时更新补丁</li>
<li>Tomcat 删掉后台，防止密码被盗取从而控制了整个server</li>
</ol>
<h1 id="第十六章-互联网业务安全"><a href="#第十六章-互联网业务安全" class="headerlink" title="第十六章 互联网业务安全"></a>第十六章 互联网业务安全</h1><ol>
<li>注重业务逻辑安全，不能在业务逻辑上发生安全问题</li>
<li>优秀的安全方案，必须还要有良好的用户体验和优良的性能</li>
<li>及时拦截、清除产品运行中产生的各种垃圾信息、账号等隐患</li>
</ol>
<h1 id="第十七章-安全开发流程"><a href="#第十七章-安全开发流程" class="headerlink" title="第十七章 安全开发流程"></a>第十七章 安全开发流程</h1><ol>
<li>开发要进行安全培训、开发前确认安全要求、开发中的质量/bug控制、安全和隐私风险评估、设计时就要考虑安全和隐私问题、减少攻击面、威胁建模、使用指定的安全工具、启用不安全的函数、静态动态分析、事件响应机制、最终安全评估、发布存档</li>
<li>使用相应工具进行代码安全审计和安全测试</li>
</ol>
<h1 id="第十八章-安全运营"><a href="#第十八章-安全运营" class="headerlink" title="第十八章 安全运营"></a>第十八章 安全运营</h1><ol>
<li>建立漏洞修补流程、安全监控、入侵检测、紧急响应流程</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>5月11号到8月4号，历时85天终于把这本书看完了，收获不少。</p>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> web安全 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript模式读书笔记]]></title>
      <url>http://ldllidonglin.github.io/blog/2016/02/21/2016-02-21-JavaScript%E6%A8%A1%E5%BC%8F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>模式是针对普通问题的解决方案，更进一步说是解决一类特定问题的模板。所以这本书主要就是提炼出JavaScript中的一些非常好的实践经验，抽象为解决一类问题的模板。里面主要是讲代码模式。如果看了高级程序设计和高性能JavaScript，这本书完全没有必要再看。<br><a id="more"></a></p>
<h1 id="第一章-简介"><a href="#第一章-简介" class="headerlink" title="第一章 简介"></a>第一章 简介</h1><p>基本概念</p>
<h1 id="第二章-基本技巧"><a href="#第二章-基本技巧" class="headerlink" title="第二章 基本技巧"></a>第二章 基本技巧</h1><p>这一章主要讲了一些比较常见的注意事项，比如减少使用全局变量、for-in中注意使用hasOwnProperty()，不要使用eval()，不要给内置类型增加方法，使用===、代码格式等等。</p>
<h1 id="第三章-字面量和构造函数"><a href="#第三章-字面量和构造函数" class="headerlink" title="第三章 字面量和构造函数"></a>第三章 字面量和构造函数</h1><p>总结就是一句话，提倡使用字面量而不是原生的构造函数。严格模式下，自定义的构造函数中的this不会指向window，而是undefined，这点要注意。</p>
<h1 id="第四章-函数"><a href="#第四章-函数" class="headerlink" title="第四章 函数"></a>第四章 函数</h1><ol>
<li>当要传递很多参数给函数时，可以考虑使用一个配置对象来代替这些参数。这样就不需要技术顺序，也更利于阅读和维护。但是不便之处在于需要记住参数名称，而且属性名称无法被压缩。</li>
<li>如果频繁调用同一个函数，并且大多数参数是一样的时候，可以考虑把函数curry化</li>
</ol>
<h1 id="第五章-对象创建模式"><a href="#第五章-对象创建模式" class="headerlink" title="第五章 对象创建模式"></a>第五章 对象创建模式</h1><p>多种不同的模式创建对象，比如用命名空间、method方法实现方法声明。</p>
<h1 id="第六章-代码复用模式"><a href="#第六章-代码复用模式" class="headerlink" title="第六章 代码复用模式"></a>第六章 代码复用模式</h1><ol>
<li><p>利用临时构造函数实现继承</p>
 <figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherit</span><span class="params">(C,P)</span><span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">    var F = function () &#123;&#125;</span>;</span></span><br><span class="line">    F.prototype = P.prototype;</span><br><span class="line">    C.prototype = <span class="keyword">new</span> F();</span><br><span class="line">    C<span class="function">.<span class="keyword">constructor</span> = <span class="title">C</span>;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>解决了共享同一个原型带来的问题，同时还能继续受益于原型链的好处</p>
</li>
</ol>
<h1 id="第七章-设计模式"><a href="#第七章-设计模式" class="headerlink" title="第七章 设计模式"></a>第七章 设计模式</h1><p>没新内容</p>
<h1 id="第八章-DOM和浏览器模式"><a href="#第八章-DOM和浏览器模式" class="headerlink" title="第八章 DOM和浏览器模式"></a>第八章 DOM和浏览器模式</h1><p>没什么新内容</p>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[大众点评数据抓取总结]]></title>
      <url>http://ldllidonglin.github.io/blog/2016/01/26/2016-01-26-%E5%A4%A7%E4%BC%97%E7%82%B9%E8%AF%84%E6%95%B0%E6%8D%AE%E6%8A%93%E5%8F%96%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h1 id="获取大众点评数据的几种方式的总结"><a href="#获取大众点评数据的几种方式的总结" class="headerlink" title="获取大众点评数据的几种方式的总结"></a>获取大众点评数据的几种方式的总结</h1><a id="more"></a>
<h2 id="官方API"><a href="#官方API" class="headerlink" title="官方API"></a><a href="http://developer.dianping.com/" target="_blank" rel="noopener">官方API</a></h2><p>它在2015.9.30之后就不维护了，升级后的新平台只对商务合作使用，但是只要不关掉服务，还是可以获取的，从他的官方API要获取店铺信息也有两种方式</p>
<ol>
<li>先通过接口获取团购信息，就可以得到团购中的店铺id，然后再获取店铺详情。这种方式问题就在于那些没有团购的店铺的信息就没法获取了，但是从我的获取结果看，大概可以获得50%左右，而且团购信息是在不断更新的，所以可以获得的店铺数量也是变化的，累积然后去掉重复的，这样可以提过获取数量。通过这个方式在上海获得了5w多个点，并且是自带经纬度信息的，不用geocoder，从大众点评网上看，他在上海仅美食类就有14w+个点</li>
<li>通过搜索接口，直接按地域、分类搜素，得到整个城市的店铺信息。这种方式的问题就是，平台对商户类的接口是有次数限制和频次限制，一天是1w次，频次不能太快。实验的每100次请求，停25s，这个频率没问题，最终获得了9w+数据。</li>
<li>把上面两种方法获得的数据合在一起，去掉重复的，剩下13w+。<br>以上两种方式是用java写的，<a href="https://github.com/ldllidonglin/workspace/tree/master/CrawlDianPing/java" target="_blank" rel="noopener">代码在github上</a></li>
</ol>
<h2 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h2><h3 id="直接暴力遍历页面"><a href="#直接暴力遍历页面" class="headerlink" title="直接暴力遍历页面"></a>直接暴力遍历页面</h3><p>因为我发现店铺详情页是有规律的，都是<a href="http://www.dianping.com/shop/547234" target="_blank" rel="noopener">www.dianping.com/shop/547234</a> 这样的页面，所以我就想直接暴力遍历页面，实验下来果然不行，会很快被拒绝访问。而且这样的话还有一个很大的问题就是，因为没办法提前知道这个店铺类型，所以页面种类有很多，所以光是获取数据的代码就得根据页面特征，写很多个，分别对应不同的页面。而且这样没法聚焦获得某个城市的数据。只能后期去提取。总之这种方式基本不可行。</p>
<h3 id="从主页进去，正常爬取。"><a href="#从主页进去，正常爬取。" class="headerlink" title="从主页进去，正常爬取。"></a>从主页进去，正常爬取。</h3><p>这样就可以入口url就限定城市和分类，而且页面的规律很好找的，比如上海美食的链接就是：<a href="http://www.dianping.com/search/category/1/10。但是大众点评这种站对反爬措施肯定做的很好，我没有找到免费的代理ip，只能模拟下User-Agent，最终从店铺详情信息进去获取的，然后很快就会返回10056。要是直接在搜索的列表页就去获取数据，会更快就返回10056" target="_blank" rel="noopener">www.dianping.com/search/category/1/10。但是大众点评这种站对反爬措施肯定做的很好，我没有找到免费的代理ip，只能模拟下User-Agent，最终从店铺详情信息进去获取的，然后很快就会返回10056。要是直接在搜索的列表页就去获取数据，会更快就返回10056</a> 拒绝访问。我猜他们反爬中对搜索页的访问频次限制的更加严格，而且正常浏览是不会只访问列表而不进去店铺详情页的。这个毕竟反反爬我也不在行，没办法。这个方法基本也是不可取。</p>
<p>技术都是用的很粗糙的技术，直接用python的requests+BeautifulSoup4，没有用开源爬虫。<a href="https://github.com/ldllidonglin/workspace/tree/master/CrawlDianPing/python" target="_blank" rel="noopener">代码在github上</a></p>
<p><a href="http://zhuanlan.zhihu.com/xlz-d" target="_blank" rel="noopener">知乎xlzd杂谈-爬虫</a></p>
]]></content>
      
        <categories>
            
            <category> 数据抓取 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据抓取 </tag>
            
            <tag> java </tag>
            
            <tag> 大众点评 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTTP权威指南读书笔记]]></title>
      <url>http://ldllidonglin.github.io/blog/2016/01/21/2016-01-21-HTTP%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="第一部分-HTTP-Web的基础"><a href="#第一部分-HTTP-Web的基础" class="headerlink" title="第一部分 HTTP:Web的基础"></a>第一部分 HTTP:Web的基础</h1><h2 id="第一章-HTTP概述"><a href="#第一章-HTTP概述" class="headerlink" title="第一章 HTTP概述"></a>第一章 HTTP概述</h2><a id="more"></a>
<ol>
<li>HTTP是应用层协议，建立在TCP/IP之上，Web服务器会为所有HTTP对象数据附加一个MIME 类型，MIME 类型是一种文本标记，表示一种主要的对象类型和一个特定的子类型，中间由一条斜杠来分隔，比如text/html;image/jpeg。</li>
<li><p>HTTP报文是由一行一行的简单字符串组成的，都是纯文本，主要包括三个部分，</p>
<ul>
<li>起始行，报文的第一行就是起始行，在请求报文中用来说明要做些什么，在响应报文中说明出现了什么情况。</li>
<li>首部字段，起始行后面有零个或多个首部字段。每个首部字段都包含一个名字和一个值， 为了便于解析， 两者之间用冒号（:）来分隔。首部以一个空行结束。添加一个首部字段和添加新行一样简单</li>
<li><p>主体，其中包含了所有类型的数据，请求报文是要发送给web服务器的内容，响应报文是要发送给客户端的内容</p>
<p>请求报文范例</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">GET</span> <span class="string">/mumue/archive/2012/04/23/2467072.html</span> <span class="string">HTTP/1.1</span></span><br><span class="line"><span class="attr">Host:</span> <span class="string">www.cnblogs.com</span></span><br><span class="line"><span class="attr">Connection:</span> <span class="string">keep-alive</span></span><br><span class="line"><span class="attr">Cache-Control:</span> <span class="string">max-age=0</span></span><br><span class="line"><span class="attr">Accept:</span> <span class="string">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span></span><br><span class="line"><span class="attr">Upgrade-Insecure-Requests:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">User-Agent:</span> <span class="string">Mozilla/5.0</span> <span class="string">(Windows</span> <span class="string">NT</span> <span class="number">6.1</span><span class="string">;</span> <span class="string">WOW64)</span> <span class="string">AppleWebKit/537.36</span> <span class="string">(KHTML,</span> <span class="string">like</span> <span class="string">Gecko)</span> <span class="string">Chrome/45.0.2454.85</span> <span class="string">Safari/537.36</span></span><br><span class="line"><span class="attr">Referer:</span> <span class="string">https://www.google.com.hk/</span></span><br><span class="line"><span class="attr">Accept-Encoding:</span> <span class="string">gzip,</span> <span class="string">deflate,</span> <span class="string">sdch</span></span><br><span class="line"><span class="attr">Accept-Language:</span> <span class="string">zh-CN,zh;q=0.8,en;q=0.6</span></span><br><span class="line"><span class="attr">Cookie:</span> <span class="string">CNZZDATA1255778100=388437504-1442227353-null%7C1442227353;</span> <span class="string">_ga=GA1.2.1845097067.1442111906;</span> <span class="string">_gat=1</span></span><br><span class="line"><span class="attr">If-Modified-Since:</span> <span class="string">Tue,</span> <span class="number">15</span> <span class="string">Sep</span> <span class="number">2015</span> <span class="number">07</span><span class="string">:16:13</span> <span class="string">GMT</span></span><br></pre></td></tr></table></figure>
<p>响应报文范例</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">HTTP/1.1</span> <span class="number">200</span> <span class="string">OK</span></span><br><span class="line"><span class="attr">Date:</span> <span class="string">Tue,</span> <span class="number">15</span> <span class="string">Sep</span> <span class="number">2015</span> <span class="number">07</span><span class="string">:19:07</span> <span class="string">GMT</span></span><br><span class="line"><span class="attr">Content-Type:</span> <span class="string">text/html;</span> <span class="string">charset=utf-8</span></span><br><span class="line"><span class="attr">Connection:</span> <span class="string">keep-alive</span></span><br><span class="line"><span class="attr">Vary:</span> <span class="string">Accept-Encoding</span></span><br><span class="line"><span class="attr">Cache-Control:</span> <span class="string">private,</span> <span class="string">max-age=10</span></span><br><span class="line"><span class="attr">Expires:</span> <span class="string">Tue,</span> <span class="number">15</span> <span class="string">Sep</span> <span class="number">2015</span> <span class="number">07</span><span class="string">:19:09</span> <span class="string">GMT</span></span><br><span class="line"><span class="attr">Last-Modified:</span> <span class="string">Tue,</span> <span class="number">15</span> <span class="string">Sep</span> <span class="number">2015</span> <span class="number">07</span><span class="string">:18:59</span> <span class="string">GMT</span></span><br><span class="line"><span class="attr">X-UA-Compatible:</span> <span class="string">IE=10</span></span><br><span class="line"><span class="attr">Content-Length:</span> <span class="number">34031</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>目前使用的HTTP协议版本是1.1</p>
</li>
</ol>
<h2 id="第二章-URL与资源"><a href="#第二章-URL与资源" class="headerlink" title="第二章 URL与资源"></a>第二章 URL与资源</h2><ol>
<li>URL的语法基本是这样：<scheme>://<user>:<password>@<host>:<port>/<path>;<params>?<query>#<frag>。但没有哪个URL是包含所有组建的。</frag></query></params></path></port></host></password></user></scheme></li>
<li>由于URL中只能使用英文字母和阿拉伯数字和某些符号，中文等符号是不能使用的，所以就会遇到编码的问题，一般是%+某种方式编码后的结果，比如空格的ASCII码值是20 编码后就是%20。具体的编码方式和浏览器及操作系统本地环境有关。参考文章：<a href="http://www.ruanyifeng.com/blog/2010/02/url_encoding.html" target="_blank" rel="noopener">阮一峰–关于URL编码</a></li>
</ol>
<h2 id="第三章-HTTP报文"><a href="#第三章-HTTP报文" class="headerlink" title="第三章 HTTP报文"></a>第三章 HTTP报文</h2><ol>
<li>报文的起始行和首部是由行分割的ASCII文本，每行都以一个由两个字符（回车符和换行符）组成的行终止序列作为结束。主体是一个可选的数据块，可以包含文本或二进制数据，也可以是空。</li>
<li>状态码（<a href="http://www.daqianduan.com/4280.html" target="_blank" rel="noopener">参考文章</a>）<ul>
<li>100~199 信息性状态码</li>
<li>200~299 成功状态码</li>
<li>300~399 重定向状态码 301永久重定向 304 Not MOdified</li>
<li>400~499 客户端错误状态码</li>
<li>500~599 服务器错误状体码</li>
</ul>
</li>
<li>303 307是在HTTP1.1才有的，主要是为了细分302，区分POST请求时如何重定向。在HTTP1.1中，302其实是可以删除的，但是为了兼容HTTP1.0，而且很多服务器对重定向序列的返回码使用并不严格，302还是在大量使用。<ul>
<li>303是返回GET请求的重定向，即重定向的url是GET方式，可以意淫为之前的POST过来的数据已经处理，只需重新请求这个重定向后的GET请求即可。</li>
<li>307 则是由客户端来决定是发送GET还是POST请求。</li>
<li><a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" target="_blank" rel="noopener">RFC文档-Status Code Definitions</a></li>
<li><a href="http://www.cnblogs.com/cswuyg/p/3871976.html" target="_blank" rel="noopener">HTTP状态码302、303和307的故事</a></li>
</ul>
</li>
</ol>
<h2 id="第四章-连接管理"><a href="#第四章-连接管理" class="headerlink" title="第四章 连接管理"></a>第四章 连接管理</h2><ol>
<li>TCP的数据是通过名为IP分组（ 或IP数据报）的小数据块来发送的。</li>
<li>Connection字段可以有三种意义：<ul>
<li>其他字段名(表明这些字段将不会被转发)</li>
<li>关键字(HTTP1.1中只定义了Keep-Alive，用于持久连接，HTTP1.1是默认使用这个参数的，除非主动设为close。如果有这个参数，一般会有Keep-Alive: max=5, timeout=120)</li>
<li>Close(传输完成即关闭连接)</li>
</ul>
</li>
<li>只有当连接上所有的报文都有正确的、 自定义报文长度时——也就是说， 实体主体部分<br>的长度都和相应的 Content-Length 一致， 或者是用分块传输编码方式编码的——连接<br>才能持久保持。</li>
</ol>
<h1 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h1><h2 id="第五章-Web服务器"><a href="#第五章-Web服务器" class="headerlink" title="第五章 Web服务器"></a>第五章 Web服务器</h2><p>解析请求报文时，首先解析请求行，获取请求方法、指定的资源标识符以及版本号，然后读取报文首部，如果有主体的话，读取请求主体</p>
<h2 id="第六章-代理"><a href="#第六章-代理" class="headerlink" title="第六章 代理"></a>第六章 代理</h2><ol>
<li>代理的主要作用：<ul>
<li>内容访问控制</li>
<li>集中统一式的安全防火墙</li>
<li>Web缓存</li>
<li>反向代理</li>
<li>转码器</li>
<li>匿名代理</li>
</ul>
</li>
<li>使客户端流量流向代理主要有4种方式<ul>
<li>修改客户端，比如浏览器设置代理，那HTTP请求就直接发送给代理了</li>
<li>修改网络基础设施，直接在路由器或者某些设施上拦截，转向代理</li>
<li>修改DNS，使代理服务器伪装成真实的web服务器名字和ip</li>
<li>修改web服务器，返回重定向到代理服务器上。</li>
</ul>
</li>
</ol>
<h2 id="第七章-缓存"><a href="#第七章-缓存" class="headerlink" title="第七章 缓存"></a>第七章 缓存</h2><ol>
<li>缓存可以节省宽带，加快客户端的反应速度。</li>
<li>HTTP头中可以用来控制缓存的字段主要有<ul>
<li>Expires:Fri, 22 Jan 2016 04:43:59 GMT。绝对时间点，在这个时间点之前都是直接拉取缓存，无需再次请求。但是因为全球各地的时间可能不一样，所以不建议使用这个，而且优先级低于Cache-Control。如果两者同时出现会被覆盖</li>
<li>Cache-Control:max-age=86400。相对时间，即缓存有效期为24小时，24小时内都是直接拉取缓存，无需再次请求。</li>
<li>Last-Modified/If-Modified-Since。请求时带上If-Modified-Since:Wed, 28 Nov 2012 06:02:44 GMT。web服务器收到请求后发现有头If-Modified-Since 则与被请求资源的最后修改时间进行比对。若最后修改时间较新，说明资源又被改动过，则响应整片资源内容。如果没有修改则返回304。响应返回会带上Last-Modified:Wed, 28 Nov 2012 06:02:44 GMT告诉浏览器资源的最后修改时间</li>
<li>Etag/If-None-Match。web服务器响应请求时，告诉浏览器当前资源在服务器的唯一标识（生成规则由服务器自定义）。Apache中，ETag的值，默认是对文件的索引节（INode），大小（Size）和最后修改时间（MTime）进行Hash后得到的。当资源过期时（使用Cache-Control标识的max-age），发现资源具有Etag：05a7bfb2dcdcd1:0声明，客户端会再次向web服务器请求时带上头If-None-Match：05a7bfb2dcdcd1:0（Etag的值）。web服务器收到请求后发现请求头带有If-None-Match 则与被请求资源的相应校验串进行比对，决定返回200或304。</li>
</ul>
</li>
<li>Etag主要是来解决Last-Modified没法解决的问题：时间精确到1秒以内、某些定期生成的文件，内容并没有变化、代理服务器的时间不一致或无法获取准确的文档修改时间。</li>
</ol>
<h2 id="第八章-集成点：网关、隧道及中继"><a href="#第八章-集成点：网关、隧道及中继" class="headerlink" title="第八章 集成点：网关、隧道及中继"></a>第八章 集成点：网关、隧道及中继</h2><ol>
<li>网关可以作为某种翻译器使用，它抽象出了一种能够到达资源的方法。网关是资源和应用程序之间的粘合剂。应用程序可以（通过 HTTP或其他已定义的接口）请求网关来处理某条请求，网关可以提供一条响应。网关可以向数据库发送查询语句，或者生成动态的内容，就像一个门一样： 进去一条请求， 出来一个响应。</li>
<li>隧道就是通过HTTP应用程序访问使用非HTTP协议的应用程序。Web隧道最常见的原因就是要在HTTP连接中嵌入非HTTP流量，这样，这类流量就可以穿过只允许Web流量通过的防火墙了</li>
<li>HTTP中继（relay）是没有完全遵循HTTP规范的简单HTTP代理。中继负责处理HTTP中<br>建立连接的部分，然后对字节进行盲转发。</li>
</ol>
<h2 id="第九章-Web机器人"><a href="#第九章-Web机器人" class="headerlink" title="第九章 Web机器人"></a>第九章 Web机器人</h2><ol>
<li>robots.txt文件用于控制爬虫获取页面的权限。格式为 <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">User-<span class="string">Agent:</span> slurp</span><br><span class="line">User-<span class="string">Agent:</span> webcrawler</span><br><span class="line"><span class="string">Disallow:</span> /<span class="keyword">private</span></span><br><span class="line">User-<span class="string">Agent:</span> *</span><br><span class="line"><span class="string">Disallow:</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="第十章-HTTP-NG"><a href="#第十章-HTTP-NG" class="headerlink" title="第十章 HTTP-NG"></a>第十章 HTTP-NG</h2><p>这一章的内容已经没有多大参考价值了，HTTP2.0已经出来了，以谷歌的SPDY技术为主，主要就是异步连接复用，头压缩和请求响应管线化，复用TCP连接。实现缩短网页的加载时间和提高安全性。<br><a href="https://blog.youyoulemon.com/http2-0xie-yi-xiang-jie/" target="_blank" rel="noopener">HTTP2.0详解</a><br><a href="https://zh.wikipedia.org/wiki/SPDY" target="_blank" rel="noopener">SPDY 维基百科</a></p>
<h1 id="第三部分-识别、认证与安全"><a href="#第三部分-识别、认证与安全" class="headerlink" title="第三部分 识别、认证与安全"></a>第三部分 识别、认证与安全</h1><h2 id="第十一章-客户端识别与Cookie机制"><a href="#第十一章-客户端识别与Cookie机制" class="headerlink" title="第十一章 客户端识别与Cookie机制"></a>第十一章 客户端识别与Cookie机制</h2><p>识别客户端主要方法有富url，cookie，ip，HTTP请求头，用户登录。cookie是用的最广泛的方法。</p>
<h2 id="第十二章-基本认证机制"><a href="#第十二章-基本认证机制" class="headerlink" title="第十二章 基本认证机制"></a>第十二章 基本认证机制</h2><ol>
<li>基本认证就是用户提供用户名和密码，服务器进行验证，目前广泛采用的认证方案。</li>
<li>缺陷就在于密码是明文发送，容易被截获。需要配合ssl等加密通道结合使用。</li>
</ol>
<h2 id="第十三章-摘要认证"><a href="#第十三章-摘要认证" class="headerlink" title="第十三章 摘要认证"></a>第十三章 摘要认证</h2><ol>
<li>客户端发送密码的摘要而不是发送明文密码。</li>
<li>必须加上随机数，不然被截获好了摘要也就和截获了密码是一样的，加入随机数，保证每次摘要都是不一样的。</li>
</ol>
<h2 id="第十四章-安全HTTP"><a href="#第十四章-安全HTTP" class="headerlink" title="第十四章 安全HTTP"></a>第十四章 安全HTTP</h2><ol>
<li>对称密钥加密技术就是，发送端和接收端要共享相同的密钥k才能进行通信。发送端用共享的密钥来加密报文，并将得到的密文发送给接收端。接收端收到密文，并对其应用解密函数和相同的共享密钥，恢复出原始的明文。</li>
<li>公开密钥加密技术是编码密钥是众所周知的，但只有主机才知道私有的解密密钥，这<br>样，每个人都能找到某个特定主机的公开密钥，密钥的建立变得更加简单。但解码密钥是保密的，因此只有接收端才能对发送给它的报文进行解码。</li>
<li>HTTPS在建立HTTP连接之前会先进行SSL连接，使客户端和服务端建立加密通道，然后忘了报文就全在这个加密通道上进行传输，服务端进行解密后再发送给传输层。</li>
</ol>
<h1 id="第四部分-实体、编码和国际化"><a href="#第四部分-实体、编码和国际化" class="headerlink" title="第四部分 实体、编码和国际化"></a>第四部分 实体、编码和国际化</h1><h2 id="第十五章-实体和编码"><a href="#第十五章-实体和编码" class="headerlink" title="第十五章 实体和编码"></a>第十五章 实体和编码</h2><ol>
<li>Content-Length 首部指示出报文实体主体的字节大小，如果进行了压缩的话，那这个长度指的是压缩后的大小。</li>
<li>Content-Encoding主要有gzip、compress、deflate三种无损压缩算法。gzip效率最高、使用最广泛。</li>
</ol>
<h2 id="第十六章-国际化"><a href="#第十六章-国际化" class="headerlink" title="第十六章 国际化"></a>第十六章 国际化</h2><ol>
<li>服务端通过Content-Type中的charse参数和Content-Language通知客户端文档的字符集和语言。客户端通过Accept-Charset和Accept-Language告知服务端用户可以理解何种语言。</li>
</ol>
<h2 id="第十七章-内容协商与转码"><a href="#第十七章-内容协商与转码" class="headerlink" title="第十七章 内容协商与转码"></a>第十七章 内容协商与转码</h2><ol>
<li>一个URL代表若干个不同的资源的时候，就需要协商具体提供哪个资源。主要有客户端驱动协商、服务器驱动的协商、透明(中间代理)协商。</li>
<li>客户端驱动协商就是服务端返回可选列表，有客户端选择使用哪个。服务端协商就是根据客户端发送过来的信息比如首部或者UA来判定返回哪一个资源。</li>
</ol>
<h1 id="第五部分-内容发布与分发"><a href="#第五部分-内容发布与分发" class="headerlink" title="第五部分 内容发布与分发"></a>第五部分 内容发布与分发</h1><h2 id="第十八章-Web主机托管"><a href="#第十八章-Web主机托管" class="headerlink" title="第十八章 Web主机托管"></a>第十八章 Web主机托管</h2><p>使用托管，可以免去很多烦恼，同时让自己的网站更加可靠，被访问速度更快。</p>
<h2 id="第十九章-发布系统"><a href="#第十九章-发布系统" class="headerlink" title="第十九章 发布系统"></a>第十九章 发布系统</h2><p>这个部分的内容已经有点过时了，但是用visual studio还是可以安装webDAV实现远程发布。现在常用的都是用git或者svn来实现远程代码提交以及发布了。</p>
<h2 id="第二十章-重定向与负载均衡"><a href="#第二十章-重定向与负载均衡" class="headerlink" title="第二十章 重定向与负载均衡"></a>第二十章 重定向与负载均衡</h2><ol>
<li>为了可靠的执行HTTP事务、最小化时延、节约网络带宽，经常需要使用重定向。</li>
</ol>
<h2 id="第二十一章-日记记录与使用情况跟踪"><a href="#第二十一章-日记记录与使用情况跟踪" class="headerlink" title="第二十一章 日记记录与使用情况跟踪"></a>第二十一章 日记记录与使用情况跟踪</h2><p>日志一般都会记录时间、请求端的ip、用户名、请求路径、响应状态码、主体长度</p>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> HTTP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[字符编码笔记]]></title>
      <url>http://ldllidonglin.github.io/blog/2016/01/18/2016-01-18-%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="ASCII码"><a href="#ASCII码" class="headerlink" title="ASCII码"></a>ASCII码</h1><p>ASCII（American Standard Code for Information Interchange，美国信息互换标准代码）码一共规定了128个字符的编码，比如空格”SPACE”是32（二进制00100000），大写的字母A是65（二进制01000001）。这128个符号（包括32个不能打印出来的控制符号），只占用了一个字节的后面7位，最前面的1位统一规定为0。<br><a id="more"></a><br><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">ASCII值 控制字符 ASCII值  控制字符 ASCII值 控制字符 ASCII值 控制字符</span><br><span class="line">0   NUT<span class="number"> 32 </span> (space)<span class="number"> 64 </span> @  <span class="number"> 96 </span> 、</span><br><span class="line">1   SOH<span class="number"> 33 </span> !  <span class="number"> 65 </span> A  <span class="number"> 97 </span> a</span><br><span class="line">2   STX<span class="number"> 34 </span> "  <span class="number"> 66 </span> B  <span class="number"> 98 </span> b</span><br><span class="line">3   ETX<span class="number"> 35 </span> <span class="comment">#   67  C   99  c</span></span><br><span class="line">4   EOT<span class="number"> 36 </span> $  <span class="number"> 68 </span> D  <span class="number"> 100 </span>d</span><br><span class="line">5   ENQ<span class="number"> 37 </span> %  <span class="number"> 69 </span> E  <span class="number"> 101 </span>e</span><br><span class="line">6   ACK<span class="number"> 38 </span> &amp;  <span class="number"> 70 </span> F  <span class="number"> 102 </span>f</span><br><span class="line">7   BEL<span class="number"> 39 </span> ,  <span class="number"> 71 </span> G  <span class="number"> 103 </span>g</span><br><span class="line">8   BS <span class="number"> 40 </span> (  <span class="number"> 72 </span> H  <span class="number"> 104 </span>h</span><br><span class="line">9   HT <span class="number"> 41 </span> )  <span class="number"> 73 </span> I  <span class="number"> 105 </span>i</span><br><span class="line">10  LF <span class="number"> 42 </span> *  <span class="number"> 74 </span> J  <span class="number"> 106 </span>j</span><br><span class="line">11  VT <span class="number"> 43 </span> +  <span class="number"> 75 </span> K  <span class="number"> 107 </span>k</span><br><span class="line">12  FF <span class="number"> 44 </span> ,  <span class="number"> 76 </span> L  <span class="number"> 108 </span>l</span><br><span class="line">13  CR <span class="number"> 45 </span> -  <span class="number"> 77 </span> M  <span class="number"> 109 </span>m</span><br><span class="line">14  SO <span class="number"> 46 </span> .  <span class="number"> 78 </span> N  <span class="number"> 110 </span>n</span><br><span class="line">15  SI <span class="number"> 47 </span> /  <span class="number"> 79 </span> O  <span class="number"> 111 </span>o</span><br><span class="line">16  DLE<span class="number"> 48 </span><span class="number"> 0 </span> <span class="number"> 80 </span> P  <span class="number"> 112 </span>p</span><br><span class="line">17  DCI<span class="number"> 49 </span><span class="number"> 1 </span> <span class="number"> 81 </span> Q  <span class="number"> 113 </span>q</span><br><span class="line">18  DC2<span class="number"> 50 </span><span class="number"> 2 </span> <span class="number"> 82 </span> R  <span class="number"> 114 </span>r</span><br><span class="line">19  DC3<span class="number"> 51 </span><span class="number"> 3 </span> <span class="number"> 83 </span> S  <span class="number"> 115 </span>s</span><br><span class="line">20  DC4<span class="number"> 52 </span><span class="number"> 4 </span> <span class="number"> 84 </span> T  <span class="number"> 116 </span>t</span><br><span class="line">21  NAK<span class="number"> 53 </span><span class="number"> 5 </span> <span class="number"> 85 </span> U  <span class="number"> 117 </span>u</span><br><span class="line">22  SYN<span class="number"> 54 </span><span class="number"> 6 </span> <span class="number"> 86 </span> V  <span class="number"> 118 </span>v</span><br><span class="line">23  TB <span class="number"> 55 </span><span class="number"> 7 </span> <span class="number"> 87 </span> W  <span class="number"> 119 </span>w</span><br><span class="line">24  CAN<span class="number"> 56 </span><span class="number"> 8 </span> <span class="number"> 88 </span> X  <span class="number"> 120 </span>x</span><br><span class="line">25  EM <span class="number"> 57 </span><span class="number"> 9 </span> <span class="number"> 89 </span> Y  <span class="number"> 121 </span>y</span><br><span class="line">26  SUB<span class="number"> 58 </span> :  <span class="number"> 90 </span> Z  <span class="number"> 122 </span>z</span><br><span class="line">27  ESC<span class="number"> 59 </span> ;  <span class="number"> 91 </span> [  <span class="number"> 123 </span>&#123;</span><br><span class="line">28  FS <span class="number"> 60 </span> &lt;  <span class="number"> 92 </span> /  <span class="number"> 124 </span>|</span><br><span class="line">29  GS <span class="number"> 61 </span> =  <span class="number"> 93 </span> ]  <span class="number"> 125 </span>&#125;</span><br><span class="line">30  RS <span class="number"> 62 </span> &gt;  <span class="number"> 94 </span> ^  <span class="number"> 126 </span>`</span><br><span class="line">31  US <span class="number"> 63 </span> ?  <span class="number"> 95 </span> _  <span class="number"> 127 </span>DEL</span><br></pre></td></tr></table></figure></p>
<p><a href="http://tool.oschina.net/commons?type=4" target="_blank" rel="noopener">在线对照表</a></p>
<h1 id="Unicode字符集"><a href="#Unicode字符集" class="headerlink" title="Unicode字符集"></a>Unicode字符集</h1><p>Unicode就是来解决同一个二进制数字会在不同的编码方式时，被解释成不一样的符号的问题，Unicode是一个很大的集合，可以容纳100w+个字符，而且是独一无二的。但是它只规定了符号的二进制代码，并没有规定二进制代码如何存储、传输，所以导致出现了多种Unicode的存储方式。在unicode字符集里，一个中文字符占两个字节，</p>
<h2 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h2><p>一种变长的编码方式，可以用1-4个字节来表示一个字符，无存储顺序的问题，所以一律不要带BOM</p>
<ol>
<li>对于单字节符号，第一位是0，后7位是这个符号的unicode码，所以英语字母的UTF-8编码和ASCII是一样的</li>
<li>对于2个及以上字节的符号，第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的unicode码。</li>
<li>一个中文字符占3个字节</li>
</ol>
<p>比如 ‘汉’子的unicode编码是\u00006C49 转换成二进制就是01101100 01001001 所以UTF-8编码就应该是 11100110 10110001 10001001 再换成成16进制就是UTF-8编码就是 E6B189</p>
<h2 id="UTF-16"><a href="#UTF-16" class="headerlink" title="UTF-16"></a>UTF-16</h2><p>UTF-16 以16位无符号整为单位，以两个字节来表示一个字符</p>
<h2 id="UTF-32"><a href="#UTF-32" class="headerlink" title="UTF-32"></a>UTF-32</h2><p>使用4字节的数字来表达每个字母、符号，或者表意文字，很少使用，定义的范围太大，大部分字符使用不到，数据冗余性太大</p>
<h1 id="GB2312"><a href="#GB2312" class="headerlink" title="GB2312"></a>GB2312</h1><p>又称国标码，是一个简化字的编码规范，用两个字节表示一个符号，但是每个字节采用七位编码，共有7445个图形字符，汉字6768个</p>
<h1 id="Big5"><a href="#Big5" class="headerlink" title="Big5"></a>Big5</h1><p>是一个繁体字编码，所以主要是港澳台在使用，也是双字节编码</p>
<h1 id="GBK"><a href="#GBK" class="headerlink" title="GBK"></a>GBK</h1><p>是GB2312的扩展，其中k即kuo的简写，共收录了21886个图形符号，GB2312中的汉字的编码与GBK中汉字的相同，GBK包含繁体字但是和Big5编码不一样。</p>
<h1 id="ANSI"><a href="#ANSI" class="headerlink" title="ANSI"></a>ANSI</h1><p>(American National Standard Institite)美国国家标准协会。每个国家自己制定自己的文字编码规则，并得到ANSI的认可。这个是windows自带的笔记本另存的时候常见的，其实就是根据当前本地环境选定具体的编码，比如简体中文的windows就是GBK。同时在windows下，会在UTF-8文件中使用BOM，而且把带有BOM的UTF-16/LE 称作Unicode编码</p>
<h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><p>Byte Order Mark的简称，是为 UTF-16 和 UTF-32 准备的，用于标记字节序（byte order）</p>
<h1 id="参考博文"><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h1><p><a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank" rel="noopener">字符编码笔记：ASCII，Unicode和UTF-8 by 阮一峰</a><br><a href="https://www.zhihu.com/question/20167122" target="_blank" rel="noopener">带 BOM 的 UTF-8」和「无 BOM 的 UTF-8」有什么区别？网页代码一般使用哪个</a><br><a href="http://www.cnblogs.com/skynet/archive/2011/05/03/2035105.html" target="_blank" rel="noopener">字符集和字符编码</a><br><a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386819196283586a37629844456ca7e5a7faa9b94ee8000" target="_blank" rel="noopener">python 字符串和编码</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 字符编码 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[gulp前端自动化]]></title>
      <url>http://ldllidonglin.github.io/blog/2016/01/07/2016-01-07-gulp%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96/</url>
      <content type="html"><![CDATA[<h1 id="首先是目标，就是想要的效果"><a href="#首先是目标，就是想要的效果" class="headerlink" title="首先是目标，就是想要的效果."></a>首先是目标，就是想要的效果.</h1><ol>
<li>es6模块化并打包 <a href="2015/12/22/2015-12-22-gulp+babelify+browserify实现在es6下工作流/">gulp-babelify-browerify</a></li>
<li>html中的js、css文件做优化处理加md5戳，并且自动替换</li>
<li>自动刷新</li>
</ol>
<a id="more"></a>
<h1 id="es6模块化并打包"><a href="#es6模块化并打包" class="headerlink" title="es6模块化并打包"></a>es6模块化并打包</h1><p>因为es6的模块化只实现了export和import，并没有实现原生的模块化加载，所以最终还是需要使用AMD或者CMD的加载器来实现加载，这次我索性不在前端实现模块化加载，直接打包成一个文件。具体实现看之前写的文章<a href="2015/12/22/2015-12-22-gulp+babelify+browserify实现在es6下工作流/">gulp-babelify-browerify</a></p>
<h1 id="html中的js、css文件做优化处理加md5戳，并且自动替换"><a href="#html中的js、css文件做优化处理加md5戳，并且自动替换" class="headerlink" title="html中的js、css文件做优化处理加md5戳，并且自动替换"></a>html中的js、css文件做优化处理加md5戳，并且自动替换</h1><p>这个地方想了很久，也试了很多方式。其实就是两种方法，一是从html中识别出静态文件，然后处理、替换。二是直接从原始目录中抽取出静态文件，然后自动插入html中，最后我想了下还是第一种好，因为我需要在src的html中自由的配置自己开发的、第三方库等文件。所以决定采用第一种方案。用到的插件有:</p>
<h2 id="第一部分是从html中抽取静态资源并处理的"><a href="#第一部分是从html中抽取静态资源并处理的" class="headerlink" title="第一部分是从html中抽取静态资源并处理的"></a>第一部分是从html中抽取静态资源并处理的</h2><ol>
<li><a href="https://github.com/jonkemp/gulp-useref" target="_blank" rel="noopener">gulp-useref</a>是一个替换、合并、移除html中之前做好标记的的静态资源。</li>
<li><a href="https://github.com/robrich/gulp-if" target="_blank" rel="noopener">gulp-if</a> 对vinyl object中的内容识别js css分别处理</li>
<li><a href="https://github.com/sindresorhus/gulp-rev" target="_blank" rel="noopener">gulp-rev</a>给文件末尾添加hash值的，防止缓存。</li>
<li><a href="https://github.com/postcss/gulp-postcss" target="_blank" rel="noopener">gulp-postcss</a>css处理器，这个插件本身不带功能，它需要插件配合使用，。</li>
<li><a href="https://github.com/postcss/postcss-import" target="_blank" rel="noopener">postcss-import</a> postcss插件，使用import功能来管理各个css文件</li>
<li><a href="https://github.com/postcss/autoprefixer" target="_blank" rel="noopener">autoprefixer</a> postcss插件，自动添加兼容前缀比如webkit</li>
<li><a href="https://github.com/ben-eb/cssnano" target="_blank" rel="noopener">cssnano</a> css压缩</li>
<li><a href="https://github.com/floridoo/gulp-sourcemaps" target="_blank" rel="noopener">gulp-sourcemaps</a> sourcemap，生成.map文件，用来对压缩后的文件进行线上调试的</li>
<li><a href="https://github.com/sindresorhus/del" target="_blank" rel="noopener">del</a> 删除之前发布的文件用的</li>
</ol>
<p>gulpfile中的代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'rev'</span>,[<span class="string">'clean'</span>,<span class="string">'dis'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> revAll = <span class="keyword">new</span> RevAll(&#123;   </span><br><span class="line">      </span><br><span class="line">            <span class="comment">//不重命名文件  </span></span><br><span class="line">            dontRenameFile: [<span class="string">'.html'</span>] ,  </span><br><span class="line">      </span><br><span class="line">            <span class="comment">//无需关联处理文件</span></span><br><span class="line">            dontGlobal: [ <span class="regexp">/^\/favicon.ico$/</span> ,<span class="string">'.bat'</span>,<span class="string">'.txt'</span>]</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="keyword">var</span> processors=[atImport,autoprefixer,minifycss()];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> gulp.src([<span class="string">'src/index.html'</span>])</span><br><span class="line">                .pipe(useref())</span><br><span class="line">                .pipe(gulpif(<span class="string">'*.css'</span>, postcss(processors)))</span><br><span class="line">                .pipe(gulpif(<span class="string">'*.js'</span>,sourcemaps.init(&#123; <span class="attr">loadMaps</span>: <span class="literal">true</span> &#125;)))</span><br><span class="line">                .pipe(sourcemaps.write(<span class="string">'.'</span>))</span><br><span class="line">                .pipe(revAll.revision())</span><br><span class="line">                .pipe(gulp.dest(<span class="string">'./dist'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="第二部分是涉及到js开发的，因为要模块化开发，同时要打包，所以插件主要有"><a href="#第二部分是涉及到js开发的，因为要模块化开发，同时要打包，所以插件主要有" class="headerlink" title="第二部分是涉及到js开发的，因为要模块化开发，同时要打包，所以插件主要有"></a>第二部分是涉及到js开发的，因为要模块化开发，同时要打包，所以插件主要有</h2><ol>
<li><a href="https://github.com/substack/node-browserify" target="_blank" rel="noopener">browserify</a> 模块化打包</li>
<li><a href="https://github.com/babel/babel" target="_blank" rel="noopener">babel-core</a> 顾名思义，但是没有任何功能，编译es2015需要下面这个插件</li>
<li><a href="https://babeljs.io/docs/plugins/preset-es2015/" target="_blank" rel="noopener">babel-preset-es2015</a> preset包，主要用来预处理es2015的</li>
<li><a href="https://github.com/babel/babelify" target="_blank" rel="noopener">babelify</a> 在browserify打包后，把es2015转换为es5</li>
<li><a href="https://github.com/hughsk/vinyl-source-stream" target="_blank" rel="noopener">vinyl-source-stream</a>将 Node体系中的Stream 转换为gulp所使用的Vinyl File Object Stream</li>
<li><a href="https://github.com/hughsk/vinyl-buffer" target="_blank" rel="noopener">vinyl-buffer</a> 将Stream转成buffer，因为uglify和sourcemap需要buffer</li>
<li><a href="https://github.com/terinjokes/gulp-uglify" target="_blank" rel="noopener">gulp-uglify</a> js压缩</li>
</ol>
<p>gulpfile中的代码<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打包 js</span></span><br><span class="line"><span class="selector-tag">gulp</span><span class="selector-class">.task</span>(<span class="string">"dis"</span>, ()=&gt;&#123;</span><br><span class="line">  <span class="selector-tag">return</span> <span class="selector-tag">browserify</span>(<span class="string">'src/js/index.js'</span>)</span><br><span class="line">         <span class="selector-class">.transform</span>(babelify)</span><br><span class="line">         <span class="selector-class">.bundle</span>()</span><br><span class="line">         <span class="selector-class">.pipe</span>(source(<span class="string">'bundle.js'</span>))</span><br><span class="line">         <span class="selector-class">.pipe</span>(buffer())</span><br><span class="line">         <span class="selector-class">.pipe</span>(sourcemaps.init(&#123; <span class="attribute">loadMaps</span>: true &#125;))</span><br><span class="line">         <span class="selector-class">.pipe</span>(uglify()) <span class="comment">// Use any gulp plugins you want now</span></span><br><span class="line">         <span class="selector-class">.pipe</span>(sourcemaps.write(<span class="string">'./'</span>))</span><br><span class="line">         <span class="selector-class">.pipe</span>(gulp.dest(<span class="string">'./src/js'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步sourcemap</span></span><br><span class="line"><span class="selector-tag">gulp</span><span class="selector-class">.task</span>(<span class="string">'copy'</span>,[<span class="string">'dis'</span>],()=&gt;&#123;</span><br><span class="line">    <span class="selector-tag">gulp</span><span class="selector-class">.src</span>(<span class="string">'src/*.map'</span>)<span class="selector-class">.pipe</span>(gulp.src(<span class="string">'src/*.map'</span>))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="自动刷新"><a href="#自动刷新" class="headerlink" title="自动刷新"></a>自动刷新</h2><p>这部分就主要是用gulp-webserer启动一个本地服务器并且监听文件变化，文件变化了就自动刷新。webserver是监听发布的资源，所以要自己写一个监听src，然后触发发布，导致发布的文件发生变化，进而触发webserver自动更新。<br>用到的插件</p>
<ol>
<li><a href="https://github.com/schickling/gulp-webserver" target="_blank" rel="noopener">gulp-webserver</a><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//监听src文件</span><br><span class="line">var watcher = gulp.watch([<span class="string">'src/**/*.*'</span>,<span class="string">'src/index.html'</span>], [<span class="string">'dis'</span>]);</span><br><span class="line">watcher.on(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span><span class="params">(event)</span></span> &#123;</span><br><span class="line">  console.<span class="built_in">log</span>(<span class="string">'File '</span> + event.<span class="built_in">path</span> + <span class="string">' was '</span> + event.<span class="built_in">type</span> + <span class="string">', running tasks...'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//web server</span><br><span class="line">gulp.task(<span class="string">'webserver'</span>, [<span class="string">'rev'</span>],() =&gt; &#123;</span><br><span class="line">  gulp.src(<span class="string">'./dist/'</span>)</span><br><span class="line">    .pipe(webserver(&#123;</span><br><span class="line">      livereload: <span class="literal">true</span>,</span><br><span class="line">      directoryListing: <span class="literal">false</span>,</span><br><span class="line">      <span class="built_in">path</span>: <span class="string">'/'</span>,</span><br><span class="line">      <span class="built_in">open</span>: <span class="string">'/'</span></span><br><span class="line">    &#125;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="完整的gulpfile"><a href="#完整的gulpfile" class="headerlink" title="完整的gulpfile"></a>完整的gulpfile</h1><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gulp <span class="keyword">from</span> <span class="string">'gulp'</span>;</span><br><span class="line"><span class="keyword">import</span> sourcemaps <span class="keyword">from</span> <span class="string">"gulp-sourcemaps"</span>;</span><br><span class="line"><span class="keyword">import</span> babelify <span class="keyword">from</span> <span class="string">"babelify"</span>;</span><br><span class="line"><span class="keyword">import</span> browserify <span class="keyword">from</span> <span class="string">'browserify'</span>;</span><br><span class="line"><span class="keyword">import</span> source <span class="keyword">from</span> <span class="string">"vinyl-source-stream"</span>;</span><br><span class="line"><span class="keyword">import</span> uglify <span class="keyword">from</span> <span class="string">'gulp-uglify'</span>;</span><br><span class="line"><span class="keyword">import</span> buffer <span class="keyword">from</span> <span class="string">'vinyl-buffer'</span>;</span><br><span class="line"><span class="keyword">import</span> webserver <span class="keyword">from</span> <span class="string">'gulp-webserver'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> postcss <span class="keyword">from</span> <span class="string">'gulp-postcss'</span>;</span><br><span class="line"><span class="keyword">import</span> autoprefixer <span class="keyword">from</span> <span class="string">'autoprefixer'</span>;</span><br><span class="line"><span class="keyword">import</span> minifycss <span class="keyword">from</span> <span class="string">'cssnano'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> RevAll <span class="keyword">from</span> <span class="string">'gulp-rev-all'</span>;      </span><br><span class="line"><span class="keyword">import</span> useref  <span class="keyword">from</span> <span class="string">'gulp-useref'</span>; </span><br><span class="line"><span class="keyword">import</span> atImport <span class="keyword">from</span> <span class="string">"postcss-import"</span>;</span><br><span class="line"><span class="keyword">import</span> gulpif <span class="keyword">from</span> <span class="string">'gulp-if'</span>;</span><br><span class="line"><span class="keyword">import</span> del <span class="keyword">from</span> <span class="string">'del'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> watcher = gulp.watch([<span class="string">'src/**/*.*'</span>,<span class="string">'src/index.html'</span>], [<span class="string">'dis'</span>]);</span><br><span class="line"></span><br><span class="line">watcher.on(<span class="string">'change'</span>, <span class="function">(<span class="params">event</span>)=&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'File '</span> + event.path + <span class="string">' was '</span> + event.type + <span class="string">', running tasks...'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//清理dist目录</span></span><br><span class="line">gulp.task(<span class="string">'clean'</span>,<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> del(<span class="string">'dist/'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打包 js</span></span><br><span class="line">gulp.task(<span class="string">"dis"</span>,[<span class="string">'clean'</span>], <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> browserify(<span class="string">'src/js/index.js'</span>)</span><br><span class="line">         .transform(babelify)</span><br><span class="line">         .bundle()</span><br><span class="line">         .pipe(source(<span class="string">'bundle.js'</span>))</span><br><span class="line">         .pipe(buffer())</span><br><span class="line">         .pipe(sourcemaps.init(&#123; loadMaps: <span class="literal">true</span> &#125;))</span><br><span class="line">         .pipe(uglify()) <span class="comment">// Use any gulp plugins you want now</span></span><br><span class="line">         .pipe(sourcemaps.write(<span class="string">'./'</span>))</span><br><span class="line">         .pipe(gulp.dest(<span class="string">'./src/js'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//web server</span></span><br><span class="line">gulp.task(<span class="string">'webserver'</span>, [<span class="string">'rev'</span>],<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  gulp.src(<span class="string">'./dist/'</span>)</span><br><span class="line">    .pipe(webserver(&#123;</span><br><span class="line">      livereload: <span class="literal">true</span>,</span><br><span class="line">      directoryListing: <span class="literal">false</span>,</span><br><span class="line">      port:<span class="number">8099</span>,</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      open: <span class="string">'/'</span></span><br><span class="line">    &#125;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认任务</span></span><br><span class="line">gulp.task(<span class="string">'rev'</span>,[<span class="string">'dis'</span>], <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> revAll = <span class="keyword">new</span> RevAll(&#123;   </span><br><span class="line">        <span class="comment">//不重命名文件  </span></span><br><span class="line">        dontRenameFile: [<span class="string">'.html'</span>] ,   </span><br><span class="line">        <span class="comment">//无需关联处理文件</span></span><br><span class="line">        dontGlobal: [ <span class="regexp">/^\/favicon.ico$/</span> ,<span class="string">'.bat'</span>,<span class="string">'.txt'</span>]</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> processors=[atImport,autoprefixer,minifycss()];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> gulp.src([<span class="string">'src/index.html'</span>])</span><br><span class="line">            .pipe(useref())</span><br><span class="line">            .pipe(gulpif(<span class="string">'*.css'</span>, postcss(processors)))</span><br><span class="line">            .pipe(gulpif(<span class="string">'*.js'</span>,sourcemaps.init(&#123; loadMaps: <span class="literal">true</span> &#125;)))</span><br><span class="line">            .pipe(sourcemaps.write(<span class="string">'.'</span>))</span><br><span class="line">            .pipe(revAll.revision())</span><br><span class="line">            .pipe(gulp.dest(<span class="string">'./dist'</span>));</span><br><span class="line">     </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>,[<span class="string">'webserver'</span>],<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><em>gulp插件更新很快，而且鱼龙混杂，官方有一个<a href="https://github.com/gulpjs/plugins/blob/master/src/blackList.json" target="_blank" rel="noopener">blacklist</a>可供参考，同时有一个插件可以检测项目中是否使用了不合适的插件，<a href="https://github.com/ernestoalejo/blacklisted-gulp" target="_blank" rel="noopener">blacklist-gulp</a></em></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> gulp </tag>
            
            <tag> 前端自动化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2015年终总结]]></title>
      <url>http://ldllidonglin.github.io/blog/2016/01/02/2016-01-02-2015%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>流水账似的总结2015年吧<br><a id="more"></a></p>
<h2 id="找实习"><a href="#找实习" class="headerlink" title="找实习"></a>找实习</h2><p>&emsp;&emsp; 2015春节刚过就速度回到学校准备找实习，因为早已决定要进入互联网公司，所以就把各大互联网公司都投了个遍，BAT、搜狐、新浪、小米、360等等。最终只有BAT给了笔试机会，其他的好像都比较倾向在京的学生，所以就没下文了，我感觉实习也就是BAT招的火热。笔试过后很忐忑，总觉得自己没戏了，特别是笔试完腾讯，竟然街道一个腾讯HR的电话，这可是人生第一次面试啊，很紧张，感觉答的不好，没戏了，结果在4月份腾讯来武汉招实习的时候还是给了我面试机会。BAT招实习，阿里内推最早，但是统招就排在5月份了。我还投了一个我们业内的公司，数字政通，过去给我一份笔试题，真是没准备好，sql也忘记了，智力题也没答好，排序算法根本就没准备，笔试没过，对我的打击有点大，也帮我认识到要好好准备笔试了。我第一个现场面试是腾讯，一面面试官是一个帅小伙，感觉面的不难，主要是在外面听前一个人问的问题，发现自己不会的，赶紧百度，结果还中了几题，哈哈。第二天通知二面，总监面，就是聊天，感觉聊得很愉快，最后一个数学题，想了很久才想出来，其实很简单。。。三面是一个严肃的hr，面完非常沮丧，其中一个问题记忆很深刻，问我这种非计算机专业的比计算机专业的有什么优势，我说我上进、勤奋，她来一句，要是别人也和你一样勤奋、上进，那你还有什么优势？。。我。。。面完感觉没戏，然后就通过知乎加了一个腾讯实习生群，大家天天在群里焦急的等待什么时候出结果，等了大概两个礼拜吧，出结果的时候特别热闹，各种报喜报，哈哈，我最终也拿到了offer，还加了一个终面在同一个房间的群，里面的人也挺有意思的。<br>&emsp;&emsp;接下来就是百度了，百度的笔试题好难，我感觉做的很不好，后面的大题我看了一下，觉得不会做，就直接交卷了。结果还是给了我面试机会，估计前端放的比较松吧，因为里面很多计算机基础题，关于前端的题就没几题。一面是一个很好的面试官，但是问问题就穷追猛打，一个多小时，问的我都快虚脱了，结果还是让我过了，二面就不太耐烦了，20分钟不到就结束了。我感觉没戏，赶紧联系人内推去百度地图，结果人家在输简历的时候说我在那个部门的面试已经通过了，好吧，没过多久给我发offer了。<br>&emsp;&emsp;阿里的实习招聘是一天搞完，一面是老乡，聊的还行，就让我在外面等一会，意思就是有下一面，二面是阿里前端奠基人玉伯大神，聊的也很开心，还握了个手，哈哈，三面也聊的很开心，主要是前面面了好多了，已经知道面试大概该怎么面了，果然，没多久就给我发offer了。<br>最终综合考虑还是去了百度，最崇尚百度的技术，部门也是很核心的网页搜索部。</p>
<h2 id="暑期实习"><a href="#暑期实习" class="headerlink" title="暑期实习"></a>暑期实习</h2><p>&emsp;&emsp;7月份去了百度实习，因为部门整合还是其他原因，我在那待了俩礼拜，就看文档，最后一个礼拜给了我一点小任务，这时刚好又有一个去阿里实习的机会，就果断和百度说离职了，然后马不停蹄赶去杭州接着实习，那边没多久就给我了一个任务，一个新手，压力很大，天天加班，最终还是顺利上线，最对不起我女朋友，来杭州的这几天就是我最忙的几天，根本没时间陪，唉。。然后9月1号通知下来，不能留用，唉，就回学校找工作呗。实习的感觉就是百度那个部门技术是很厉害，但是架子都已经搭好了，我只需要去重复的做一些业务开发，而且感觉没什么技术挑战，当然这也是因为我是实习生，肯定不能让我去做有技术难度的事情，非常遗憾，最终走了，后面秋招我想去百度也去不成了。阿里好玩一些，做交易链上的活动运营开发，算是见识了很多新技术吧，知道他们是怎么一个工作开发流程，学到很多，团队人也很nice，虽然只有一个月，带我的师兄对也很好，现在也还有联系。只能怪自己实力不行，没能留用。<br>&emsp;&emsp;阿里比百度加班多一些，可能真是氛围导致的吧，也和工作内容有关，因为阿里的运营活动不断，节奏很快，必然加班时间就会多一点点，但是周末也是没什么人来加班，来加班的基本都是新人，没办法，得提高技术，只能来加班了。上班时间也早一点，9点半就到的差不多了，百度要10点才陆续有人来。总之两个公司都很nice。</p>
<h2 id="秋招"><a href="#秋招" class="headerlink" title="秋招"></a>秋招</h2><p>&emsp;&emsp;从杭州跑回武汉，加入秋招大军，赶紧投简历，笔试，笔试了10几个公司，都快要吐了。其中还跑去杭州面百度，三面没面好，跪了。武汉面去哪儿，总是问我有没有学过计算机的课，写不写c++，唉，我也是服了，一面跪，当然这也怪自己实力不够，要是我c++也写的很溜，计算机的那些基础知识也都知道，就能面过了。360，一面就是闹眼子的我感觉，上来就夸我，然后让我去hr面，问我有没有offer，我说没有，看我的眼神都变了，好吧，说后续安排二面，到现在都没有给我安排。。。，小米就来了一个面试官，面了一会，他对我的评价非常对，懂得挺多，但是不够深，好吧，没戏了。小米招的人也不多我感觉，我这种不够厉害的自然不要。这里要感谢爱奇艺，6点多跑去霸面，最后一个是我，给了我5分钟，然后给了我offer，人生第一份offer，意义很重大，不仅是心理鼓励作用，对我以后面试也有很大的帮助，因为之前我被问了很多次，问我有没有offer，我都说没有，好尴尬啊。然后是新浪，一天面完，说的口干舌燥，感觉还行，除了那个冷艳的hr，让她说对我的评价，都说他们要综合考虑，全程板着脸。但是他们节奏也很慢啊，到12月才打电话给我问我有没有offer，对手上offer满意否，是否考虑他们的offer，我拒了。陌陌面的还行，给我了offer，感谢那位前辈，把我的简历从业务组捞来，特地给了我offer，抱歉前辈。百度外卖三面没面好，跪了。最后面了个搜狐，拿到offer。说实话考虑的因素有两点，一是钱，二是公司的名气，最终选了搜狐。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&emsp;&emsp;一年就这么过去了，得到了很多，工作也找到了，和女朋友的感情也越来越好，我就是一个幸运的人吧，无论是找实习还是找工作，我都感觉有很多人帮我，运气也一直很好。希望在来的一年，继续加油，朝着自己的目标前进。</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 年终总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[gulp+babelify+browserify实现在es6下工作流]]></title>
      <url>http://ldllidonglin.github.io/blog/2015/12/22/2015-12-22-gulp+babelify+browserify%E5%AE%9E%E7%8E%B0%E5%9C%A8es6%E4%B8%8B%E5%B7%A5%E4%BD%9C%E6%B5%81/</url>
      <content type="html"><![CDATA[<p>es6火了这么久，一直没有抽时间来实践一把，今天顺便把gulp flow也一起实践了一下。之前我是用RequireJS来实现的模块化，既然前端发展的那么迅速，RequireJS在可预见的未来会应该会”过时”，索性就用es6来实现模块化，零经验起步，搜索的过程中才发现中文资料是有多匮乏，折腾了好久，赶紧记录下来，以备后用。<br><a id="more"></a></p>
<h2 id="安装组件"><a href="#安装组件" class="headerlink" title="安装组件"></a>安装组件</h2><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> gulp</span><br><span class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> babelify   <span class="comment">//将es6-&gt;es5</span></span><br><span class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> babel-core</span><br><span class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> babel-preset-es2015   <span class="comment">//babel 6.0以后自身已不带任何功能，需要自己安装组件，这个是一个组件包</span></span><br><span class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> browserify  <span class="comment">//打包工具</span></span><br><span class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> gulp-sourcemaps   <span class="comment">//映射源码</span></span><br><span class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> vinyl-source-stream  <span class="comment">//把 browserify 输出的数据进行准换，使之流符合gulp的标准</span></span><br><span class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> gulp-uglify  <span class="comment">//压缩js</span></span><br><span class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> vinyl-buffer  <span class="comment">//将 vinyl 对象内容中的 Stream 转换为 Buffer,sourse-map 和uglify需要buffer格式</span></span><br></pre></td></tr></table></figure>
<h2 id="gulpfile-babel-js-内容"><a href="#gulpfile-babel-js-内容" class="headerlink" title="gulpfile.babel.js 内容"></a>gulpfile.babel.js 内容</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gulp <span class="keyword">from</span> <span class="string">'gulp'</span>;</span><br><span class="line"><span class="keyword">import</span> sourcemaps <span class="keyword">from</span> <span class="string">"gulp-sourcemaps"</span>;</span><br><span class="line"><span class="keyword">import</span> babelify <span class="keyword">from</span> <span class="string">"babelify"</span>;</span><br><span class="line"><span class="keyword">import</span> browserify <span class="keyword">from</span> <span class="string">'browserify'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">source</span> <span class="keyword">from</span> <span class="string">"vinyl-source-stream"</span>;</span><br><span class="line"><span class="keyword">import</span> uglify <span class="keyword">from</span> <span class="string">'gulp-uglify'</span>;</span><br><span class="line"><span class="keyword">import</span> buffer <span class="keyword">from</span> <span class="string">'vinyl-buffer'</span>;</span><br><span class="line"></span><br><span class="line">gulp.<span class="keyword">task</span>(<span class="string">"default"</span>, ()=&gt;&#123;</span><br><span class="line">  <span class="keyword">return</span> browserify(<span class="string">'src/main.js'</span>)</span><br><span class="line">         .transform(babelify)</span><br><span class="line">         .bundle()</span><br><span class="line">         .pipe(<span class="keyword">source</span>(<span class="string">'bundle.js'</span>))</span><br><span class="line">         .pipe(buffer())</span><br><span class="line">         .pipe(sourcemaps.init(&#123; loadMaps: <span class="keyword">true</span> &#125;))</span><br><span class="line">         .pipe(uglify()) <span class="comment">// Use any gulp plugins you want now</span></span><br><span class="line">         .pipe(sourcemaps.<span class="keyword">write</span>(<span class="string">'./'</span>))</span><br><span class="line">         .pipe(gulp.dest(<span class="string">'./dist'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="需要注意的点"><a href="#需要注意的点" class="headerlink" title="需要注意的点"></a>需要注意的点</h2><ol>
<li>babel6.0以后，安装babel-core后，并不带任何功能，还需安装所需要的插件，可以按照自己需要的来安装，也可以安装babel-preset-es2015，这个是一个预设包，带很多常用插件。然后新建一个文件.babelrc，写入<br>{<br> “presets”: [“es2015”]<br>}</li>
</ol>
<p>参考的博文<br><a href="https://viget.com/extend/gulp-browserify-starter-faq" target="_blank" rel="noopener">Gulp + Browserify: The Everything Post</a><br><a href="http://macr.ae/article/gulp-and-babel.html" target="_blank" rel="noopener">Using gulp with Babel</a><br><a href="http://segmentfault.com/a/1190000003770541" target="_blank" rel="noopener">探究Gulp的Stream</a><br><a href="http://csspod.com/using-browserify-with-gulp/" target="_blank" rel="noopener">在 Gulp 中使用 Browserify</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> gulp </tag>
            
            <tag> es6 </tag>
            
            <tag> module </tag>
            
            <tag> 模块化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pymongo去除重复数据]]></title>
      <url>http://ldllidonglin.github.io/blog/2015/12/14/2015-12-14-mongodb%E5%8E%BB%E9%99%A4%E9%87%8D%E5%A4%8D%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<ol>
<li><p>唯一索引</p>
 <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">db.things.ensureIndex(&#123;'key'</span> <span class="string">:</span> <span class="number">1</span><span class="string">&#125;,</span> <span class="string">&#123;unique</span> <span class="string">:</span> <span class="literal">true</span><span class="string">,</span> <span class="attr">dropDups :</span> <span class="literal">true</span><span class="string">&#125;)</span></span><br></pre></td></tr></table></figure>
<p> 但是<a href="http://api.mongodb.org/python/current/api/pymongo/collection.html#pymongo.collection.Collection.create_index" target="_blank" rel="noopener">dropDups is not supported by MongoDB 2.7.5 or newer</a>所以这个方法只能在2.7.5版本以下才行</p>
<a id="more"></a></li>
<li><p>用aggreate找出重复的数据，然后再一个一个删除(效率比较低)，python代码</p>
 <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#先找到重复的数据</span></span><br><span class="line"><span class="attribute">deleteData</span>=collection.aggregate([</span><br><span class="line">&#123;<span class="string">'$group'</span>: &#123; </span><br><span class="line">    <span class="string">'_id'</span>: &#123; <span class="string">'firstField'</span>: <span class="string">"<span class="variable">$area</span>"</span>, <span class="string">'secondField'</span>: <span class="string">"<span class="variable">$time_point</span>"</span> &#125;, </span><br><span class="line">    <span class="string">'uniqueIds'</span>: &#123; <span class="string">'$addToSet'</span>: <span class="string">"<span class="variable">$_id</span>"</span> &#125;,</span><br><span class="line">    <span class="string">'count'</span>: &#123; <span class="string">'$sum'</span>: 1 &#125; </span><br><span class="line">  &#125;&#125;, </span><br><span class="line">  &#123; <span class="string">'$match'</span>: &#123; </span><br><span class="line">    <span class="string">'count'</span>: &#123; <span class="string">'$gt'</span>: 1 &#125; </span><br><span class="line">  &#125;&#125;</span><br><span class="line">]);</span><br><span class="line"><span class="attribute">first</span>=<span class="literal">True</span></span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> deleteData:</span><br><span class="line">    <span class="attribute">first</span>=<span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> did <span class="keyword">in</span> d[<span class="string">'uniqueIds'</span>]:</span><br><span class="line">        <span class="keyword">if</span> !first:    #第一个不删除</span><br><span class="line">            collection.delete_one(&#123;<span class="string">'_id'</span>:did&#125;);</span><br><span class="line">        <span class="attribute">first</span>=<span class="literal">False</span></span><br></pre></td></tr></table></figure>
<p> <a href="http://stackoverflow.com/questions/13190370/how-to-remove-duplicates-based-on-a-key-in-mongodb" target="_blank" rel="noopener">参考1</a><br> <a href="http://stackoverflow.com/questions/8405331/how-to-remove-duplicate-record-in-mongodb-by-mapreduce" target="_blank" rel="noopener">参考2</a></p>
</li>
<li>第二种方法当数据量很大的时候，需要把数据写入表中。aggregate的pipeline中要加上out项，同时由于aggregate只接受两个参数，self是默认的，所以要用allowDiskUse=True这种形式添加参数 <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 找出重复的放入result表中</span></span><br><span class="line">def findDuplicate():</span><br><span class="line">    <span class="attribute">deleteData</span>=collection.aggregate([</span><br><span class="line">        &#123;<span class="string">'$group'</span>: &#123;</span><br><span class="line">            <span class="string">'_id'</span>: &#123; <span class="string">'firstField'</span>: <span class="string">"<span class="variable">$mid</span>"</span>, <span class="string">'secondField'</span>: <span class="string">"<span class="variable">$created_at</span>"</span> &#125;,</span><br><span class="line">            <span class="string">'uniqueIds'</span>: &#123; <span class="string">'$addToSet'</span>: <span class="string">"<span class="variable">$_id</span>"</span> &#125;,</span><br><span class="line">            <span class="string">'count'</span>: &#123; <span class="string">'$sum'</span>: 1 &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123; <span class="string">'$match'</span>: &#123;</span><br><span class="line">            <span class="string">'count'</span>: &#123; <span class="string">'$gt'</span>: 1 &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,&#123;<span class="string">'$out'</span>:<span class="string">'result'</span>&#125;</span><br><span class="line">    ],<span class="attribute">allowDiskUse</span>=<span class="literal">True</span>); </span><br><span class="line"></span><br><span class="line">def deleteDup():</span><br><span class="line">    <span class="attribute">deleteData</span>=db.result.find()</span><br><span class="line">    <span class="attribute">first</span>=<span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> deleteData:</span><br><span class="line">        <span class="attribute">first</span>=<span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> did <span class="keyword">in</span> d[<span class="string">'uniqueIds'</span>]:</span><br><span class="line">            <span class="keyword">if</span> <span class="attribute">first</span>==False:</span><br><span class="line">                collection.delete_one(&#123;<span class="string">'_id'</span>:did&#125;);</span><br><span class="line">            <span class="attribute">first</span>=<span class="literal">False</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      
        <categories>
            
            <category> 数据抓取 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mongodb </tag>
            
            <tag> python </tag>
            
            <tag> aqi </tag>
            
            <tag> 数据 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[nodejs+mongodb获取pm2.5数据]]></title>
      <url>http://ldllidonglin.github.io/blog/2015/11/29/2015-11-29-nodejs+mongodb%E8%8E%B7%E5%8F%96pm2.5%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<p><em>特别感谢<a href="http://pm25.in/" target="_blank" rel="noopener">pm2.5</a>提供接口</em><br>因为返回的数据直接就是[{},{}]格式，所以偷懒直接用mongodb来存储了。<br><a id="more"></a></p>
<h1 id="nodejs代码"><a href="#nodejs代码" class="headerlink" title="nodejs代码"></a>nodejs代码</h1><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">//aqi.js</span><br><span class="line">var http = <span class="built_in">require</span>(<span class="string">"http"</span>),url = <span class="built_in">require</span>(<span class="string">"url"</span>),MongoClient = <span class="built_in">require</span>(<span class="string">'mongodb'</span>).MongoClient, <span class="built_in">assert</span> = <span class="built_in">require</span>(<span class="string">'assert'</span>),fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">var dataURL = <span class="string">"http://www.pm25.in/api/querys/aqi_ranking.json?token="</span>;</span><br><span class="line">http.get(dataURL, <span class="function"><span class="keyword">function</span><span class="params">(res)</span></span>&#123;</span><br><span class="line">    res.setEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">    var <span class="built_in">date</span>=new Date();</span><br><span class="line">    var <span class="built_in">time</span>=<span class="built_in">date</span>.getFullYear()+<span class="string">"-"</span>+(<span class="built_in">date</span>.getMonth()+<span class="number">1</span>)+<span class="string">"-"</span>+<span class="built_in">date</span>.getDate()+<span class="string">" "</span>+<span class="built_in">date</span>.getHours()+<span class="string">":"</span>+<span class="built_in">date</span>.getMinutes();</span><br><span class="line">    var result=[];</span><br><span class="line">    res.on(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span><span class="params">(chunk)</span></span>&#123;</span><br><span class="line">        result.push(chunk);</span><br><span class="line">    &#125;)</span><br><span class="line">    .on(<span class="string">"end"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">        result=JSON.parse(result.join(<span class="string">""</span>));</span><br><span class="line">        var url = <span class="string">'mongodb://localhost:27017/aqi'</span>;</span><br><span class="line">        //写入日志文件 绝对路径，因为在cmd下是在C:/windows/system32/下执行的</span><br><span class="line">        fs.<span class="built_in">open</span>(<span class="string">'D:/Nodejs/aqilog.log'</span>, <span class="string">'a+'</span>,<span class="function"><span class="keyword">function</span> <span class="params">(err,fd)</span></span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">               <span class="keyword">return</span> fs.<span class="built_in">write</span>(fd,<span class="built_in">time</span>+<span class="string">" "</span>+err); </span><br><span class="line">            &#125;</span><br><span class="line">            fs.<span class="built_in">write</span>(fd,<span class="built_in">time</span>+<span class="string">" 获取数据成功\r\n"</span>);   </span><br><span class="line">            fs.<span class="built_in">close</span>(fd);</span><br><span class="line">        &#125;);</span><br><span class="line">        MongoClient.connect(url, <span class="function"><span class="keyword">function</span><span class="params">(err, db)</span></span> &#123;</span><br><span class="line">            var collection = db.collection(<span class="string">'cityaqi'</span>);</span><br><span class="line">            collection.insertMany(result,<span class="function"><span class="keyword">function</span><span class="params">(inserterr, result)</span></span> &#123;</span><br><span class="line">                fs.<span class="built_in">open</span>(<span class="string">'D:/Nodejs/aqilog.log'</span>, <span class="string">'a+'</span>,<span class="function"><span class="keyword">function</span> <span class="params">(err,fd)</span></span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                       <span class="keyword">return</span> fs.<span class="built_in">write</span>(fd,<span class="built_in">time</span>+<span class="string">" "</span>+err); </span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(inserterr)&#123;</span><br><span class="line">                        fs.<span class="built_in">write</span>(fd,<span class="built_in">time</span>+<span class="string">" 条记录写入失败"</span>+inserterr+<span class="string">"\r\n"</span>);   </span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        fs.<span class="built_in">write</span>(fd,<span class="built_in">time</span>+<span class="string">" "</span>+result.insertedCount+<span class="string">"条记录写入成功\r\n"</span>);   </span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    fs.<span class="built_in">close</span>(fd);</span><br><span class="line">                &#125;);</span><br><span class="line">                db.<span class="built_in">close</span>();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><em>需要先安装mongodb和nodejs npm</em><br>把mongodb安装成服务,在cmd下cd到mongodb的bin目录下<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath F:\<span class="keyword">data</span> --logpath=F:\<span class="keyword">data</span>\<span class="built_in">log</span>\mongodb.<span class="built_in">log</span> --install</span><br></pre></td></tr></table></figure></p>
<p>然后win+r 输入services.msc，在window服务里启动mongodb就ok了，</p>
<p>nodejs需要安装 <a href="http://mongodb.github.io/node-mongodb-native/2.0/" target="_blank" rel="noopener">mongodb插件</a>;<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mongodb   <span class="comment">//安装在当前目录就好了，不需要-g</span></span><br></pre></td></tr></table></figure></p>
<p>在windows下需要每个小时执行一次，用windows的计划任务，一开始只能设置一天启动一次，然后建立任务后在属性-触发器那修改成每小时重复一次，持续24小时<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//g</span>etCityAQI.bat</span><br><span class="line">node D:\Nodejs\aqi.js   <span class="regexp">//</span>node需要在系统的PATH目录</span><br><span class="line"><span class="keyword">exit</span>                     <span class="regexp">//</span>退出cmd窗口，不然程序不会退出，后续的任务就不会重复执行了</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> pm2.5 </tag>
            
            <tag> nodejs </tag>
            
            <tag> mongodb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript设计模式读书笔记]]></title>
      <url>http://ldllidonglin.github.io/blog/2015/11/03/2015-11-03-JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="第一章-富有表现力的JavaScript"><a href="#第一章-富有表现力的JavaScript" class="headerlink" title="第一章 富有表现力的JavaScript"></a>第一章 富有表现力的JavaScript</h1><p>JavaScript是弱类型的语言，所有对象和类都是易变的，可以在运行时修改。JavaScript使用设计模式，主要是因为可以提高可维护性、沟通更简单、有一些设计模式能提升性能。<br><a id="more"></a></p>
<h1 id="第二章-接口"><a href="#第二章-接口" class="headerlink" title="第二章 接口"></a>第二章 接口</h1><p>接口提供了一种用以说明一个对象应该具有哪些方法的手段，但并不规定这些方法应该如何实现。在JavaScript中没有提供对接口的内置支持，但是有三种方法可以模仿接口</p>
<ol>
<li><p>用注释描述接口</p>
 <figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">interface Composite&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">remove</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getChild</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ComInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">ComInstance.prototype.add=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 这种做法对接口约定的遵守完全依靠自觉，因为没有为确保ComInstance真正实现了正确的方法集而进行检查。</p>
</li>
<li><p>属性检查</p>
 <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ComInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.implementsInterfaces=[<span class="string">'Composite'</span>];   <span class="comment">//这个属性声明这个类实现了哪些接口</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 所有类都用一个属性明确声明自己实现了哪些接口，接口自身还是使用注释，但是可以通过检测这个属性来得知这个类自称实现了什么接口后续的调用就可以通过检测这个属性来判断这个类是否实现了某些接口</p>
</li>
<li><p>鸭式辨型</p>
</li>
</ol>
<p>如果对象具有与接口定义的方法同名的所有方法，那就可以认为它实现了这个接口。可以用一个辅助函数来确保对象具有所有必须的方法。</p>
<h1 id="第三章-封装和信息隐藏"><a href="#第三章-封装和信息隐藏" class="headerlink" title="第三章 封装和信息隐藏"></a>第三章 封装和信息隐藏</h1><ol>
<li>信息隐藏原则<br>封装就是对对象内部数据的表现形式和实现细节进行隐藏</li>
<li><p>创建对象的基本方法<br>1)门户大开型(其实就是构造函数+原型链)</p>
 <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book=<span class="function"><span class="keyword">function</span><span class="params">(a,b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a=a;</span><br><span class="line">    <span class="keyword">this</span>.b=b;</span><br><span class="line">&#125;</span><br><span class="line">book.prototype.funa=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p> 为了保护内部数据，让取值和赋值可以得到完整性验证，可以添加对应的setAttributeA()、getAttributeA()函数，但是这并不能真正意义上避免直接修改内部属性，这只是一种约定，而且也增加了额外的代码，可以衡量下再决定是否要这么做。<br>2)用命名规范区别私有成员(在一些私有属性和方法前加下划线)这也只是一种约定<br>3)闭包</p>
 <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book=<span class="function"><span class="keyword">function</span><span class="params">(a,b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a,b;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//内部方法</span></span><br><span class="line">    <span class="keyword">var</span> pa=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">        a=a*<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//对外的设置内部属性的方法</span></span><br><span class="line">    <span class="keyword">this</span>.setA=<span class="function"><span class="keyword">function</span><span class="params">(va)</span></span>&#123;</span><br><span class="line">        a=va;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.getA=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对外的不需要直接访问内部属性的方法</span></span><br><span class="line">book.prototype.funa=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a=<span class="keyword">this</span>.getA();</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p> 这种方式,外部就没法直接修改内部属性了,必须通过提供的set方法来设置,在set方法内可以对要设置的值进行检验,可以控制每个属性值都是有效的.但是弊端就是,内部定义的这些变量和方法会在每实例化一个实例时都copy一份,浪费内存（虽然现在内存很廉价）。</p>
</li>
<li><p>更多高级的创建对象模式<br>1)静态方法和属性</p>
 <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Book=(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//静态私有方法</span></span><br><span class="line">    <span class="keyword">var</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> fb=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(a,b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">var</span> va,vb;</span><br><span class="line">        <span class="keyword">this</span>.setA=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">            va=a;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">this</span>.setA(a);</span><br><span class="line">        <span class="keyword">this</span>.setB(b);</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();  <span class="comment">//自执行</span></span><br><span class="line"><span class="comment">//静态公有方法</span></span><br><span class="line">Book.fc=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> book=Book(<span class="string">'dd'</span>,<span class="string">'cc'</span>);</span><br></pre></td></tr></table></figure>
<p> 对于不需要访问任何实例属性的方法可以这样设置为静态方法，因为静态方法是和Book类关联在一起的，只会在内存中保存一份，count属性是静态属性，每构造一个实例，就会自动加1，fc也是静态方法，任何实例都可以调用，但是要注意静态方法里不能和实例的属性有关联，否则，任何一个实例修改这个值，会影响到所有实例。</p>
</li>
<li><p>封装的利弊<br>弊端：不能很好的在外部进行单元测试</p>
</li>
</ol>
<h1 id="第四章-继承"><a href="#第四章-继承" class="headerlink" title="第四章 继承"></a>第四章 继承</h1><ol>
<li><p>类式继承(其实就是构造函数+原型链)</p>
 <figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">functon extend(subClass,superClass)<span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    var f=function ()&#123;&#125;</span>;</span><br><span class="line">    f.prototype=superClass.prototype;</span><br><span class="line">    subClass.prototype=new f();</span><br><span class="line">    subClass.prototype<span class="function">.<span class="keyword">constructor</span>=<span class="title">subClass</span><span class="params">()</span>;</span></span><br><span class="line">    subClass.superclass=superClass.prototype;</span><br><span class="line">    <span class="keyword">if</span>(superClass.prototype<span class="function">.<span class="keyword">constructor</span>==<span class="title">Object</span>.<span class="title">prototype</span>.<span class="title">constructor</span>)<span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">        superClass.prototype.constructor=superClass;</span></span></span><br><span class="line"><span class="function"><span class="comment">    &#125;</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function">/*<span class="title">Class</span> <span class="title">Person</span>*/</span></span><br><span class="line"><span class="function"><span class="title">funtion</span> <span class="title">Person</span><span class="params">(<span class="keyword">name</span>)</span><span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">    this.name=name;</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span></span></span><br><span class="line"><span class="function">..</span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">Author</span><span class="params">(<span class="keyword">name</span>,book)</span><span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">    Person.call(this,name);</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span></span></span><br><span class="line"><span class="function"><span class="title">extand</span><span class="params">(Author,Person)</span>;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>原型式继承</p>
 <figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var Person=&#123;</span><br><span class="line">    name:<span class="string">'li'</span>,</span><br><span class="line">    friends:[<span class="string">'li'</span>]</span><br><span class="line">&#125;</span><br><span class="line">var otherPerson=Object.<span class="built_in">create</span>(Person);  </span><br><span class="line">//得到一个原型指定super的空对象，所以他可以共享父对象的所有属性</span><br><span class="line">/* Object.<span class="built_in">create</span>原生支持</span><br><span class="line">其内部原理就是</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">crate</span><span class="params">(o)</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    F.prototype=o;</span><br><span class="line">    <span class="keyword">return</span> new F();</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
<p> 在不需要创建构造函数时，只是想让两个对象之间保持相识的时候，可以使用原型式继承，此时friends这个数组(引用类型)是被所有实例共享的。</p>
</li>
<li><p>掺元法（不是严格意义上的继承）<br>在只是想让两个迥然不同的对象之间共用一部分代码的时候，可以使用这个方法</p>
 <figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var Mixin=&#123;&#125;;</span><br><span class="line">//定义各种通用函数</span><br><span class="line">Minin.prototype=&#123;</span><br><span class="line">    <span class="attribute">fun1</span>:&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    fun2:&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//ReciveClass 是想要共用代码的对象；</span><br><span class="line">for(methodname in Minxin<span class="variable">.prototype</span>)&#123;</span><br><span class="line">    if(!ReciveClass<span class="variable">.prototype</span>[methodname])&#123;</span><br><span class="line">        ReciveClass<span class="variable">.prototype</span>[methodname]=Minxin<span class="variable">.prototype</span>[methodname];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="第五章-单体模式"><a href="#第五章-单体模式" class="headerlink" title="第五章 单体模式"></a>第五章 单体模式</h1><ol>
<li>单体是一个用来划分命名空间并将一批相关的属性和方法组织在一起的对象，要是可以实例化只能实例化一次。在JavaScript中为了避免全局对象被无意修改，单体模式非常重要，也是非常常用的一种模式。</li>
<li><p>用自执行函数闭包的形式声明私有变量</p>
 <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Book.en=(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pri=<span class="string">'dd'</span>;  <span class="comment">//私有变量</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        a:<span class="string">'ddd'</span>,</span><br><span class="line">        funa:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)();</span><br></pre></td></tr></table></figure>
</li>
<li><p>惰性加载，就是在单体中添加getInstance()函数，这个函数判断是否已经实例化，没有实例化的话就实例化，否则返回已经实例化的对象，在需要使用单体对象的时候都需要调用getInstance函数，实现按需实例化，节约内存。</p>
</li>
<li>分支技术就是比如在针对浏览器兼容的时候，单体内部嗅探浏览器，然后给出兼容的方法，就不需要每次调用某个功能的时候都去检测浏览器。</li>
</ol>
<h1 id="第六章-方法的链式调用"><a href="#第六章-方法的链式调用" class="headerlink" title="第六章 方法的链式调用"></a>第六章 方法的链式调用</h1><ol>
<li>让类的方法都返回this，是实现链式调用的基本思路，对于需要返回值的取值类函数，可以用传入回调函数的形式避免链路被打断。</li>
</ol>
<h1 id="第七章-工厂模式"><a href="#第七章-工厂模式" class="headerlink" title="第七章 工厂模式"></a>第七章 工厂模式</h1><ol>
<li>工厂模式就是对对象的创建进行包装，使创建对象的具体过程隔离开来，解耦</li>
<li><p>简单工厂模式</p>
 <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">BicycleFactory=&#123;</span><br><span class="line">    createBicycle:<span class="function"><span class="keyword">function</span>(<span class="params"><span class="keyword">type</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(<span class="keyword">type</span>)&#123;</span><br><span class="line">            <span class="keyword">case</span>:<span class="string">'a'</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> a();</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 优势就在只需要传入一个参数就能得到想要的想要的对象，实现了责任分割，缺点就是在需要添加新产品，扩展就需要修改整个逻辑，一旦整个逻辑一个地方出现了问题，就可能造成整个工厂没法工作。</p>
</li>
<li><p>工厂方法模式</p>
 <figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">BicycleShop=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">BicycleShop.prototype=&#123;</span><br><span class="line">    sellBicycle=<span class="function"><span class="keyword">function</span>(<span class="params">model</span>)</span>&#123; <span class="comment">//静态方法，所有实例可以共享的方法</span></span><br><span class="line">        <span class="keyword">var</span> bicycle=<span class="keyword">this</span>.createBicycle(model)</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">    createBicycle=<span class="function"><span class="keyword">function</span>(<span class="params">model</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'unsupported operation on an abstract class'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> BicycleShopA=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">extend(BicycleShopA,BicycleShop)  <span class="comment">//继承</span></span><br><span class="line">BicycleShopA.prototype.createBicycle=<span class="function"><span class="keyword">function</span>(<span class="params">model</span>)</span>&#123;  <span class="comment">//具体实例化生产方法</span></span><br><span class="line">       <span class="keyword">switch</span>(model)&#123;</span><br><span class="line">            <span class="keyword">case</span>:<span class="string">'a'</span>:</span><br><span class="line">                <span class="keyword">new</span> a();</span><br><span class="line">            ...</span><br><span class="line">       &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。抽象类不能用来生产对象，只能派生子类，但是可以有一些静态方法给所有工厂。优势在于扩展性强，要比如要添加一加店，只需再派生一个子类，并实现createBicycle方法就好了，而不是像简单工厂模式那样需要修改整个逻辑。</p>
</li>
<li>抽象工厂方法<br> 为创建一组相关或相互依赖的对象提供一个接口，而且无需指定他们的具体类，就是在工厂方法模式上再抽象一层，抽象工厂里有多个抽象的工厂方法，比如一个工厂里面有生产小米、华为两个品牌的产品，每种品牌又都会生产手机、平板。这个时候就需要抽象一个工厂，里面有两条生产线，一条生产手机、一条生产平板。 <figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Factory=<span class="function"><span class="keyword">function</span></span>()&#123;&#125;;</span><br><span class="line">Factory.prototype.createFactory=<span class="function"><span class="keyword">function</span></span>(type)&#123;  <span class="comment">//抽象工厂</span></span><br><span class="line">    <span class="keyword">switch</span>(type)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'phone'</span>:<span class="type"></span></span><br><span class="line"><span class="type">            return new Factory_Phone</span>();</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'pad'</span>:<span class="type"></span></span><br><span class="line"><span class="type">            return new Factory_Pad</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Product=<span class="function"><span class="keyword">function</span></span>()&#123;&#125;;</span><br><span class="line">Product.prototype=&#123;                        <span class="comment">//抽象产品</span></span><br><span class="line">    createProductApple=<span class="function"><span class="keyword">function</span></span>()&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">Error</span>(<span class="string">'unsupported operation on an abstract class'</span>);</span><br><span class="line">    &#125;，</span><br><span class="line">    createProductHuawei=<span class="function"><span class="keyword">function</span></span>()&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">Error</span>(<span class="string">'unsupported operation on an abstract class'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">extend(Factory_Pad,Product)                            <span class="comment">//继承</span></span><br><span class="line">Factory_Pad.prototype.createProductApple=fucntion()&#123;      <span class="comment">//具体实现</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">PadApple</span>();</span><br><span class="line">&#125;;</span><br><span class="line">Factory_Pad.prototype.createProductHuawei=<span class="function"><span class="keyword">function</span></span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">PadHuawei</span>();</span><br><span class="line">&#125;;</span><br><span class="line">extend(Factory_Phone,Product);</span><br><span class="line">Factory_Phone.prototype.createProductApple=fucntion()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">PhoneApple</span>();</span><br><span class="line">;</span><br><span class="line">Factory_Phone.prototype.createProductHuawei=<span class="function"><span class="keyword">function</span></span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">PhoneHuawei</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">Factory factory = <span class="keyword">new</span> <span class="type">Factory_Pad</span>();</span><br><span class="line">Apple apple = factory.createProductApple();</span><br><span class="line">Huawei pad=factory.createProductHuawei();</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="第八章-桥接模式"><a href="#第八章-桥接模式" class="headerlink" title="第八章 桥接模式"></a>第八章 桥接模式</h1><ol>
<li><p>桥接模式就是将抽象和实现隔离开来，使得二则可以灵活的独立变化，js中用的比较多的地方就是回调</p>
 <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">each</span> = <span class="function"><span class="keyword">function</span> <span class="params">(arr, fn)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> val = arr[i];</span><br><span class="line">        <span class="keyword">if</span> (fn.call(val, i, val, arr)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">each</span>(arr, <span class="function"><span class="keyword">function</span> <span class="params">(i, v)</span> </span>&#123;</span><br><span class="line">    arr[i] = v * <span class="number">2</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p> each是抽象的部分，fn就是实现部分，对于数组，遍历后怎么处理每个元素，具体就交由fn来处理，fn是可以替换的。</p>
</li>
</ol>
<h1 id="第九章-组合模式"><a href="#第九章-组合模式" class="headerlink" title="第九章 组合模式"></a>第九章 组合模式</h1><ol>
<li>一种专为创建web上的动态用户界面而量身定制的模式，对组合对象的操作可以传递到每一个子对象，使得代码简化了不少。提高了代码的模块化程度，也便于以后的重构，而且子对象和组合对象经常会用做HTML元素的包装工具，使得我们是对对象进行操作，而不是具体到dom上操作。这种模式适用于存在一批组织成某种层次体系的对象，并且希望对这批对象或其中的一部分对象实施一个操作。比如表单保存、验证，组合模式下，可以执行form.save()，就能实现save所有控件。</li>
<li><p>代码实例(图片库)</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> DynamicGallery=<span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.children=[];</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义组合对象和其叶子对象应该实现的接口</span></span><br><span class="line">DynamicGallery.prototype=&#123;</span><br><span class="line">    add:<span class="function"><span class="keyword">function</span>(<span class="params">child</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.children.push(child);</span><br><span class="line">        <span class="keyword">this</span>.element.appendChild(child.getElement());</span><br><span class="line">    &#125;,</span><br><span class="line">    remove:...</span><br><span class="line">    hide:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> node,i=<span class="number">0</span>;node=<span class="keyword">this</span>.getChild(i);i++)&#123;</span><br><span class="line">            node.hide();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.element.style.display=<span class="string">'none'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    show:..</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//叶子对象</span></span><br><span class="line"><span class="keyword">var</span> GalleryImage=<span class="function"><span class="keyword">function</span>(<span class="params">src</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.element=<span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">    <span class="keyword">this</span>.element.src=src;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">GalleryImage.prototype=&#123;</span><br><span class="line">    add:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">    ...</span><br><span class="line">    hide:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.element.style.display=<span class="string">'none'</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    show:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.element.sytle.display=<span class="string">''</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    getElement:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.element;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> <em>DynamicGalery可以互相嵌套</em><br> 有一个问题需要注意就是，对组合某个方法的调用会引起对整个组合内的子对象遍历及其方法调用，可能会比较耗性能，在某些情况下需要注意，特别是子对象特别多的情况下。</p>
</li>
</ol>
<h1 id="第十章-门面模式"><a href="#第十章-门面模式" class="headerlink" title="第十章 门面模式"></a>第十章 门面模式</h1><ol>
<li>门面模式有两个作用：一是简化类的接口；二是消除类与使用它的客户代码之间的耦合。可以为执行各种复杂任务提供一个简单的接口，代码更加容易维护和理解。</li>
<li><p>在各种类库中门面模式非常常见。比如事件处理中的各种浏览器兼容处理，非常像适配器模式，但并不是。</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> DED=<span class="built_in">window</span>.DED||&#123;&#125;;</span><br><span class="line">DED.util=&#123;</span><br><span class="line">    stopPropagation:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(e.stopPropagation)&#123;</span><br><span class="line">            e.shopPropagation();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            e.cancelBubble=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    preventDefault:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(e.preventDefault)&#123;</span><br><span class="line">            e.preventDefault();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            e.returnValue=<span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    stopEvent:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        DED.util.stopPropagation();</span><br><span class="line">        DED.util.preventDefault();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>当有一些反复成组出现的代码的时候，就可以考虑使用门面模式了，有助于节省时间和精力，但是不能滥用，不要小题大做，有时更细粒度的函数反而更好，不见得非得组成一个庞杂的门面函数，三思而行。</p>
</li>
</ol>
<h1 id="第十一章-适配器模式"><a href="#第十一章-适配器模式" class="headerlink" title="第十一章 适配器模式"></a>第十一章 适配器模式</h1><ol>
<li>适配器模式用来在现有接口和不兼容的类之间进行适配，比较常用的情况是用来协调两个不同的接口。比如有一个新接口更加高效，但是又不想改动原有接口，就可以在原有接口和新接口之间加一层适配器，使得按旧接口的方式使用新接口的功能，可以避免大规模改写现有代码。</li>
<li>但很多时候其实是需要彻底重写代码的，或者新接口还未定型，那么适配器可能就会面临也需要改动的情况，这样就会增加很多不必要的开销，所以适配器在新旧接口都已经固定了，并且比重写代码更高效就能解决问题的时候适用。</li>
</ol>
<h1 id="第十二章-装饰者模式"><a href="#第十二章-装饰者模式" class="headerlink" title="第十二章 装饰者模式"></a>第十二章 装饰者模式</h1><ol>
<li>动态而又透明的为对象添加功能方法。不修改现有对象或从其派生子类。和组合模式不同，装饰者就是来修改方法的而不是组织子对象的，因为子对象只有一个。</li>
<li>其实就是继承父类但是修改父类的方法，只需要调用父类的构造函数并改写某些方法即可。 <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> TailightDecorator=<span class="function"><span class="keyword">function</span>(<span class="params">bicyle</span>)</span>&#123;</span><br><span class="line">    TailightDecorator.superclass.<span class="keyword">constructor</span>.call(<span class="params"><span class="keyword">this</span>,bicycle</span>);</span><br><span class="line">&#125;</span><br><span class="line">extend(TailightDecorator,BicycleDecorator);</span><br><span class="line">TailightDecorator.prototype.getPrice=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.bicycle.getPrice()+<span class="number">9.00</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> myBicycle=<span class="keyword">new</span> AcmeComfortCruiser();</span><br><span class="line">myBicycle=<span class="keyword">new</span> TailightDecorator(myBicycle);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="第十三章-享元模式"><a href="#第十三章-享元模式" class="headerlink" title="第十三章 享元模式"></a>第十三章 享元模式</h1><ol>
<li>这是一种优化模式，适合于解决因创建大量类似对象而累及性能的问题，把大量的独立对象转化为少量的共享对象，就可以降低内存的使用。</li>
<li>比如网页中常见的Tooltip，使用享元模式就可以只创建一个对象，然后把外在数据，比如每个Tooltip的位置、显示的文字等这些因实例而异的属性剥离，变成各个方法的参数，然后只需要创建一个对象，但是可以通过调用函数，传入不同的参数实现各种形式的Tooltip。</li>
<li>享元模式一般有三个步骤：<ol>
<li>将所有外在数据从目标类剥离，变成函数的参数传入，目标类应该依然具有与之前一样的功能，唯一的区别是数据的来源发生了变化。</li>
<li>创建一个用来控制该类的实例化的工厂，这个工厂应该掌握该类所有已创建出来的独一无二的实例，比较常见的做法是用对象字面量是保持对其的引用。</li>
<li>创建一个用来保存外在数据的管理器，该管理器对象负责处理外在数据的种种事宜。一般是一个包含一堆方法的对象，外在数据的输入输出就靠调用其中的方法。</li>
</ol>
</li>
<li>享元模式的目的是优化，而且是优化那种在网页中大量使用的资源密集型对象、并且可以剥离外在数据，剥离后独一无二的对象数目是相对减少了的，不然就没有必要使用享元模式。</li>
<li>享元模式让一个对象分开存储，造成对数据问题的追踪会很困难，维护起来也增加了难度，所以使用的时候要在运行效率和可维护性之间进行权衡。</li>
</ol>
<h1 id="第十四章-代理模式"><a href="#第十四章-代理模式" class="headerlink" title="第十四章 代理模式"></a>第十四章 代理模式</h1><ol>
<li>代理模式也是一种优化模式，JavaScript中的代理模式用于控制对创建或保有开销较大的类会对象的访问。比如有些对象不需要在网页加载时就实例化，可以把它推迟到使用它之前再实例化，而且在使用本地的所有功能而不必操心其实例化的事，它掩盖了推迟本地实例化的逻辑。但是这种模式不能勉强使用，代理任何时候都可以被替换为本地，它会增加项目的复杂性，除非它可以降低代码的冗余程度、提高其模块化程度或运行效率，否则不要使用它。</li>
</ol>
<h1 id="第十五章-观察者模式"><a href="#第十五章-观察者模式" class="headerlink" title="第十五章 观察者模式"></a>第十五章 观察者模式</h1><ol>
<li>观察者模式的使用场合就是当一个对象的改变需要同时改变其它对象，并且它不知道具体有多少对象需要改变的时候。总的来说观察者模式所做的工作就是在解耦，让耦合的双方都依赖于抽象，而不是依赖于具体。从而使得各自的变化都不会影响到另一边的变化。</li>
<li>js中大量使用的事件监听就是观察者模式</li>
</ol>
<h1 id="第十六章-命令模式"><a href="#第十六章-命令模式" class="headerlink" title="第十六章 命令模式"></a>第十六章 命令模式</h1><ol>
<li>本质是封装请求，是一种封装方法调用的方式，用来消除调用操作的对象和实现操作的对象之间的耦合，最简单的命令对象是一个操作和用以调用这个操作的对象的结合体，所有命令对象都有一个执行操作，用来调用命令对象所绑定的操作</li>
<li><p>代码示例（界面中广告的关闭打开操作）</p>
 <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// StopAd command class</span></span><br><span class="line"><span class="keyword">var</span> StopAd = <span class="function"><span class="keyword">function</span> <span class="params">(adObject)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.ad = adObject;</span><br><span class="line">&#125;;</span><br><span class="line">StopAd.prototype.execute = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.ad.stop();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// StartAd command class</span></span><br><span class="line"><span class="keyword">var</span> StartAd = <span class="function"><span class="keyword">function</span> <span class="params">(adObject)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.ad = adObject;</span><br><span class="line">&#125;;</span><br><span class="line">StartAd.prototype.execute = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.ad.start();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用命令对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ads = getAds();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = ads.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="comment">// Create command objects for starting and stopping the ad</span></span><br><span class="line">    <span class="keyword">var</span> startCommand = <span class="keyword">new</span> StartAd(ads[i]);</span><br><span class="line">    <span class="keyword">var</span> stopCommand = <span class="keyword">new</span> StopAd(ads[i]);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Create the UI elements that will execute the command on click</span></span><br><span class="line">    <span class="keyword">new</span> UIButton(<span class="string">'Start '</span> + ads[i].name, startCommand);</span><br><span class="line">    <span class="keyword">new</span> UIButton(<span class="string">'stop '</span> + ads[i].name, stopCommand);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 这样做的结果就是，我只需要实例化一个命令对象，然后调用命令对象的execute方法，而不用考虑adObject的具体实现，解耦调用操作的对象和实现操作的对象。就是在调用者和实际执行者中间封装一层，封装的这一层可以很灵活的实现各种操作。</p>
</li>
</ol>
<h1 id="第十七章-职责链模式"><a href="#第十七章-职责链模式" class="headerlink" title="第十七章 职责链模式"></a>第十七章 职责链模式</h1><ol>
<li>通过实现一个隐式地对请求进行处理的对象组成的链，这其中每个对象都有机会处理请求，并且会传递请求，从而消除请求的发送者和接收者之间的耦合。</li>
<li>借助职责链模式，可以动态的选择由那个对象处理请求，可以比在开发期就动态的指定处理请求的对象高效的多。但是因为接收者是隐式的，所以无法得知具体将有哪个对象处理它，而且不能保证请求一定会被处理，代码调试也会变的更复杂一些。</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>这本书从2015.11.03开始看，到2016.01.06看完，花了64天，基本上是每天看一章，然后就开始敲代码。总体感觉这本书还可以，算是对设计模式有了一个基本的入门吧。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[高性能JavaScript读书笔记]]></title>
      <url>http://ldllidonglin.github.io/blog/2015/10/30/2015-10-30-%E9%AB%98%E6%80%A7%E8%83%BDJavaScript%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="1-Loading-and-Execution"><a href="#1-Loading-and-Execution" class="headerlink" title="1 Loading and Execution"></a>1 Loading and Execution</h1><p>由于js的加载和执行会阻塞页面其他操作，影响用户体验，所以需要解决这个问题，解决的办法主要还是：</p>
<ol>
<li>script标签的defer（IE），asyc（HTML5）属性，实现这个标签异步加载，不影响其他的下载及页面渲染。</li>
<li>动态创建script标签。</li>
<li>XHR下载js代码，注入到页面中。<a id="more"></a>
<h1 id="2-Data-Access"><a href="#2-Data-Access" class="headerlink" title="2 Data Access"></a>2 Data Access</h1></li>
<li>在同一个函数中需要多次读取同一个对象的属性时，最好将它存入一个局部变量，避免多余的属性查找带来的性能开销。</li>
</ol>
<h1 id="3-DOM-Scripting"><a href="#3-DOM-Scripting" class="headerlink" title="3 DOM Scripting"></a>3 DOM Scripting</h1><ol>
<li>HTML collections每次获取其length属性都会进行查询操作，文档更新时，这个collections会自动更新，所以要将length属性缓存，同时把集合拷贝到数组中也可以提高性能。</li>
<li>会发生重排的情况有：<br>1）添加或删除可见的DOM<br>2）DOM的位置改变<br>3）DOM尺寸改变<br>4）内容改变（文本改版或者图片被另一个不同尺寸的所替代）<br>5）浏览器窗口改变尺寸</li>
<li>获取元素的offsetTop、scrollTop、clientTop序列属性、getComputedStyle()会导致浏览器立即重排，破坏了浏览器自身的性能优化方案（通过队列修改优化重排过程，而不是一次修改就重排一次）。所以不要在布局信息改变时来获取以上属性。</li>
<li>优化方法：<ol>
<li>用修改class的方式来实现批量属性修改；</li>
<li>将元素脱离文档流，作完操作后再插入回文档（隐藏、文档碎片、clone）；</li>
<li>动画元素用绝对定位</li>
</ol>
</li>
</ol>
<h1 id="4-Algorithms-and-Flow-Control"><a href="#4-Algorithms-and-Flow-Control" class="headerlink" title="4 Algorithms and Flow Control"></a>4 Algorithms and Flow Control</h1><ol>
<li>尽量避免使用for-in循环，改善循环性能的最好办法是减少每次迭代中的运算量。</li>
<li>当条件判断很多时，选用switch而不是ifelse，无论从代码易读性还是从性能考虑。</li>
<li>当很多离散数值需要测试判断时，使用查表法可以消除条件判断，提高性能。</li>
</ol>
<h1 id="5-Strings-and-Regular-Expressions"><a href="#5-Strings-and-Regular-Expressions" class="headerlink" title="5 Strings and Regular Expressions"></a>5 Strings and Regular Expressions</h1><ol>
<li>IE7-，字符串连接操作用数组的join会更快。</li>
</ol>
<h1 id="6-Responsive-Interfaces"><a href="#6-Responsive-Interfaces" class="headerlink" title="6 Responsive Interfaces"></a>6 Responsive Interfaces</h1><ol>
<li>js代码运行时间不应该超过100毫秒，对于长耗时的代码，可以用定时器分段执行，从而不会堵塞UI线程。</li>
<li>Web Worker是独立开辟线程，不会影响页面的主线程。纯数据，和用户浏览器UI没有关系的长耗时脚本可以用Web Worker。</li>
</ol>
<h1 id="7-Ajax"><a href="#7-Ajax" class="headerlink" title="7 Ajax"></a>7 Ajax</h1><ol>
<li>对于不需要缓存的资源。可以和服务器端配合，一次请求多个资源，把多个资源打包成一个字符串，然后js接收后再把数据分割，比如一次请求多个图片，可以减少HTTP请求。 </li>
</ol>
<h1 id="8-Programming-Practices"><a href="#8-Programming-Practices" class="headerlink" title="8 Programming Practices"></a>8 Programming Practices</h1><ol>
<li>尽量避免使用eval()和Function()，定时器第一个参数也不要传入字符串，因为这会导致重新启动一个解释器，非常耗费性能。</li>
<li>声明数组和对象尽量使用对象字面量，而不是用构造函数。</li>
<li>对于需要重复判断的条件，比如事件绑定，可以在第一次判定后就覆盖整个函数，后续调用就不需要再判断了，当然这部分判断也可以提前进行。</li>
<li>位运算可以代替很多纯数学操作，比如判断奇偶，用和1进行位与运算就可以代替了，偶数和1进行位与操作结果是0，奇数结果是1。</li>
<li>原生方法是最快的。</li>
</ol>
<h1 id="9-Building-and-Deploying-High-Performance-JavaScript-Applications"><a href="#9-Building-and-Deploying-High-Performance-JavaScript-Applications" class="headerlink" title="9 Building and Deploying High-Performance JavaScript Applications"></a>9 Building and Deploying High-Performance JavaScript Applications</h1><ol>
<li>开发部署过程需要合并、压缩文件，设置缓存时间。</li>
</ol>
<h1 id="10-Tools"><a href="#10-Tools" class="headerlink" title="10 Tools"></a>10 Tools</h1><ol>
<li>网页变慢时，分析资源加载时间及脚本的执行时间，寻找优化点。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[编程题]]></title>
      <url>http://ldllidonglin.github.io/blog/2015/10/11/2015-10-11-%E7%BC%96%E7%A8%8B%E9%A2%98/</url>
      <content type="html"><![CDATA[<h2 id="1-利用字符重复出现的次数，编写一个方法，实现基本的字符串压缩功能。比如，字符串“aabcccccaaa”经压缩会变成“a2b1c5a3”。若压缩后的字符串没有变短，则返回原先的字符串。"><a href="#1-利用字符重复出现的次数，编写一个方法，实现基本的字符串压缩功能。比如，字符串“aabcccccaaa”经压缩会变成“a2b1c5a3”。若压缩后的字符串没有变短，则返回原先的字符串。" class="headerlink" title="1 利用字符重复出现的次数，编写一个方法，实现基本的字符串压缩功能。比如，字符串“aabcccccaaa”经压缩会变成“a2b1c5a3”。若压缩后的字符串没有变短，则返回原先的字符串。"></a>1 利用字符重复出现的次数，编写一个方法，实现基本的字符串压缩功能。比如，字符串“aabcccccaaa”经压缩会变成“a2b1c5a3”。若压缩后的字符串没有变短，则返回原先的字符串。</h2><a id="more"></a>
<p>方法：</p>
<pre><code><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">def zipString(iniString):</span><br><span class="line">    <span class="attribute">i</span>=0;</span><br><span class="line">    <span class="attribute">result</span>=<span class="string">''</span>;</span><br><span class="line">    <span class="attribute">num</span>=1;</span><br><span class="line">    <span class="attribute">currentChar</span>=<span class="string">''</span>;</span><br><span class="line">    <span class="keyword">while</span> i&lt;len(iniString):</span><br><span class="line">        <span class="keyword">if</span>(<span class="attribute">i</span>==0):</span><br><span class="line">            result+=iniString[i];</span><br><span class="line">            <span class="attribute">currentChar</span>=iniString[i];</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span>(iniString[i]==currentChar):</span><br><span class="line">                num+=1;</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="attribute">currentChar</span>=iniString[i];</span><br><span class="line">                result+=str(num);</span><br><span class="line">                result+=currentChar</span><br><span class="line">                <span class="attribute">num</span>=1;</span><br><span class="line">        i+=1;</span><br><span class="line">    result+=str(num);</span><br><span class="line">    <span class="keyword">if</span>(len(result)&lt;len(iniString)):</span><br><span class="line">        return result;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        return iniString;</span><br></pre></td></tr></table></figure>
</code></pre><h2 id="2-请实现一个算法，确定一个字符串的所有字符是否全都不同。这里我们要求不允许使用额外的存储结构。给定一个string-iniString，请返回一个bool值-True代表所有字符全都不同，False代表存在相同的字符。保证字符串中的字符为ASCII字符。字符串的长度小于等于3000。"><a href="#2-请实现一个算法，确定一个字符串的所有字符是否全都不同。这里我们要求不允许使用额外的存储结构。给定一个string-iniString，请返回一个bool值-True代表所有字符全都不同，False代表存在相同的字符。保证字符串中的字符为ASCII字符。字符串的长度小于等于3000。" class="headerlink" title="2. 请实现一个算法，确定一个字符串的所有字符是否全都不同。这里我们要求不允许使用额外的存储结构。给定一个string iniString，请返回一个bool值,True代表所有字符全都不同，False代表存在相同的字符。保证字符串中的字符为ASCII字符。字符串的长度小于等于3000。"></a>2. 请实现一个算法，确定一个字符串的所有字符是否全都不同。这里我们要求不允许使用额外的存储结构。给定一个string iniString，请返回一个bool值,True代表所有字符全都不同，False代表存在相同的字符。保证字符串中的字符为ASCII字符。字符串的长度小于等于3000。</h2><p>方法：遍历，发现不同就跳出循环，return false</p>
<pre><code><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def checkDifferent(iniString):</span><br><span class="line">    <span class="built_in">i</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">i</span>&lt;len(iniString):</span><br><span class="line">        <span class="built_in">j</span>=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">j</span>&lt;len(iniString) and (iniString[<span class="built_in">j</span>]!=iniString[<span class="built_in">i</span>] or <span class="built_in">i</span>==<span class="built_in">j</span>):</span><br><span class="line">            <span class="built_in">j</span>+=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">j</span>!=len(iniString)):</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">i</span>+=<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">i</span>!=len(iniString) :</span><br><span class="line">       <span class="keyword">return</span> False;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">       <span class="keyword">return</span> True;</span><br></pre></td></tr></table></figure>
</code></pre><h1 id="3-请实现一个算法，在不使用额外数据结构和储存空间的情况下，翻转一个给定的字符串-可以使用单个过程变量-。给定一个string-iniString，请返回一个string，为翻转后的字符串。保证字符串的长度小于等于5000。"><a href="#3-请实现一个算法，在不使用额外数据结构和储存空间的情况下，翻转一个给定的字符串-可以使用单个过程变量-。给定一个string-iniString，请返回一个string，为翻转后的字符串。保证字符串的长度小于等于5000。" class="headerlink" title="3.请实现一个算法，在不使用额外数据结构和储存空间的情况下，翻转一个给定的字符串(可以使用单个过程变量)。给定一个string iniString，请返回一个string，为翻转后的字符串。保证字符串的长度小于等于5000。"></a>3.请实现一个算法，在不使用额外数据结构和储存空间的情况下，翻转一个给定的字符串(可以使用单个过程变量)。给定一个string iniString，请返回一个string，为翻转后的字符串。保证字符串的长度小于等于5000。</h1><pre><code><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">def reverseString(iniString):</span><br><span class="line">    <span class="attribute">i</span>=0;</span><br><span class="line">    <span class="keyword">if</span>(len(iniString)%<span class="attribute">2</span>==0):</span><br><span class="line">        <span class="attribute">tag</span>=len(iniString)/2;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="attribute">tag</span>=int(len(iniString)/2)+1;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;tag):</span><br><span class="line">        <span class="attribute">temp</span>=iniString[i];</span><br><span class="line">        <span class="attribute">t</span>=len(iniString)-1-i;</span><br><span class="line">        <span class="keyword">if</span>(<span class="attribute">i</span>==0):</span><br><span class="line">            <span class="attribute">iniString</span>=iniString[t]+iniString[1:];</span><br><span class="line">            <span class="attribute">iniString</span>=iniString[<span class="keyword">:len</span>(iniString)-1]+temp;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="attribute">iniString</span>=iniString[0:i]+iniString[t]+iniString[i+1:];</span><br><span class="line">            <span class="attribute">iniString</span>=iniString[0:t]+temp+iniString[t+1:];</span><br><span class="line">        i+=1;</span><br><span class="line">    return iniString;</span><br></pre></td></tr></table></figure>
</code></pre>]]></content>
      
        <categories>
            
            <category> 笔试 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笔试 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常见排序算法的实现和比较]]></title>
      <url>http://ldllidonglin.github.io/blog/2015/09/17/2015-09-17-%E5%B8%B8%E8%A7%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%92%8C%E6%AF%94%E8%BE%83/</url>
      <content type="html"><![CDATA[<h2 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1. 冒泡排序"></a>1. 冒泡排序</h2><p>比较相邻的两个元素,前一个比后一个大则交换，一趟下来，最大的就冒到最后面了。<br>    <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var testArray=[<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">67</span>,<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span> <span class="params">(argument)</span> &#123;</span></span><br><span class="line">    <span class="keyword">for</span>(var <span class="built_in">i</span>=<span class="number">0</span>;<span class="built_in">i</span>&lt;argument.<span class="built_in">length</span>;<span class="built_in">i</span>++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(var <span class="built_in">j</span>=<span class="number">0</span>;<span class="built_in">j</span>&lt;argument.<span class="built_in">length</span>-<span class="built_in">i</span>;<span class="built_in">j</span>++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(argument[<span class="built_in">j</span>]&gt;argument[<span class="built_in">j</span>+<span class="number">1</span>])&#123;</span><br><span class="line">                var temp=argument[<span class="built_in">j</span>];</span><br><span class="line">                argument[<span class="built_in">j</span>]=argument[<span class="built_in">j</span>+<span class="number">1</span>];</span><br><span class="line">                argument[<span class="built_in">j</span>+<span class="number">1</span>]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> argument;</span><br><span class="line">&#125;</span><br><span class="line">alert(bubbleSort(testArray));</span><br></pre></td></tr></table></figure></p>
<pre><code>*冒泡排序是稳定的，因为只有前一个比后一个大时才交换位置，相等不交换，时间复杂度是O(n^2)*
</code></pre><a id="more"></a>
<h2 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2. 选择排序"></a>2. 选择排序</h2><p>从第二个开始，都和第一个比，比第一个小则交换位置，一趟下来，最小放在第一个位置<br>    <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectSort</span> <span class="params">(argument)</span> &#123;</span></span><br><span class="line">    <span class="keyword">for</span>(var <span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span> &lt; argument.<span class="built_in">length</span>; <span class="built_in">i</span>++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(var <span class="built_in">j</span> = <span class="built_in">i</span>+<span class="number">1</span>; <span class="built_in">j</span> &lt; argument.<span class="built_in">length</span>; <span class="built_in">j</span>++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(argument[<span class="built_in">j</span>] &lt; argument[<span class="built_in">i</span>]) &#123;</span><br><span class="line">                var temp = argument[<span class="built_in">j</span>];</span><br><span class="line">                argument[<span class="built_in">j</span>] = argument[<span class="built_in">i</span>];</span><br><span class="line">                argument[<span class="built_in">i</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> argument;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><em>选择排序不是稳定的，比如5 8 5 2 9 第一遍的时候一个5会和2交换,两个5的顺序就被破坏了.时间复杂度是O(n^2)</em></p>
<h2 id="3-快速排序"><a href="#3-快速排序" class="headerlink" title="3. 快速排序"></a>3. 快速排序</h2><p>采用分治的思想，一趟排序后就把比标准值小的放在标准值左边，比标准值大的就放在标准值右边。然后再对这标准值左右两半采用同样的方法。过程为:确定一个标准值key，比如为arr[right],然后两边往中间找，只要比key值小，left++,left就会停留在第一个比key大的值，同理，right会停留在第一个比key小的值，这两个值互相交换，直到left&gt;=right，我这里标准值是在右边(左边),则这时标准值和最后的right(left)位交换,则实现了一趟排序。</p>
<ul>
<li>方法1  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">function <span class="built_in">quickSort</span>(arr, <span class="keyword">left</span>, <span class="keyword">right</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">left</span> &gt;= <span class="keyword">right</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> key = arr[<span class="keyword">right</span>];</span><br><span class="line">        <span class="keyword">var</span> lp = <span class="keyword">left</span>;</span><br><span class="line">        <span class="keyword">var</span> rp = <span class="keyword">right</span>;</span><br><span class="line">        <span class="keyword">while</span>(lp &lt; rp) &#123;</span><br><span class="line">            <span class="keyword">while</span>(arr[lp] &lt;= key &amp;&amp; lp &lt; rp) &#123;</span><br><span class="line">                lp++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(arr[rp] &gt;= key &amp;&amp; lp &lt; rp) &#123;</span><br><span class="line">                rp--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> temp = arr[lp];</span><br><span class="line">            arr[lp] = arr[rp];</span><br><span class="line">            arr[rp] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = arr[<span class="keyword">right</span>];</span><br><span class="line">        arr[<span class="keyword">right</span>] = arr[rp];</span><br><span class="line">        arr[rp] = temp;</span><br><span class="line">        <span class="built_in">quickSort</span>(arr, <span class="keyword">left</span>, lp-<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">quickSort</span>(arr, rp+<span class="number">1</span>, <span class="keyword">right</span>);</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><em>时间复制度为O(nlogn),不稳定</em><br><a href="http://wuchong.me/blog/2014/02/09/algorithm-sort-summary/" target="_blank" rel="noopener">参考文章</a></p>
<ul>
<li>方法2(浪费空间，但是思路更清晰)<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function <span class="built_in">quickSort</span>(arr) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> middle = <span class="type">Math</span>.floor(arr.length / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">var</span> tag = arr.splice(middle, <span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">left</span> = [];</span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">right</span> = [];</span><br><span class="line">    <span class="comment">//console.log(arr);</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] &lt;= tag) &#123;</span><br><span class="line">            <span class="keyword">left</span>.push(arr[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">right</span>.push(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">quickSort</span>(<span class="keyword">left</span>).concat([tag], <span class="built_in">quickSort</span>(<span class="keyword">right</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">52</span>,<span class="number">423</span>,<span class="number">4235</span>,<span class="number">234</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">32</span>];</span><br><span class="line">console.log(<span class="built_in">quickSort</span>(arr));</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="4-直接插入排序"><a href="#4-直接插入排序" class="headerlink" title="4. 直接插入排序"></a>4. 直接插入排序</h2><p>默认左边是已经排好序的，从第一个开始，两层循环，只要左边的大于右边的就向右移动一个位置，直到出现小于右边第一个数的那个数出现，此时arr[j] = arr[i]<br>    <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var a = [<span class="number">9</span>,<span class="number">5</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">2</span>]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort</span><span class="params">(arr)</span> &#123;</span></span><br><span class="line">    <span class="keyword">for</span>(var <span class="built_in">i</span> = <span class="number">1</span>; <span class="built_in">i</span> &lt; arr.<span class="built_in">length</span>; <span class="built_in">i</span>++) &#123;</span><br><span class="line">        var temp = arr[<span class="built_in">i</span>];</span><br><span class="line">        <span class="keyword">for</span>(var <span class="built_in">j</span> = <span class="built_in">i</span><span class="number">-1</span>; <span class="built_in">j</span> &gt;= <span class="number">0</span> &amp;&amp; arr[<span class="built_in">j</span>] &gt; temp; <span class="built_in">j</span>--) &#123;</span><br><span class="line">            arr[<span class="built_in">j</span>+<span class="number">1</span>] = a[<span class="built_in">j</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        arr[<span class="built_in">j</span> + <span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line">console.<span class="built_in">log</span>(insertSort(a))</span><br></pre></td></tr></table></figure></p>
<p><em>时间复杂度为最好的情况是原始数据都已经全部排好序，while循环执行次数是0,时间复复杂度是O(n),最坏的情况是倒序，则时间复杂度是O(n^2),这个排序是稳定的</em></p>
<h2 id="5-希尔排序"><a href="#5-希尔排序" class="headerlink" title="5. 希尔排序"></a>5. 希尔排序</h2><p>是分组进行直接插入排序。因为分组后，没组内是越接近与有序，所以直接插入排序会更快，所以整体的时间复杂度是优于直接插入排序的。</p>
<h2 id="6-堆排序"><a href="#6-堆排序" class="headerlink" title="6. 堆排序"></a>6. 堆排序</h2><p>先创建最大堆，然后把栈顶元素与当前最大堆的最后一个元素交换，最大堆元素个数减一，判断交换元素后的堆是不是最大堆了，如果不是，重建最大堆，然后重复第一步即将栈顶元素和最后一个元素交换。</p>
]]></content>
      
        <categories>
            
            <category> 面试 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 面试 </tag>
            
            <tag> 排序算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript高级程序设计-笔记]]></title>
      <url>http://ldllidonglin.github.io/blog/2015/09/07/2015-09-07-javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="javascript高级程序设计第二版读书笔记"><a href="#javascript高级程序设计第二版读书笔记" class="headerlink" title="javascript高级程序设计第二版读书笔记"></a>javascript高级程序设计第二版读书笔记</h1><h2 id="1-第二章-script元素"><a href="#1-第二章-script元素" class="headerlink" title="1.第二章 script元素"></a>1.第二章 script元素</h2><ol>
<li>async 实现异步脚本，表示不妨碍其他脚本或资源的下载，两个async脚本的执行顺序是不确定的，所以要确保不会互相依赖。同时这段脚本最好不要修改dom，因为不确定是在DOMContentLoaded事件前发生还是后发生。</li>
<li>defer 表示脚本可以延迟到文档全部加载完成后再执行，延迟脚本<a id="more"></a>
</li>
</ol>
<h2 id="2-第三章-基本概念"><a href="#2-第三章-基本概念" class="headerlink" title="2.第三章 基本概念"></a>2.第三章 基本概念</h2><ol>
<li>ECMAScript5引入了严格模式，IE10+支持;</li>
<li>javascript中共有5中基本数据类型:Null Undefined Number String Boolean和一种复杂类型Object。所有值都是上述类型之一。</li>
<li>typeof是一个操作符，并不是一个函数，返回的值就只有6种可能 </li>
</ol>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>undefined</td>
<td>未定义或未赋值</td>
</tr>
<tr>
<td>number</td>
<td>数字</td>
</tr>
<tr>
<td>string</td>
<td>字符串</td>
</tr>
<tr>
<td>boolean</td>
<td>布尔型</td>
</tr>
<tr>
<td>object</td>
<td>null或者Object</td>
</tr>
<tr>
<td>function</td>
<td>函数</td>
</tr>
</tbody>
</table>
<p>所以可以用typeof来判断一个变量是否定义，也是唯一的一个方法，目前没法区分未定义和未赋值，因为对于js来说，这两种情况等效。</p>
<ol start="3">
<li>Object的每个实例都有一个constructor属性，保存着创建当前实例的函数</li>
<li>递增和递减操作符，一元加减操作符，应用于不同的值的规则<br>1）字符串，使用Number转换后再执行递增或递减操作<br>2）false活true，转换成数字后再执行相应操作<br>3）对象，调用valueOf()方法后再执行相应操作</li>
<li>未指定返回值的函数会返回一个undefined值。</li>
<li>不给构造函数传递参数，可以省略后面那一对括号，比如 var a= new Object;</li>
<li>8进制字面量在严格模式下是无效的，会抛出错误；</li>
<li>浮点数如果小数点后面没有任何数字，或则本身就是一个整数，那会解析成整数。比如var floatNum1=1.;//1;var floatNum2=10.0//10;</li>
<li>Number.MIN_VALUE和Number.MAX_VALUE保存着最小值和最大值5e-324,1.797693e+308.如果超出了范围，返回的是Infinity或则-Infinity.可以使用isFinite来判断某个值值是不是在范围内，如果是会返回true。</li>
<li><p>有三个函数可以把非数值转换为数值：Number(),parseInt(),parseFloat()，后两个只能作用于字符串。Number不够合理，经常使用的是parseInt，忽略字符串前面的空格，直到找到第一个非空格字符，如果第一个不是数字或者负号，会返回NaN，直到遇到非数字字符，只返回前面的数字字符，parseInt 认识十六进制和八进制，但不认识科学计数法。浮点数会转换成整数，parseFloat认识科学计数法，但不认识十六进制和八进制，可以得到浮点数，但是如果是整数，那得到的也是整数为了避免错误的解析，parseInt无论在什么情况下都要带上第二个参数即指定是二进制还是八、十、十六进制，如果第二个参数是省略或者是0，将以十进制来解析，如果小于2或者大于36返回NaN</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="literal">true</span>)==<span class="number">1</span> <span class="comment">//1  false:0;</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="number">1</span>)==<span class="number">1</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">null</span>)==<span class="number">0</span>;</span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">undefined</span>) <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">""</span>)==<span class="number">0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">"12n"</span>) <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">"0xf"</span>)==<span class="number">15</span> 有效的<span class="number">16</span>进制会转成十进制整数</span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"AF"</span>,<span class="number">16</span>) <span class="comment">//175</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"AF"</span>) <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">"10.0"</span>)<span class="comment">//10</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">"090.5"</span>)<span class="comment">//90.5</span></span><br><span class="line">其余全是<span class="literal">NaN</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="3-第四章-变量、作用域、内存问题"><a href="#3-第四章-变量、作用域、内存问题" class="headerlink" title="3.第四章 变量、作用域、内存问题"></a>3.第四章 变量、作用域、内存问题</h2><ol>
<li>基本类型值在内存中占据固定大小空间，放在栈内存中，Object放在堆内存中。</li>
<li>2012年后所有的现代浏览器都是使用标记-清除算法进行内存管理，每隔一段时间就会从根开始，遍历所有对象，获得能获取和不能获取的对象，不能获取的对象将会被回收。离开作用域的值会被标记为可以回收，下一次垃圾回收时将被回收。</li>
</ol>
<h2 id="4-第五章-引用类型"><a href="#4-第五章-引用类型" class="headerlink" title="4.第五章 引用类型"></a>4.第五章 引用类型</h2><ol>
<li>ECMAScript5新增Array.isArray()函数来检测数组.</li>
<li>数组的valueOf()返回的还是数组，toString()返回的是逗号分隔的字符串。</li>
<li>new Array(3)得到的是[]，构造函数只是设置了length属性，但是真正的数组并没有生成。new Array(“3”)得到的是[‘3’]，new Array(1,2,3)得到的是[1,2,3]。用Array构造函数可以省略new操作符。[1,2,]这样声明在现代浏览器中会生成length为2的数组，但是在IE8-会生成[1,2,undefined]</li>
<li>prototype是保存所有实例方法的真正所在，不可枚举。</li>
<li><p>基本类型值不是对象，比如字符串和数字,但是它们有方法，可以通过基本包装类型.原理是这样的：</p>
 <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s=<span class="string">"dddd"</span>;</span><br><span class="line"><span class="keyword">var</span> s2=s.substring(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//其实后台会自动完成以下处理</span></span><br><span class="line"><span class="keyword">var</span> s=<span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"dddd"</span>);  <span class="comment">//String Number Boolean就是基本包装类型</span></span><br><span class="line"><span class="keyword">var</span> s2.s.subtring(<span class="number">2</span>);   <span class="comment">//显示创建的话得到的实例为object，不建议这么使用。</span></span><br><span class="line">s=<span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>slice和substring 第二个参数是指定子字符串最后一个字符后面的位置,即这个位置的字符不会进入字符串。substr第二个参数指定的是返回的字符串个数。substring第一个参数比第二个参数大时，会自动交换两个参数的值。</p>
</li>
<li>slice会把传入的负值与字符串长度相加。substring会把所有负值参数都转换为0。substr会把第一个负的参数加上字符串长度，第二个负的参数为0，因为第二个参数是指定要返回的字符串个数，传入负值，所以应该为0;</li>
<li>Math.ceil()向上舍入 Math.floor()向下舍入 Math.round()四舍五入 </li>
<li>encodeURI主要用于对整个URI进行编码,不会对本身属于URI的特殊字符进行编码,比如冒号、正斜杠、问号、井号。encodeURIComponent()主要用于对URI的某一段进行编码.会对它发现的所有非标准字符进行编码。相应的有decodeURI和decodeURIComponent方法.</li>
<li>利用apply可以把数组变成一个个参数传递给函数的特性，利用Math.max方法可以快速求得数组的最大值,最小值也是一样的方法。<figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var num=[<span class="number">1</span>,<span class="number">23</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">Math.max.apply(Math,num);  <span class="comment">//第一个参数可以是null undefined</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="5-第六章-面向对象的程序设计"><a href="#5-第六章-面向对象的程序设计" class="headerlink" title="5.第六章 面向对象的程序设计"></a>5.第六章 面向对象的程序设计</h2><h3 id="1-创建对象的方法"><a href="#1-创建对象的方法" class="headerlink" title="1. 创建对象的方法"></a>1. 创建对象的方法</h3><p>1) 工厂模式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o=<span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    o.name=name;</span><br><span class="line">    o.age=age;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1=createPerson(<span class="string">"lidonglin"</span>,<span class="number">23</span>);</span><br></pre></td></tr></table></figure></p>
<p><em>缺点</em>：没法解决对象识别，即没法知道一个对象的类型<br>2) 构造函数模式<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(name,age)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">    <span class="keyword">this</span>.age=age;</span><br><span class="line">    <span class="keyword">this</span>.sayname=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person=<span class="keyword">new</span> Person(<span class="string">"lidonglin"</span>,<span class="number">23</span>);</span><br><span class="line">alert(person <span class="keyword">instanceof</span> Person); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p>
<p><em>缺点</em>：sayname方法在每次创建一个Person对象实例会都重新创建一个，没法共享,浪费内存。<br>3) 原型模式<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.name=<span class="string">"lidonglin"</span>;</span><br><span class="line">Person.prototype.age=<span class="number">23</span>;</span><br><span class="line">Person.prototype.sayName=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> person1=<span class="keyword">new</span> Person();</span><br><span class="line">person1.sayName(); <span class="comment">//lidonglin</span></span><br></pre></td></tr></table></figure></p>
<p><em>说明1:</em> 只要创建了一个新函数，默认会给该函数创建一个prototype属性，这个属性指向函数的原型对象。同时，默认所有的原型对象都自动有一个constructor属性，这个属性包含一个指向prototype属性所在的函数的指针。即Person.prototype.constructor指向Person。调用构造函数得到的实例，在chrome ff safari中内部包含一个指针,这个指针指向构造函数的原型,即person.<strong>proto</strong>指向Person.prototype 所以实例和构造函数没有直接的联系。实例会继承原型的constructor属性，所以实例的constructor指向构造函数.<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aa</span> <span class="params">(argument)</span> <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">        // body...</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span>;</span></span><br><span class="line"><span class="keyword">var</span> b=<span class="keyword">new</span> aa();</span><br><span class="line">console.log(b.__proto__===aa.prototype); <span class="comment">//true</span></span><br><span class="line">console.log(b<span class="function">.<span class="keyword">constructor</span>===<span class="title">aa</span>);</span>         <span class="comment">//true b的constructor是继承来的</span></span><br><span class="line">console.log(b.prototype);                <span class="comment">//undefined</span></span><br><span class="line">console.log(aa.__proto__);               <span class="comment">//</span></span><br><span class="line">console.log(aa.prototype);</span><br></pre></td></tr></table></figure></p>
<p><em>说明2:</em> 可以简单的用一个包含所有属性和方法的对象字面量来重写整个原型对象。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype=&#123;</span><br><span class="line">    name:<span class="string">"lidonglin"</span>,</span><br><span class="line">    age:<span class="number">29</span>,</span><br><span class="line">    sayName:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>这样做的结果就是constructor属性不再指向Person了，这样就隔断了实例和最初原型对象之间的关系。<br><em>缺点</em>：如果原型中有引用类型值的属性的话，那一个实例改变这个属性值，会改变所有实例中的这个值。<br>4）组合使用构造函数模式和原型模式<br>实例属性放在构造函数中，共享属性和方法放在原型模式中</p>
<pre><code><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(name,age)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">    <span class="keyword">this</span>.age=age;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype=&#123;</span><br><span class="line">    constructor:Person,</span><br><span class="line">    sayName:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre><h3 id="2-继承的各种实现方法："><a href="#2-继承的各种实现方法：" class="headerlink" title="2. 继承的各种实现方法："></a>2. 继承的各种实现方法：</h3><p>1)原型链：<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span></span>()&#123;</span><br><span class="line">    <span class="built_in">this</span>.color=[<span class="string">"red"</span>,<span class="string">"blue"</span>];</span><br><span class="line">&#125;</span><br><span class="line">SubType.prototype=<span class="keyword">new</span> <span class="type">SuperType</span>();</span><br><span class="line"><span class="keyword">var</span> instance1=<span class="keyword">new</span> <span class="type">SubType</span>();</span><br><span class="line">instance1.color.push(<span class="string">"yellow"</span>);</span><br><span class="line">alert(instance1.color);        <span class="comment">//red,blue,yellow</span></span><br><span class="line"><span class="keyword">var</span> instance2=<span class="keyword">new</span> <span class="type">SubType</span>();</span><br><span class="line">alert(instance2.color)         <span class="comment">//red,blue,yellow</span></span><br></pre></td></tr></table></figure></p>
<p>这种方法的问题就是，如果超类有引用型属性，那这个属性会被所有的SubType实例共享，一个实例修改这个属性，其他实例也会有同样的效果。所有很少单独使用。</p>
<p>2)借用构造函数：<br>就是在子类型构造函数内部调用超类型构造函数，这样子类型就会拥有超类型的所有属性了，各个实例是各自拥有属性的副本，不会相互影响，和原型链相比还有有一个优势就是可以传入参数，存在的一个问题就是方法都在构造函数中，就没有函数复用了，因此也很少单独使用。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span><span class="params">(name)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span><span class="params">(age)</span></span>&#123;</span><br><span class="line">     Super.call(<span class="keyword">this</span>，“lidonglin”);</span><br><span class="line">     <span class="keyword">this</span>.age=age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>tips:</strong>为了确保SuperType的构造函数不会重写子类型的属性，在调用超类型的构造函数之后，再定义子类型自由的属性。<br>3)原型链+借用构造函数法：<br>使用原型链实现对原型属性和方法的继承，通过构造函数实现对实例属性的继承。解决了前两个方法的不足之处，其实就是优势互补。是最常用的继承模式。<br>4)原型式继承<br>    <figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var Person=&#123;</span><br><span class="line">    name:<span class="string">'li'</span>,</span><br><span class="line">    friends:[<span class="string">'li'</span>]</span><br><span class="line">&#125;</span><br><span class="line">var otherPerson=Object.<span class="built_in">create</span>(Person);  //得到一个原型指定super的空对象，所以他可以共享父对象的所有属性</span><br><span class="line">/* Object.<span class="built_in">create</span>原生支持</span><br><span class="line">其内部原理就是</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">crate</span><span class="params">(o)</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    F.prototype=o;</span><br><span class="line">    <span class="keyword">return</span> new F();</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></p>
<pre><code>在不需要创建构造函数时，只是想让两个对象之间保持相识的时候，可以使用原型式继承，此时friends这个数组(引用类型)是被所有实例共享的。
</code></pre><h3 id="3-函数内的this指针问题："><a href="#3-函数内的this指针问题：" class="headerlink" title="3.函数内的this指针问题："></a>3.函数内的this指针问题：</h3><p>this对象是在运行时基于函数的执行环境绑定的，在全局函数中，this指向window，当函数作为某个对象的方法调用时，this执行调用这个方法的对象，匿名函数的执行环境具有全局性。通常指向window。如果是普通的调用函数，那函数内部的this指针指向的是全局变量，即window对象。如果是构造函数的话，那this指针指向的就是构造出来的对象实例。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name=<span class="string">"donglin"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayName</span><span class="params">(name)</span></span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name);      </span><br><span class="line">&#125;</span><br><span class="line">sayName(<span class="string">"ab"</span>);</span><br><span class="line"><span class="comment">//运行结果是：donglin</span></span><br><span class="line"> <span class="keyword">var</span> name=<span class="string">"donglin_g"</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">sayName</span><span class="params">(name)</span></span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.name=name;</span><br><span class="line">         alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> oo=<span class="keyword">new</span> sayName(<span class="string">"ab"</span>);</span><br><span class="line"><span class="comment">//运行结果：ab</span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>匿名函数中的this指针：</em></strong><br>下面代码中匿名函数中的this就是指向window对象，并不会指向外部作用域对象。因为函数调用的时候，活动对象会自动获得this，arguments这两个对象，而此时调用匿名函数，this首先搜索自身作用域，此时this就是window，所以不会再向上搜索。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name=<span class="string">"the window"</span>;</span><br><span class="line"><span class="keyword">var</span> object=&#123;</span><br><span class="line">            name:<span class="string">"the object"</span>,</span><br><span class="line">            getName:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">                 <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">alert(object.getName()());</span><br><span class="line"><span class="comment">//运行结果是 "the window"</span></span><br></pre></td></tr></table></figure></p>
<p>为了实现能访问外部作用域的this，把外部作用域中的this对象保存在一个闭包能够访问到的变量里，就可以让闭包访问该对象了。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name=<span class="string">"the window"</span>;</span><br><span class="line"><span class="keyword">var</span> object=&#123;</span><br><span class="line">            name:<span class="string">"the object"</span>,</span><br><span class="line">            getName:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">                <span class="keyword">var</span> that=<span class="keyword">this</span>;</span><br><span class="line">                 <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> that.name;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">alert(object.getName()());</span><br><span class="line"><span class="comment">//运行结果是 "the object"</span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>tips:</em></strong>构造函数和普通函数的唯一区别，就在于调用它们的方式不对，任何函数，只要通过new操作符来调用，那他就可以成为构造函数，不通过new操作符，那就是普通函数。<br>时间绑定函数中的this指向时间处理程序对应的dom对象.<br>Object.create函数不会调用构造函数<br>当把函数A作为值传递给一个函数时，函数A里的this会变为window,但是可以通过bind将实例和方法一切传递给函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params"></span>) </span>&#123; &#125; </span><br><span class="line">Thing.prototype.foo = <span class="string">"bar"</span>; </span><br><span class="line">Thing.prototype.logFoo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;      </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doIt</span>(<span class="params">method</span>) </span>&#123;</span><br><span class="line">      method();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing();</span><br><span class="line">doIt(thing.logFoo.bind(thing)); <span class="comment">//logs bar</span></span><br></pre></td></tr></table></figure></p>
<p>bind可以代替任何一个函数或者方法的this,即便它没有赋值给实例的初始prototype<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">Thing.prototype.foo = <span class="string">"bar"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logFoo</span>(<span class="params">aStr</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(aStr, <span class="keyword">this</span>.foo);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing();</span><br><span class="line">logFoo.bind(thing)(<span class="string">"using bind"</span>); <span class="comment">//logs "using bind bar"</span></span><br><span class="line">logFoo.apply(thing, [<span class="string">"using apply"</span>]); <span class="comment">//logs "using apply bar"</span></span><br><span class="line">logFoo.call(thing, <span class="string">"using call"</span>); <span class="comment">//logs "using call bar"</span></span><br><span class="line">logFoo(<span class="string">"using nothing"</span>); <span class="comment">//logs "using nothing undefined"</span></span><br></pre></td></tr></table></figure></p>
<h2 id="6-第七章-函数表达式"><a href="#6-第七章-函数表达式" class="headerlink" title="6.第七章 函数表达式"></a>6.第七章 函数表达式</h2><ol>
<li>递归函数应该始终使用arguments.callee来递归地调用自身，不要使用函数名–函数名可能会发生变化，argument.callee是一个指向正在执行的函数的指针</li>
<li><p>每个函数在被调用时，会创建一个执行环境及相应的作用域链。然后使用arguments和其他命名参数来初始化函数的活动对象。函数调用时都会自动取得两个特殊变量：this和arguments,内部函数在搜索这两个变量时,只会搜索到其活动对象为止,因此永远不可能直接访问外部函数中的这两个变量.因此下面这个实例的匿名函数在执行时,活动对象中this是就是全局变量window，所以返回的是the window</p>
 <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name=<span class="string">"the window"</span>;</span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    name:<span class="string">"my object"</span>,</span><br><span class="line">    getNameFunc:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">alert(obj.getNameFunc()());   <span class="comment">//the window</span></span><br></pre></td></tr></table></figure>
<p> 可以把外部函数的this保存在一个匿名函数可以访问的变量中,即使在返回后，that也引用这外部函数中的this,所以这是就会返回”my object”</p>
 <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">getNameFunc:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that=<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> that.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">alert(obj.getNameFunc()());   <span class="comment">//my object</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="7-第八章-BOM对象"><a href="#7-第八章-BOM对象" class="headerlink" title="7.第八章 BOM对象"></a>7.第八章 BOM对象</h2><ol>
<li>修改window.location、location.href会调用location.assign()方法，所以这三个操作效果是一样的，并会在历史记录中生成一条记录，用replace（）方法就不会生成新纪录。location.reload()重新加载,但是给true参数后,则会从服务器重新加载,否则可能从缓存中加载.</li>
<li>localtion中所有属性有：</li>
</ol>
<table>
<thead>
<tr>
<th>属性名</th>
<th>例子</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>hash</td>
<td>#main</td>
<td>返回url中的hash,没有就返回空</td>
</tr>
<tr>
<td>host</td>
<td><a href="http://www.ldllidonglin.github.io:80" target="_blank" rel="noopener">www.ldllidonglin.github.io:80</a></td>
<td>带端口号</td>
</tr>
<tr>
<td>hostname</td>
<td><a href="http://www.ldllidonglin.github.io" target="_blank" rel="noopener">www.ldllidonglin.github.io</a></td>
<td>不带端口号</td>
</tr>
<tr>
<td>href</td>
<td><a href="http://www.ldllidonglin.github.io" target="_blank" rel="noopener">http://www.ldllidonglin.github.io</a></td>
<td>完整url。localtion.toString()也返回这个值</td>
</tr>
<tr>
<td>port</td>
<td>80</td>
<td>端口号</td>
</tr>
<tr>
<td>protool</td>
<td>http</td>
<td>协议</td>
</tr>
<tr>
<td>search</td>
<td>?q=javascript</td>
<td>返回查询字符串</td>
</tr>
</tbody>
</table>
<ol start="3">
<li>navigator中appCodeName通常都是Mozilla</li>
<li>history无法获取用户访问过的url，但是可以go(n) forward() back()实现后退前进，有一个length属性保存这该窗口所有历史记录，第一次打开页面时为0，go函数参数可以是字符串，会跳转到最近的那个包含这段字符串的连接，可以向前或者向后.</li>
</ol>
<h2 id="8-第九章-客户端检测"><a href="#8-第九章-客户端检测" class="headerlink" title="8 第九章 客户端检测"></a>8 第九章 客户端检测</h2><ol>
<li>能力检测，必须检测实际用到的特性</li>
<li>至今基于webkit的浏览器，都在ua中表示为Mozilla/5.0 和基于GecKo引擎的浏览器一致.</li>
<li><p>ua检测浏览器和引擎的代码</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> client=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> engine=&#123;</span><br><span class="line">        ie:<span class="number">0</span>,</span><br><span class="line">        gecko:<span class="number">0</span>,</span><br><span class="line">        webkit:<span class="number">0</span>,</span><br><span class="line">        khtml:<span class="number">0</span>,</span><br><span class="line">        opera:<span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">//具体的版本</span></span><br><span class="line">        ver:<span class="literal">null</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//浏览器</span></span><br><span class="line">    <span class="keyword">var</span> browser=&#123;</span><br><span class="line">        ie:<span class="number">0</span>,</span><br><span class="line">        firefox:<span class="number">0</span>,</span><br><span class="line">        konq:<span class="number">0</span>,</span><br><span class="line">        opera:<span class="number">0</span>,</span><br><span class="line">        chrome:<span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">        ver:<span class="literal">null</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//平台、设备和操作系统</span></span><br><span class="line">    <span class="keyword">var</span> system=&#123;</span><br><span class="line">        win:<span class="literal">false</span>,</span><br><span class="line">        mac:<span class="literal">false</span>,</span><br><span class="line">        x11:<span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">//移动设备</span></span><br><span class="line">        iphone:<span class="literal">false</span>,</span><br><span class="line">        ipod:<span class="literal">false</span>,</span><br><span class="line">        ipad:<span class="literal">false</span>,</span><br><span class="line">        ios:<span class="literal">false</span>,</span><br><span class="line">        android:<span class="literal">false</span>,</span><br><span class="line">        nokiaN:<span class="literal">false</span>,</span><br><span class="line">        winMobile:<span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">//游戏系统</span></span><br><span class="line">        wii:<span class="literal">false</span>,</span><br><span class="line">        ps:<span class="literal">false</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ua = navigator.userAgent;</span><br><span class="line">    <span class="comment">//首先检测opera,因为在ua中没法检测出opera</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.opera)&#123;</span><br><span class="line">        engine.ver=browser.ver=<span class="built_in">window</span>.opera.version();</span><br><span class="line">        engine.opera=browser.opera=<span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="regexp">/AppleWebKit\/(\S+)/</span>.test(ua))&#123;     <span class="comment">//判断是否是webit内核</span></span><br><span class="line">        engine.ver=<span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</span><br><span class="line">        engine.webkit=<span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//再确定是Chrome还是Safari</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="regexp">/Chrome\/(\S+)/</span>.test(ua))&#123;</span><br><span class="line">            browser.ver=<span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</span><br><span class="line">            browser.chrome=<span class="built_in">parseFloat</span>(browser.ver);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/Version\/(\S+)/</span>.test(ua))&#123;</span><br><span class="line">            browser.ver = <span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</span><br><span class="line">            browser.safari = <span class="built_in">parseFloat</span>(browser.ver);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//近似地确定版本号</span></span><br><span class="line">            <span class="keyword">var</span> safariVersion = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (engine.webkit &lt; <span class="number">100</span>)&#123;</span><br><span class="line">                safariVersion = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (engine.webkit &lt; <span class="number">312</span>)&#123;</span><br><span class="line">                safariVersion = <span class="number">1.2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (engine.webkit &lt; <span class="number">412</span>)&#123;</span><br><span class="line">                safariVersion = <span class="number">1.3</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                safariVersion = <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            browser.safari = browser.ver = safariVersion;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="regexp">/KHTML\/(\S+)/</span>.test(ua)||<span class="regexp">/Konqueror\/([^;]+)/</span>.test(ua))&#123;</span><br><span class="line">        engine.ver=browser.ver=<span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</span><br><span class="line">        engine.khtml=browser.konq=<span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="regexp">/rv:([^\)]+)\) Gecko\/\d&#123;8&#125;/</span>.test(ua))&#123;</span><br><span class="line">        engine.ver=<span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</span><br><span class="line">        engine.gecko=<span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line">        <span class="comment">//确定是不是Firefox</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="regexp">/Firefox\/(\S+)/</span>.test(ua))&#123;</span><br><span class="line">            browser.ver=<span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</span><br><span class="line">            browser.firefox=<span class="built_in">parseFloat</span>(browser.ver);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="regexp">/MSIE ([^;]+)/</span>.test(ua))&#123;</span><br><span class="line">        engine.ver=browser.ver=<span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</span><br><span class="line">        engine.ie=browser.ie=<span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//检测平台</span></span><br><span class="line">    <span class="keyword">var</span> p=navigator.platform;</span><br><span class="line">    system.win=p.indexOf(<span class="string">"Win"</span>)==<span class="number">0</span>;</span><br><span class="line">    system.mac=p.indexOf(<span class="string">"Mac"</span>)==<span class="number">0</span>;</span><br><span class="line">    system.x11=p.indexOf(<span class="string">"X11"</span>)||(p.indexOf(<span class="string">"Linux"</span>)==<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//检测 Windows 操作系统</span></span><br><span class="line">    <span class="keyword">if</span> (system.win)&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/Win(?:dows )?([^do]&#123;2&#125;)\s?(\d+\.\d+)?/</span>.test(ua))&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">RegExp</span>[<span class="string">"$1"</span>] == <span class="string">"NT"</span>)&#123;</span><br><span class="line">                <span class="keyword">switch</span>(<span class="built_in">RegExp</span>[<span class="string">"$2"</span>])&#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">"5.0"</span>:</span><br><span class="line">                        system.win = <span class="string">"2000"</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">"5.1"</span>:</span><br><span class="line">                        system.win = <span class="string">"XP"</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">"6.0"</span>:</span><br><span class="line">                        system.win = <span class="string">"Vista"</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">"6.1"</span>:</span><br><span class="line">                        system.win = <span class="string">"7"</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        system.win = <span class="string">"NT"</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">RegExp</span>[<span class="string">"$1"</span>] == <span class="string">"9x"</span>)&#123;</span><br><span class="line">                system.win = <span class="string">"ME"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                system.win = <span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//移动设备</span></span><br><span class="line">    system.iphone = ua.indexOf(<span class="string">"iPhone"</span>) &gt; <span class="number">-1</span>;</span><br><span class="line">    system.ipod = ua.indexOf(<span class="string">"iPod"</span>) &gt; <span class="number">-1</span>;</span><br><span class="line">    system.ipad = ua.indexOf(<span class="string">"iPad"</span>) &gt; <span class="number">-1</span>;</span><br><span class="line">    system.nokiaN = ua.indexOf(<span class="string">"NokiaN"</span>) &gt; <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">//windows mobile</span></span><br><span class="line">    <span class="keyword">if</span> (system.win == <span class="string">"CE"</span>)&#123;</span><br><span class="line">        system.winMobile = system.win;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (system.win == <span class="string">"Ph"</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="regexp">/Windows Phone OS (\d+.\d+)/</span>.test(ua))&#123;;</span><br><span class="line">            system.win = <span class="string">"Phone"</span>;</span><br><span class="line">            system.winMobile = <span class="built_in">parseFloat</span>(<span class="built_in">RegExp</span>[<span class="string">"$1"</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//检测 iOS 版本</span></span><br><span class="line">    <span class="keyword">if</span> (system.mac &amp;&amp; ua.indexOf(<span class="string">"Mobile"</span>) &gt; <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/CPU (?:iPhone )?OS (\d+_\d+)/</span>.test(ua))&#123;</span><br><span class="line">            system.ios = <span class="built_in">parseFloat</span>(<span class="built_in">RegExp</span>.$<span class="number">1.</span>replace(<span class="string">"_"</span>, <span class="string">"."</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            system.ios = <span class="number">2</span>; <span class="comment">//不能真正检测出来，所以只能猜测</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//检测 Android 版本</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/Android (\d+\.\d+)/</span>.test(ua))&#123;</span><br><span class="line">        system.android = <span class="built_in">parseFloat</span>(<span class="built_in">RegExp</span>.$<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//游戏系统</span></span><br><span class="line">    system.wii = ua.indexOf(<span class="string">"Wii"</span>) &gt; <span class="number">-1</span>;</span><br><span class="line">    system.ps = <span class="regexp">/playstation/i</span>.test(ua);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        engine:engine,</span><br><span class="line">        browser:browser,</span><br><span class="line">        system:system</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure>
</li>
<li><p>优先使用能力检测，在需要知道平台和确切浏览器的时候才用ua检测</p>
</li>
</ol>
<h2 id="9-第10章-DOM"><a href="#9-第10章-DOM" class="headerlink" title="9 第10章 DOM"></a>9 第10章 DOM</h2><ol>
<li>文档对象模型(DOM)是HTML和XML文档的编程接口</li>
<li>cloneNode在IE8-会复制绑定在元素上的事件，其他浏览器都不会。</li>
<li>document对象是HTMLDocument(继承自Document类型)的一个实例,Document节点nodeType是9,nodeName是“#docuemnt”,nodeValue是null。文档只有一个子节点，就是<html>元素，document.documentElement可以访问到。document.body指向body元素</html></li>
<li>document.domain设置为”wrox.com”后，就不能再设置为”p2p.wrox.com”。</li>
<li>getElementsByTagName得到的是HTMLCollection支持按名称访问，及可以向方括号中传入字符串，比如images[“myImage”],或者使用namedItem(“myImage”);</li>
<li>取得所有元素可以使用getElementsByTagName(“*”);</li>
<li>document对象上有几个特殊集合 </li>
</ol>
<table>
<thead>
<tr>
<th>name</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>document.forms</td>
<td>所有表单</td>
</tr>
<tr>
<td>document.images</td>
<td>所有的img元素</td>
</tr>
<tr>
<td>document.links</td>
<td>带href属性的a元素</td>
</tr>
<tr>
<td>document.anchors</td>
<td>带name属性的a元素</td>
</tr>
</tbody>
</table>
<ol start="8">
<li>div.getAttribute(“class”)==div.className。getAttribute可以取得自定义特性，自定义特性应该加上data-前缀。直接以点号获取是没法获取到自定义属性的。</li>
<li>有两类特色的属性，一是style，getAttribute得到的是css文本，但是直接用点号获取的是一个对象。二是onclick,getAttribute得到的是js代码的字符串,直接用点号访问获取的是一个js函数。</li>
<li>一般情况下不使用getAttribute这个函数，只有在获取自定义特性值时才使用这个函数.</li>
<li>element.childNodes在IE8-是不会包括元素之间的空白符的，IE9+和其他浏览器会.</li>
<li>Text节点nodeName是#text,nodeValue==data是其包含文本;text.length==text.nodeValue.length==text.data.length属性包含字符数目(换行符的长度==3);text.appendData(text)可以将text文本添加到末尾;设置nodeValue时,html为被转义,所以直接nodeValue=”\&lt;strong>other\&lt;/strong>“;不会出现dom节点;createTextNode(“\&lt;strong>hello\&lt;/strong>“)可以创建文本节点;node.normalize()方法可以将多个文本节点合并成一个节点。</li>
<li>DocumentFragment可以在需要多次修改dom是使用，createDocumentFragment()创建文档碎片，然后把需要插入的节点插入到文档碎片中，然后再向DOM中一次性插入文档碎片.</li>
</ol>
<h2 id="10-第11章-DOM扩展"><a href="#10-第11章-DOM扩展" class="headerlink" title="10 第11章 DOM扩展"></a>10 第11章 DOM扩展</h2><ol>
<li>对DOM的两个主要扩展就是SelectorsAPI和HTML5,前者是增加了querySelector()、querySelectorAll()、matchesSelector()三个方法。后者就是增加了getElementsByClassName()、innerHTML属性;outerHTML是包含自身的。</li>
<li>insertAdjacentHTML(),第一个参数有4个值:beforebegin、afterbegin、beforeend、afterend.分别是元素前、元素内第一个位置、元素内最后一个位置、元素后;</li>
<li>在需要遍历元素的时候，因为childNode在很多浏览器是会包括文本节点的，所以可以使用children属性，他只包括元素节点，但是IE8-会包括注释节点。</li>
<li>innerText和outerText在读取文本值的时候效果是一样的。都是对象起始和结束标签内的所有文本，包括子节点的。但是在设置文本的时候，outerText会连带把标签本身都替换了。fireFox不支持innerText,也没有outerText,innerText的作用可以用textContent代替。</li>
</ol>
<h2 id="11-第12章-DOM2和DOM3"><a href="#11-第12章-DOM2和DOM3" class="headerlink" title="11 第12章 DOM2和DOM3"></a>11 第12章 DOM2和DOM3</h2><ol>
<li>对于使用短划线的css属性名，必须转成驼峰大小写形式，才能通过JavaScript来访问.float是例外，IE8-下是styleFloat,现代浏览器已经支持直接使用style.float来访问了.</li>
<li>document.defaultView.getComputedStyle(myDiv,null)可以获得计算后的样式,第二个参数支持伪元素字符串，比如”:after”;IE8-没有这个方法，但是可以用myDiv.currentStyle来获得计算后的样式，没有border属性。因为css属性的默认值在不同浏览器有可能不同，所以如果需要某个特定属性的默认值，应该手工指定.</li>
<li><p>document.styleSheets获得link和style设置的样式表。也可以通过获取link和style标签来获得样式表对象，IE8-使用element.styleSheet，其他支持element.sheet。假设要获得页面中第一个样式表中的第一个样式规则，代码可以如下</p>
 <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var sheet = document.styleSheets[<span class="number">0</span>];</span><br><span class="line">var rules = sheet.cssRules <span class="params">||</span> sheet.rules; <span class="regexp">//</span>取得规则列表</span><br><span class="line">var rule = rules[<span class="number">0</span>]; <span class="regexp">//</span>取得第一条规则</span><br><span class="line">alert(rule.selectorText); <span class="regexp">//</span><span class="string">"div.box"</span></span><br><span class="line">alert(rule.style.cssText); <span class="regexp">//</span>完整的 CSS 代码</span><br><span class="line">alert(rule.style.backgroundColor); <span class="regexp">//</span><span class="string">"blue"</span></span><br><span class="line">alert(rule.style.width); <span class="regexp">//</span><span class="string">"100px"</span></span><br><span class="line">alert(rule.style.height); <span class="regexp">//</span><span class="string">"200px"</span></span><br><span class="line">sheet.insertRule(<span class="string">"body &#123; background-color: silver &#125;"</span>, <span class="number">0</span>); <span class="regexp">//</span>DOM 方法</span><br></pre></td></tr></table></figure>
</li>
<li><p>dom的offsetWidth和offsetHeight属性包括边框和内边距。offsetLeft和offsetTop表示和已经定位的父容器(relative、absolute)的距离。clientWidth和clientHeight是内容+内边距，不包括边框。clientLeft和clientTop就是边框的宽度</p>
</li>
<li>元素自带getBoundingClientRect(),这个方法返回一个矩形对象,自带left、top、right、bottom属性,chrome高级版本还会给出width和height属性,给出了元素在页面中相对视口的位置.width=right-left,height=bottom-top;IE8-文档左上角坐标是(2,2),需要处理兼容性。</li>
<li>DOM2提供了遍历和范围的接口，NodeIterator和TreeWalker可以对DOM执行深度优先的遍历。范围是选择DOM结构中特定部分，然后再实行相应的操作。IE8-只支持文本范围.</li>
</ol>
<h2 id="12-第13章-事件"><a href="#12-第13章-事件" class="headerlink" title="12 第13章 事件"></a>12 第13章 事件</h2><ol>
<li>DOM事件流中，IE首先提出冒泡，Netscape提出捕获。在IE9+ 及其他浏览器中，都支持冒泡和捕获。规范规定在捕获阶段，目标是不会触发事件的，但是IE9+和其他浏览器都会在捕获阶段触发事件对象上的事件。所以就有两个机会在目标对象上操作事件。</li>
<li>element.onclick是DOM0级事件，同时被认为是元素方法，所以事件处理函数是在element的作用域中运行的。而且是冒泡的。同时event对象是window下的一个属性</li>
<li>DOM2级事件用addEventListener()和removeEventListener()来制定和删除事件处理程序。也是在元素作用域内运行的，第三个参数默认是false，为冒泡阶段执行。可添加多个事件处理函数，按顺序执行。添加匿名函数无法移除，因为移除必须和添加时使用的参数相同才行。</li>
<li>IE8-只支持冒泡，而且它是使用attachEvent()和detachEvent()来指定和移除的。而且事件处理程序作用域是window。添加多个处理函数时，触发顺序和堆栈一样。会传递一个参数event到事件处理函数中</li>
<li><p>以下是夸浏览器的事件处理程序：</p>
 <figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventUtil=&#123;</span><br><span class="line">    addHandler:<span class="keyword">function</span>(element,<span class="keyword">type</span>,handler)&#123;</span><br><span class="line">        <span class="keyword">if</span>(element<span class="variable">.addEventListener</span>)&#123;            <span class="comment">//chrome ...之类的浏览器方式</span></span><br><span class="line">            element<span class="variable">.addEventListener</span>(<span class="keyword">type</span>,handler,false);<span class="comment">//默认是false</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(element<span class="variable">.attachEvent</span>)&#123;           <span class="comment">//IE</span></span><br><span class="line">            element<span class="variable">.attachEvent</span>(<span class="string">"on"</span>+<span class="keyword">type</span>,handler);  <span class="comment">//IE不支持捕获</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            element[<span class="string">"on"</span>+<span class="keyword">type</span>]=handler;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    removeHandler:<span class="keyword">function</span>(element,<span class="keyword">type</span>,handler)&#123;</span><br><span class="line">        <span class="keyword">if</span>(element<span class="variable">.removeEventListener</span>)&#123;</span><br><span class="line">            element<span class="variable">.removeEventListener</span>(<span class="keyword">type</span>,handler,false);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(element<span class="variable">.detachEvent</span>)&#123;</span><br><span class="line">            element<span class="variable">.detachEvent</span>(<span class="string">"on"</span>+<span class="keyword">type</span>,handler)&#123;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            element[<span class="string">"on"</span>+<span class="keyword">type</span>]=<span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    getEvent:<span class="keyword">function</span>(<span class="keyword">event</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">event</span>?<span class="keyword">event</span>:window<span class="variable">.event</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    getTarget:<span class="keyword">function</span>(<span class="keyword">event</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">event</span><span class="variable">.target</span>||<span class="keyword">event</span><span class="variable">.srcElement</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    getRelatedTarget:<span class="keyword">function</span>(<span class="keyword">event</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">event</span><span class="variable">.relatedTarget</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">event</span><span class="variable">.relatedTarget</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">event</span><span class="variable">.toElement</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">event</span><span class="variable">.toElement</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">event</span><span class="variable">.fromElement</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">event</span><span class="variable">.fromElement</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    preventDefault:<span class="keyword">function</span>(<span class="keyword">event</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">event</span><span class="variable">.preventDefault</span>)&#123;</span><br><span class="line">            <span class="keyword">event</span><span class="variable">.preventDefault</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">event</span><span class="variable">.returnValue</span>=false;   直接<span class="keyword">return</span> false;也是可以的</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    stopPropagation:<span class="keyword">function</span>(<span class="keyword">event</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">event</span><span class="variable">.stopPropagation</span>)&#123;</span><br><span class="line">            <span class="keyword">event</span><span class="variable">.stopPropagation</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">event</span><span class="variable">.cancelBubble</span>=true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    getRelatedTarget: <span class="keyword">function</span>(<span class="keyword">event</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">event</span><span class="variable">.relatedTarget</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">event</span><span class="variable">.relatedTarget</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">event</span><span class="variable">.toElement</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">event</span><span class="variable">.toElement</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">event</span><span class="variable">.fromElement</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">event</span><span class="variable">.fromElement</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    getWheelDelta: <span class="keyword">function</span>(<span class="keyword">event</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">event</span><span class="variable">.wheelDelta</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> (client<span class="variable">.engine</span><span class="variable">.opera</span> &amp;&amp; client<span class="variable">.engine</span><span class="variable">.opera</span> &lt; <span class="number">9</span><span class="variable">.5</span> ?</span><br><span class="line">                -<span class="keyword">event</span><span class="variable">.wheelDelta</span> : <span class="keyword">event</span><span class="variable">.wheelDelta</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="keyword">event</span><span class="variable">.detail</span> * <span class="number">40</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    getCharCode: <span class="keyword">function</span>(<span class="keyword">event</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (typeof <span class="keyword">event</span><span class="variable">.charCode</span> == <span class="string">"number"</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">event</span><span class="variable">.charCode</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">event</span><span class="variable">.keyCode</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>img对象在设置了src后就会开始下载，但是script对象只有在设置了src并添加到文档中后才会开始下载。这两个都有load事件，但是IE8-不支持script上的load事件</p>
</li>
<li>event.clientX和event.clientY是视口坐标，pageX和pageY是页面坐标。IE8-支持pageX但是可以通过视口坐标和scroll坐标计算得到。screenX是屏幕坐标。offetX和offetY是相对于目标元素边界的坐标</li>
<li>针对mouseover和mouseout有event.relatedTarget这个属性来获得相关元素，IE8-可以用fromElement和toElement来获得。</li>
<li>mousewheel时间有一个wheelData，向前是120的倍数，向后是-120的倍数。Firefox是在event.detail中，向前是-3的倍数，向后是3的倍数。</li>
<li>键盘事件中，keydown是按下任意键，keypress是字符键，随后触发文本事件textInput事件，再触发文keyup事件。event.keyCode对应着键盘的上字符的ASCII码,用String.fromCharCode可以获得字符，但是对于特殊字符和小键盘上的需要特殊处理。小键盘对应着小写字母，比如小键盘上的1，对应着a。textInput事件的event属性上有data属性对应着输入的字符，inputMethod属性对应着输入方式，只有按下能够输入实际字符的键时才会触发</li>
<li>减少内存占用和有优化性能有两个方式：事件委托和在不需要的时候移除事件处理程序。移除事件处理程序时需要注意当移除DOM时，如果这个DOM绑定了事件处理程序，在移除前需先移除其绑定的事件处理程序。</li>
</ol>
<h2 id="13-第14章-表单脚本"><a href="#13-第14章-表单脚本" class="headerlink" title="13 第14章 表单脚本"></a>13 第14章 表单脚本</h2><ol>
<li>通过document.forms可以获得页面中所有表单，表单元素有length属性表示表单中控件的数量。elements属性是表单中所有控件的集合。reset()重置所有控件为默认值;submit()为提交表单。</li>
<li>submit按钮或者图片按钮就可以提交表单，此时会触发表单的submit事件，就可以在相应的事件处理函数中进行相应处理，阻止默认事件就可以阻止表单提交。在这里可以处理重复提交的问题。</li>
<li>表单中的控件都有focus和blur方法，可以在页面的load事件中，调用第一个表单字段的focus()方法，使焦点转移到第一个字段。</li>
<li>文本框有select方法和select事件，value属性既是文本框中的输入文本。要取得选中的文本，HTML5有text.selectionStart和selectionEnd两个属性，所以text.value.substring(text.selectionStart,text.selectionEnd)可以获得选中的文本，但是IE8-不支持这两个属性，可以使用document.selection.createRange().text来获得。</li>
<li><p>选择部分文本的跨浏览器方法：</p>
 <figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title">selectText</span>(textbox, startIndex, stopIndex)&#123;</span><br><span class="line">    if (textbox.setSelectionRange)&#123;</span><br><span class="line">        textbox.setSelectionRange(startIndex, stopIndex);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (textbox.createTextRange)&#123;                 //IE8-</span><br><span class="line">        var <span class="keyword">range</span> = textbox.createTextRange();</span><br><span class="line">        <span class="keyword">range</span>.collapse(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">range</span>.moveStart(<span class="string">"character"</span>, startIndex);</span><br><span class="line">        <span class="keyword">range</span>.moveEnd(<span class="string">"character"</span>, stopIndex - startIndex);</span><br><span class="line">        <span class="keyword">range</span>.<span class="keyword">select</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    textbox.focus();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>操作剪贴板有copy paste等事件，event.clipboardData.setData()、getData()可以对剪贴板进行操作。复制选中的文本到剪贴板中代码如下</p>
 <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.target.nodeName === <span class="string">'INPUT'</span> || <span class="keyword">this</span>.target.nodeName === <span class="string">'TEXTAREA'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.target.select();</span><br><span class="line">    <span class="keyword">this</span>.selectedText = <span class="keyword">this</span>.target.value;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> range = document.createRange();</span><br><span class="line">    <span class="keyword">var</span> selection = window.getSelection();</span><br><span class="line"></span><br><span class="line">    range.selectNodeContents(<span class="keyword">this</span>.target);</span><br><span class="line">    selection.addRange(range);</span><br><span class="line">    <span class="keyword">this</span>.selectedText = selection.toString();</span><br><span class="line">&#125;</span><br><span class="line">document.execCommand(<span class="string">"copy"</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>选择框有options属性保存着所有option，selectedIndex是选中项的索引，多选只保存第一项的值，没有选中的话是-1，size属性可以设置选择框中可见的行数，默认是0；其type属性不是select-one就是select-multiple。value属性由当前选中项决定，首先是选中项的value属性，既是是设定的空值或者空字符串，但是如果没有设定value属性，那就是该选中项的文本（IE8除外），多选只会取第一项。change事件只要选中了选项就会触发和其他表单不一样。</p>
</li>
<li>option有一个index属性保存着这个选项在option中的索引。selected是一个是否被选中的布尔值。</li>
<li>selectbox2.appendChild(selectbox1.options[0])；这段代码将会把原来的元素从其父节点中移除，然后添加到指定的位置</li>
<li>富文本编辑器有两种方式，1是在页面中嵌入一个包含空HTML页面的iframe，必须在页面加载完后，通过设置designMode=‘on’，那这个页面就可以被编辑。2是给任何元素设置contenteditable=true，然后这个元素包含的任何文本内容就都可以编辑了，利用document.exeCommand()可以对该区域执行很多操作。queryCommandState()可以返回是否对选中文本执行了某个操作。</li>
<li>富文本编辑很多时候是使用iframe而非表单控件实现，所以要提交富文本编辑器中的html就需要添加一个隐藏的表单字段，然后从iframe中提出出innerHTML赋给这个表单字段的value。</li>
</ol>
<h2 id="14-第15章-使用canvas绘图"><a href="#14-第15章-使用canvas绘图" class="headerlink" title="14 第15章 使用canvas绘图"></a>14 第15章 使用canvas绘图</h2><ol>
<li><p>使用canvas要先给它这是height和width，canvas上是有两套width和height值的，在css上只能设置这个dom的大小，而不能改变绘图区域的大小，默认是300*150，直接在canvas标签上设置是既可以更改dom大小，又可以更改绘图区域大小。如果不直接在canvas上设置width和height，而只在css上设置，则会拉伸绘图的内容，比如</p>
 <figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">canvas&#123;</span><br><span class="line"><span class="symbol">    width:</span><span class="number">600</span>px;</span><br><span class="line"><span class="symbol">    height:</span> <span class="number">300</span>px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="params">&lt;canvas&gt;</span><span class="params">&lt;/canvas&gt;</span></span><br><span class="line">js..</span><br><span class="line">context.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">300</span>,<span class="number">150</span>);</span><br></pre></td></tr></table></figure>
<p> 实际出来的效果是把这个绘制的300<em>150大小的矩形拉伸到600</em>300了。布满整个DOM,DOM大小是600*300。</p>
</li>
<li>context可以调用save方法，把所有的设置比如颜色，线宽等保存进入一个栈结构，要想回到之前保存的设置，就可以调用restore()方法。</li>
<li>webgl视口坐标原点在canvas元素的左下角，x轴和y轴的正方向分别是向右和向上。<br>改变视口大小可以使用gl.viewport(0,0,drawing.widht,drawing.height)；视口内部的坐标原点在视口的中心点。</li>
<li>webgl一般不会抛出错误，为了知道是否有错误发生，必须在调用某个可能出错的方法后，手动调用gl.getError()方法，获得错误。</li>
</ol>
<h2 id="15-第16章-HTML5脚本编程"><a href="#15-第16章-HTML5脚本编程" class="headerlink" title="15 第16章 HTML5脚本编程"></a>15 第16章 HTML5脚本编程</h2><ol>
<li>postMessage方法，可以向当前页面中的iframe或者当前页弹出的窗口发送消息。 然后接收方window对象上有message事件，可以监听这个事件作接收消息的处理。</li>
<li>拖动先触发dragstart事件，然后不断触发drag事件，当某个元素被拖动到一个有效的放置目标上时，会依次发生dragenter、dragover、dragleave事件，如果放置在目标元素中，会触发drop中。</li>
<li>dragstart事件中可以调用event.dataTransfer.setData(“text”,”some text”)；在drop中也可以调用getData来获取数据。</li>
<li>HTML5为所有HTML元素规定了一个draggable属性，表示元素是否可以拖动，图像和链接的draggable属性自动被设置成了true，其他的都是false。IE10+支持</li>
</ol>
<h2 id="16-第17章-错误处理与调试"><a href="#16-第17章-错误处理与调试" class="headerlink" title="16 第17章 错误处理与调试"></a>16 第17章 错误处理与调试</h2><ol>
<li>ECMA3引入了try-catch语句，catch语句返回一个error对象，它有message、name属性。同时可以在后面添加finally子句，这个子句是一定会执行的，甚至在try或者catch里又return语句，也不能阻止finally子句的执行。</li>
<li>将错误上报可以使用img的src属性来发送请求，把错误信息当参数发送get请求。</li>
</ol>
<h2 id="17-第18章-JavaScript和XML"><a href="#17-第18章-JavaScript和XML" class="headerlink" title="17 第18章 JavaScript和XML"></a>17 第18章 JavaScript和XML</h2><h2 id="18-第19章-E4X"><a href="#18-第19章-E4X" class="headerlink" title="18 第19章 E4X"></a>18 第19章 E4X</h2><h2 id="19-第20章-JSON"><a href="#19-第20章-JSON" class="headerlink" title="19 第20章 JSON"></a>19 第20章 JSON</h2><ol>
<li>JSON可以表示简单值、对象、数组三种类型的值，不支持undefined</li>
<li>JSON属性值必须加双引号，对象可以不用。</li>
<li>JSON.stringify()第二个参数可以实现过滤功能，可以是一个数组也可以是一个函数。如果是一个数组，那数组内的元素就是要过滤得到的属性名，如果是一个函数，那会传给函数两个参数，属性名和属性值。返回属性值，如果返回的是undefined，那这个属性会被删除掉。第三个参数用于控制缩进和空白符，传入一个数字表示空白符的长度，最长为10，如果传入的是一个字符串，则这个字符串被用作缩进字符。</li>
<li>JSON.parse()也可以接收第二个参数，是一个函数，传给这个函数的两个参数是属性名和属性值。返回属性值。</li>
</ol>
<h2 id="20-第21章-Ajax与Comet"><a href="#20-第21章-Ajax与Comet" class="headerlink" title="20 第21章 Ajax与Comet"></a>20 第21章 Ajax与Comet</h2><ol>
<li>默认情况下，在发送XHR请求的同时，还会发送以下头部信息</li>
</ol>
<table>
<thead>
<tr>
<th>name</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>Accept</td>
<td>浏览器能够处理的内容类型。</td>
</tr>
<tr>
<td>Accept-Charset</td>
<td>浏览器能够显示的字符集。</td>
</tr>
<tr>
<td>Accept-Encoding</td>
<td>浏览器能够处理的压缩编码。</td>
</tr>
<tr>
<td>Accept-Language</td>
<td>浏览器当前设置的语言。</td>
</tr>
<tr>
<td>Connection</td>
<td>浏览器与服务器之间连接的类型。</td>
</tr>
<tr>
<td>Cookie</td>
<td>当前页面设置的任何 Cookie。</td>
</tr>
<tr>
<td>Host</td>
<td>发出请求的页面所在的域 。</td>
</tr>
<tr>
<td>Referer</td>
<td>发出请求的页面的URI。注意，HTTP规范将这个头部字段拼写错了，而为保证与规范一致，也只能将错就错了。（这个英文单词的正确拼法应该是 referrer。）</td>
</tr>
<tr>
<td>User-Agent</td>
<td>浏览器的用户代理字符串。</td>
</tr>
</tbody>
</table>
<ol start="2">
<li>可以在open之后，send之前调用setRequestHeader方法，设置自定义的请求头信息。getRequestHeader()可以获得相应的相应头部信息。getAllResponseHeader()则可以取得一个包含所有头部信息的长字符串。</li>
<li>xhr2增加了FormData，new FormData()可以直接append值对，然后把FormData传给send方法，发送到服务端。方便之处在于不必明确的在xhr对象上设置请求头部。</li>
<li>xhr2还增加了timeout属性，在给timeout属性设置一个值后，如果在规定的时间没有接收到相应，就会触发timeout事件。</li>
<li>xhr2还增加了overrideMimeType方法，用于重写xhr相应的MIME类型。</li>
<li>进度事件，progress事件的event.target属性是xhr对象，但是增加了lengthComputable表示进度信息是否可用的布尔值、position表示已经接收的字节数、totalSize表示总字节数三个属性。onpress需在open之前添加</li>
<li>xhr对象使用CORS来实现跨域，但是不能使用setRequestHeader设置自定义头部，不能发送和接收cookie，调用getAllResponseHeader方法会放回空字符串</li>
<li>Comet是对Ajax的进一步扩展，让服务器几乎能够实时地向客户端推送数据，实现手段主要有长轮询和HTTP流。</li>
<li>Web Sockets是一种与服务器进行全双工、双向通信的信道，不使用HTTP协议，而使用自定义的协议。也必须使用不同的Web服务器。可以只经过一次http请求，就可以做到源源不断的消息传送。</li>
</ol>
<h2 id="21-第22章-高级技巧"><a href="#21-第22章-高级技巧" class="headerlink" title="21 第22章 高级技巧"></a>21 第22章 高级技巧</h2><ol>
<li><p>可以创建作用域安全的构造函数，确保在缺少new操作符时调用构造函数不会改变错误的环境对象，因为直接调用函数时，this对象是window，而使用new操作符时，this指向新创建的对象实例。</p>
 <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(name,age,job)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>（<span class="keyword">this</span> <span class="keyword">instanceof</span> Person)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">        <span class="keyword">this</span>.age=age;</span><br><span class="line">        <span class="keyword">this</span>.job=job;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(name,age,job);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>大量if语句时，可以采用惰性载入，即在第一次调用的过程中，该函数会被覆盖为另外一个按合适方式执行的函数，这样，第二次调用这个函数时，就不会再经过多次的if了</p>
 <figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createXHR</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> XMLHttpRequest!=<span class="string">"undefined"</span>)&#123;</span><br><span class="line">        createXHR=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;...</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> createXHR();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>定时器代码是放在一个等待区域，直到时间间隔到了以后，此时将代码添加到JavaScript的处理队列中，等待下一次JavaScript进程空闲时被执行，setTimeout() setInterval()里的this指向window；</p>
</li>
<li><p>函数绑定，一个bind函数接收一个函数和一个环境，返回一个在给定环境中调用给定函数的函数。并且将所有参数原封不动的传递过去。现在ECMA5已经原生给所有函数都增加了bind函数，IE9+支持。可以直接fn.bind(context);</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">fn,context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fn.apply(context,<span class="built_in">arguments</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>函数柯里化和函数绑定一样提供了动态创建函数功能，返回一个函数，下面是一个复杂的bind函数</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">fn, context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">2</span>);  <span class="comment">//剩余参数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> innerArgs = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);  <span class="comment">//返回函数接收的参数</span></span><br><span class="line">        <span class="keyword">var</span> finalArgs = args.concat(innerArgs);</span><br><span class="line">        <span class="keyword">return</span> fn.apply(context, finalArgs);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="22-第23章-离线应用于客户端存储"><a href="#22-第23章-离线应用于客户端存储" class="headerlink" title="22 第23章 离线应用于客户端存储"></a>22 第23章 离线应用于客户端存储</h2><ol>
<li>开发离线应用第一步是要知道设备是在线还是离线，navigator.onLine属性为true就是表示设备可以上网。同时window上还可以绑定online和offline两个事件。</li>
<li>html标签中的manifest属性指定缓存描述文件的地址。</li>
<li><p>CookieUtil代码</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CookieUtil = &#123;</span><br><span class="line">    <span class="keyword">get</span>: function (name)&#123;</span><br><span class="line">        <span class="keyword">var</span> cookieName = <span class="built_in">encodeURIComponent</span>(name) + <span class="string">"="</span>,</span><br><span class="line">        cookieStart = <span class="built_in">document</span>.cookie.indexOf(cookieName),</span><br><span class="line">        cookieValue = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (cookieStart &gt; <span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> cookieEnd = <span class="built_in">document</span>.cookie.indexOf(<span class="string">";"</span>, cookieStart);</span><br><span class="line">            <span class="keyword">if</span> (cookieEnd == <span class="number">-1</span>)&#123;</span><br><span class="line">                cookieEnd = <span class="built_in">document</span>.cookie.length;</span><br><span class="line">            &#125;</span><br><span class="line">            cookieValue = <span class="built_in">decodeURIComponent</span>(<span class="built_in">document</span>.cookie.substring(cookieStart+ cookieName.length, cookieEnd));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cookieValue;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>: function (name, value, expires, path, domain, secure) &#123;</span><br><span class="line">        <span class="keyword">var</span> cookieText = <span class="built_in">encodeURIComponent</span>(name) + <span class="string">"="</span> +<span class="built_in">encodeURIComponent</span>(value);</span><br><span class="line">        <span class="keyword">if</span> (expires <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123;</span><br><span class="line">            cookieText += <span class="string">"; expires="</span> + expires.toGMTString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (path) &#123;</span><br><span class="line">            cookieText += <span class="string">"; path="</span> + path;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (domain) &#123;</span><br><span class="line">            cookieText += <span class="string">"; domain="</span> + domain;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (secure) &#123;</span><br><span class="line">            cookieText += <span class="string">"; secure"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">document</span>.cookie = cookieText;</span><br><span class="line">    &#125;,</span><br><span class="line">    unset: <span class="function"><span class="keyword">function</span> (<span class="params">name, path, domain, secure</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.set(name, <span class="string">""</span>, <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>), path, domain, secure);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用sessionStorage和localStorage会触发storage事件。localStorage一般限制是5MB</p>
</li>
<li>IndexDB是一种类似SQL数据库的结构化数据存储机制。但是它的数据不是保存在表中，而是保存在对象存储空间中，可以存储大量数据</li>
</ol>
<h2 id="23-第24章-最佳实践"><a href="#23-第24章-最佳实践" class="headerlink" title="23 第24章 最佳实践"></a>23 第24章 最佳实践</h2><ol>
<li>编写可维护的js代码<br>1）首先代码约定，函数尽量使用动词开头，因为js中变量松散，所以变量命名时可以在名字前加一个或多个字符表示数据类型。<br>2）js和html尽量分离，css和js也要尽量分离，js控制css尽量使用更改样式类的形式来实现，而不是直接修改特定样式。应用逻辑和事件处理程序相分离。<br>3）不要为实例或者原型添加属性和方法，永远不修改不由你拥有的对象。<br>4）需要多处使用的值都可以抽取为常量，比如URLs，最好使用一个公共地方来存放所有URL，用户界面字符串应该被抽取出来，以方便国际化。</li>
<li>JavaScript性能优化<br>1）避免全局查找，将在一个函数中多次用到的全局变量存储为局部变量<br>2）避免使用with语句，因为会增加作用域的长度，增加查找作用域的时间，解决办法也是用局部变量<br>3）减少属性查找，因为属性查找要遍历会对原型链中拥有改名称的属性进行一次搜索，多次用到的属性，可以存储在局部变量中。<br>4）优化循环，使用减值迭代，简化终止条件，简化循环体<br>5）当循环次数是确定的，消除循环，使用多次函数调用可能更快。<br>6）使用eval()或者setTimeout传一个字符串参数时，都会重新启动一个解释器来解析新的代码，尽量避免使用。<br>7）尽量使用数组和对象的字面量表达方式来消除不必要的语句。<br>8）优化DOM操作，使用documentFragment来优化插入操作。使用innerHTML来创建DOM节点要比原生createElement再appendChild更快。最小化访问HTMLCollection的次数，因为它是一个动态，每一次访问，它都会查询一次。尽量使用事件代理。</li>
</ol>
<h2 id="24-第25章-新兴的API"><a href="#24-第25章-新兴的API" class="headerlink" title="24 第25章 新兴的API"></a>24 第25章 新兴的API</h2><ol>
<li><p>requestAnimationFrame实现平滑的动画循环</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateProgress</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"status"</span>);</span><br><span class="line">    div.style.width = (<span class="built_in">parseInt</span>(div.style.width, <span class="number">10</span>) + <span class="number">5</span>) + <span class="string">"%"</span>;</span><br><span class="line">    <span class="keyword">if</span> (div.style.left != <span class="string">"100%"</span>)&#123;</span><br><span class="line">        mozRequestAnimationFrame(updateProgress);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">mozRequestAnimationFrame(updateProgress);</span><br></pre></td></tr></table></figure>
</li>
<li><p>pageVisibility API可以让开发人员指导页面是否可见，并且有visibilitychange事件，当文档可见性变化时，触发该事件。</p>
</li>
<li>geolocation实现了地理定位</li>
<li>File API在IE10+上实现了访问计算机中的文件，file控件的event.target.files保存着用户选中的文件列表，每个对象有name，size，type，lastModifiedDate字符串。FileReader实现的异步文件读取机制。所以有progress、error、load等事件。error.code是错误码，对应错误信息。可以读取部分内容。</li>
<li>结合拖放API和File API可以实现读取、上传拖放的文件。</li>
<li>window.performance.navigator包含着好几个属性，比如redirectCount页面加载前的重定向次数。type，表示刚刚发生的导航类型。window.timing也是一个对象，这个对象的属性都是时间戳，navigatorStart表示开始导航到当前页面的时间，fetchStart开始通过GET取得页面的时间，connectStart和connetEnd浏览器连接到服务器的时间等等，通过这些时间值，就可以全面了解页面在被加载到浏览器的过程中都经历了哪些阶段，哪些阶段是影响性能的瓶颈。目前IE10+和chrome支持。</li>
<li>Web Workers可以运行异步JavaScript代码，避免阻塞用户界面。new一个worker，然后通过postMessage方法传数据给worker，worker通过onmessage来监听，同时也用postMessage来向页面发送消息，worker内不能操作DOM，一般用来处理比较耗时的操作比如复杂计算等。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript语言精粹笔记]]></title>
      <url>http://ldllidonglin.github.io/blog/2015/09/03/2015-09-04-javascript%E8%AF%AD%E8%A8%80%E7%B2%BE%E7%B2%B9%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="第一章-精华"><a href="#第一章-精华" class="headerlink" title="第一章 精华"></a>第一章 精华</h1><p>JavaScript中非常糟糕的一点就是依赖全局变量来连接，所有单元的顶级变量都最终挂载global这个全局变量中。</p>
<h1 id="第二章-语法"><a href="#第二章-语法" class="headerlink" title="第二章 语法"></a>第二章 语法</h1><p>空白符通常没有意义，标识符必须以字母开头，同时不能使用保留字，对象字面量中的属性名也不能出现保留字<br><a id="more"></a></p>
<h1 id="第三章-对象"><a href="#第三章-对象" class="headerlink" title="第三章 对象"></a>第三章 对象</h1><ol>
<li>属性名如果是合法的标识符不需要用引号括住，不合法的“first-name”就需要。</li>
<li>从undefined的成员属性中取值会导致TypeError异常，避免出现这样的情况，可以用&amp;&amp;符号来避免。比如a.b&amp;&amp;a.b.name，如果a.b是undefined，那自然会返回undefined</li>
<li>用delete删除对象的属性，可能会让来自原型链中的属性透现出来。</li>
</ol>
<h1 id="第四章-函数"><a href="#第四章-函数" class="headerlink" title="第四章 函数"></a>第四章 函数</h1><ol>
<li>函数对象的原型是Function.prototype。该原型对象本身的原型是Object.prototype</li>
<li>如果函数调用时在前面加了new，但是返回值不是一个对象，则会返回this，即改函数对象。 </li>
</ol>
<h1 id="第五章-继承"><a href="#第五章-继承" class="headerlink" title="第五章 继承"></a>第五章 继承</h1><ol>
<li>new 运算符执行过程大概是： <figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="literal">that</span>=Object.create(<span class="keyword">this</span>.prototype);</span><br><span class="line"><span class="keyword">var</span> other=<span class="keyword">this</span>.apply(<span class="literal">that</span>,arguments);</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">typeof</span> other===<span class="string">'object'</span>&amp;&amp;other)||<span class="literal">that</span>;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="第六章-数组"><a href="#第六章-数组" class="headerlink" title="第六章 数组"></a>第六章 数组</h1><ol>
<li>数组可以包含任意混合类型的值。</li>
<li>length属性值是这个数组最大整数属性名加上1，并不等于数组里的元素的个数。设置更大的length不会给数组分配更多的空间，但把length设小，将会把所有大于等于新length的属性删除。</li>
<li>[]后置下标运算符把它所含的表达式转换成一个字符串。如果该表达式有toString方法，就使用该方法，字符串将被用作属性名，不会改变length，如果字符串是一个大于等于当前length，小于2^32-1的正整数，那length会被设置为新的下标加1。</li>
</ol>
<h1 id="第七章-正则表达式"><a href="#第七章-正则表达式" class="headerlink" title="第七章 正则表达式"></a>第七章 正则表达式</h1><ol>
<li><p>匹配一个url的正则表达式</p>
 <figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^<span class="comment">(?:([A-Za-z]+)</span>:)?<span class="comment">(\/&#123;0,3&#125;)</span><span class="comment">([0-9.\-A-Za-z]+)</span><span class="comment">(?::(\d+)</span>)?<span class="comment">(?:\/([^?#]*)</span>)?<span class="comment">(?:\?([^#]*)</span>)?<span class="comment">(?:#(.*)</span>)?$/</span><br></pre></td></tr></table></figure>
</li>
<li><p>\1是指向分组1所捕获到的文本的一个引用，它可以在正则表达式中引用，用来匹配后续的文本。</p>
</li>
<li>正则表达式分组有四种，捕获型()、非捕获型(?:)、向前正向匹配(?=)、向前负向匹配(?!)。</li>
</ol>
<h1 id="第八章-方法"><a href="#第八章-方法" class="headerlink" title="第八章 方法"></a>第八章 方法</h1><ol>
<li>regexp.exec是最强大的也是最慢的方法，如果是全局查找的话，regexp.lastIndex将被设置为该匹配后的第一个字符的位置，不成功会重置为0，如果是用循环调用exec去查询一个字符串，如果提前退出了这个循环，再次进入的时候必须把regexp.lastIndex重置为0，因为^因子仅匹配lastIndex为0的情况。</li>
<li>regexp.test不要使用g标示</li>
<li>string.match(regexp)如果regexp带有g标识，那么它生成一个包含所有匹配的数组。</li>
<li>string.replace(searchValue,replaceValue)如果第一个参数是一个字符串，那只会在第一次出现的地方被替换。第一个参数是regexp，并且带有g标识，就将会替换所有匹配。如果replaceValue如果是一个函数，那每遇到一次匹配，函数就会被调用一次，函数返回的字符串会被用作替换文本。</li>
<li>string.search方法和indexOf方法类似，接受一个正则表达式对象作为参数，返回第一个匹配首字符位置，没有则返回-1，且忽略g标示。</li>
<li><p>parseInt()总是要带上进制的参数，因为parseInt(“08”)===0,因为这里它识别“08”按照八进制进行转换。正确的是parseInt(“08”,10)。在遇到非数字时会停止解析，所以parseInt(“16”)==parseInt(“16yd”);<br>7.</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">NaN</span>===<span class="string">"number"</span>  <span class="comment">//true   </span></span><br><span class="line"><span class="literal">NaN</span>===<span class="literal">NaN</span>  <span class="comment">//false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>js中为false的值有0 NaN “” false null undefined，undefined和NaN的值是可以被改变的。</p>
 <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>==<span class="string">'0'</span> <span class="comment">//false</span></span><br><span class="line"><span class="number">0</span>==<span class="string">''</span>   <span class="comment">//true</span></span><br><span class="line"><span class="number">0</span>==<span class="string">'0'</span>  <span class="comment">//true</span></span><br><span class="line"><span class="literal">false</span>==<span class="string">'false'</span> <span class="comment">//false</span></span><br><span class="line"><span class="literal">false</span>==<span class="string">'0'</span>     <span class="comment">//true</span></span><br><span class="line"><span class="literal">false</span>==<span class="literal">undefined</span>  <span class="comment">//false</span></span><br><span class="line"><span class="literal">false</span>=<span class="literal">null</span>        <span class="comment">//false</span></span><br><span class="line"><span class="literal">null</span>==<span class="literal">undefined</span>   <span class="comment">//true</span></span><br><span class="line"><span class="string">' \t\r\n '</span>==<span class="number">0</span>     <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jquery </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据可视化的一些资源整理]]></title>
      <url>http://ldllidonglin.github.io/blog/2015/07/19/2015-06-23-%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%9A%84%E4%B8%80%E4%BA%9B%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<p>1:<a href="http://datavlab.org" target="_blank" rel="noopener">http://datavlab.org</a>  由淘宝可视化团队发起，意在为可视化的爱好者提供了解可视化，实践可视化，讨论可视化的渠道<br>2 <a href="http://vis.pku.edu.cn/weibova/weiboevents/" target="_blank" rel="noopener">http://vis.pku.edu.cn/weibova/weiboevents/</a> 北大袁晓如教授带领的团队的一个微博分析的工具，用来分析微博还是可以的。他们还有相关的作品，官方网站：<a href="http://vis.pku.edu.cn" target="_blank" rel="noopener">http://vis.pku.edu.cn</a><br>3 <a href="http://www.cad.zju.edu.cn/home/vagblog/" target="_blank" rel="noopener">http://www.cad.zju.edu.cn/home/vagblog/</a> 浙江大学可视化分析小组博客<br>4 <a href="http://selection.datavisualization.ch" target="_blank" rel="noopener">http://selection.datavisualization.ch</a> 里面就包含了众多的可视化工具D3.js<br> CargoDB之类的<br>5 图表类就比较多了：<br>1.Echarts:<a href="http://echarts.baidu.com/index.html" target="_blank" rel="noopener">http://echarts.baidu.com/index.html</a><br>2.ECharts-X(三维可视化)<a href="http://echarts.baidu.com/x/doc/index.html" target="_blank" rel="noopener">http://echarts.baidu.com/x/doc/index.html</a><br>3.HightCharts 专业图表，和地图结合的比较少<br>4 jChartFX <a href="http://www.jchartfx.com/" target="_blank" rel="noopener">http://www.jchartfx.com/</a></p>
]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据可视化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端面试总结]]></title>
      <url>http://ldllidonglin.github.io/blog/2015/07/16/2015-07-16-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h1 id="前端面试总结"><a href="#前端面试总结" class="headerlink" title="前端面试总结"></a>前端面试总结</h1><p>个人前端BAT暑期实习面试题总结和从朋友同学那打听来的题，既可以准备笔试面试，也可以对自己的基础知识查漏补缺<br><a id="more"></a></p>
<h2 id="1-position的值各是什么意思？"><a href="#1-position的值各是什么意思？" class="headerlink" title="1. position的值各是什么意思？"></a>1. position的值各是什么意思？</h2><p>(1)static:HTML元素的默认值，即没有定位，元素出现在正常的流中。静态定位的元素不会受到top left bottom right z-index 这些值的影响。<br>(2)fixed:元素的位置相对于浏览器窗口是固定位置。即使窗口是滚动的它也不会移动,元素的位置通 过 “left”, “top”, “right” 以及 “bottom”属性进行规定。fixed定位 使元素的位置与文档流无关,因此不占据空间。fixed定位的元素和其他元素重叠<br>(3)relative:相对定位元素的定位是相对其正常位置,它原本所占的空间不会改变,。<br>(4)absolute:生成绝对定位的元素，相对于static定位以外的第一个父元素进行定位。元素的位置通过”left”，”top”， “right” 以及 “bottom” 属性进行规定。与文档流无关 ，因此不占据空间。</p>
<h2 id="2-跨域的方法有哪些，及其原理"><a href="#2-跨域的方法有哪些，及其原理" class="headerlink" title="2. 跨域的方法有哪些，及其原理"></a>2. 跨域的方法有哪些，及其原理</h2><p>(1)jsonp是用script标签的src属性是不跨域的这一性质，所以其实是封装了这个功能而已，jquery会创建一个script标签，把src的地址指向后端，src会带一个callback参数，一般是一个函数名，后端根据这个请求，获取参数，然后把需要返回的数据包裹在这个函数内，前端获得了这些js代码，就会执行这个callback，自然就把数据传到客户端了。只支持GET请求<a href="http://www.nowamagic.net/librarys/veda/detail/224" target="_blank" rel="noopener">参考文档</a>。缺陷是只支持GET，并且参数都在url中，url的大小是有限制的。<br>(2)cors(cross-origin resource sharing)就是服务端加上一句 header(“Access-Control-Allow-Origin:<em>“); 支持所有请求，但是兼容性不太好，支持IE9+,chrome3+。 如果需要携带cookie，那么需要加上header(“Access-Control-Allow-Credentials”, true)。同时，origin不能为\</em>，必须为单个host，一般为请求的origin。<br>(3)window.name.一个窗口window的生命周期内，窗口载入的页面共享一个window.name,每个页面都有读写权限,<br>data.html里面就写上window.name=”data..”;然后在a.html里用一个隐藏的iframe载入data.html,然后在a.html里用js把iframe的src设为同源的一个页面。<br>(4)修改document.domain的方法只适用于不同子域的框架间的交互。比如<a href="http://www.example.com/a.html和" target="_blank" rel="noopener">http://www.example.com/a.html和</a> http:example.com/b.html 在两个页面中都修改document.domain为”example.com”<br>(5)img标签的src也是不跨域的，所以可以<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">img.src=“http://example.com/<span class="keyword">data</span>?<span class="keyword">value</span>=<span class="number">123</span>。</span><br></pre></td></tr></table></figure></p>
<p>但是这种方法只能用来发送请求.<br>(6)HTML5有一个postMessage(data,origin)方法，可以向当前页面中的iframe或者当前页弹出的窗口发送消息<br>(7)最佳实践，嵌套一个同域的iframe，然后使用postMessage通信，请求交由同域的iframe里发送，结果通过postMessage发送回来。</p>
<h2 id="3-meta标签都有那些属性和值？"><a href="#3-meta标签都有那些属性和值？" class="headerlink" title="3. meta标签都有那些属性和值？"></a>3. meta标签都有那些属性和值？</h2><p>属性主要有name和http-equiv,content 属性始终要和 name 属性或 http-equiv 属性一起使用。name属性主要有author、description、keywords。使用带有 http-equiv<br>属性的 &lt; meta &gt; 标签时，服务器将把名称/值对添加到发送给浏览器的内头部。主要有expires<br>(网页到期时间)、Set-Cookie、content-Type(content=”text/html; charset=gb2312”),<br>refresh(自动刷新 http-equiv=”refresh”content=”5; url=<a href="http://www.111cn.net/&quot;" target="_blank" rel="noopener">http://www.111cn.net/&quot;</a>)<br>js可以实现自动刷新的方法: Javascript刷新页面 的几种方法：<br>    1 history.go(0)<br>    2 location.reload()<br>    3 location=location<br>    4 location.assign(location)<br>    5 document.execCommand(‘Refresh’)<br>    6 window.navigate(location)<br>    7 location.replace(location)<br>    8 document.URL=location.href  </p>
<h2 id="4-css3中动画有哪些属性可以实现？"><a href="#4-css3中动画有哪些属性可以实现？" class="headerlink" title="4. css3中动画有哪些属性可以实现？"></a>4. css3中动画有哪些属性可以实现？</h2><p>1)animation: myfirst 5s;<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background</span>:red;</span><br><span class="line">    <span class="attribute">animation</span>:myfirst <span class="number">5s</span>;</span><br><span class="line">    <span class="attribute">animation-name</span>: myfirst;</span><br><span class="line">    <span class="attribute">animation-duration</span>: <span class="number">5s</span>;</span><br><span class="line">    <span class="attribute">animation-timing-function</span>: linear;</span><br><span class="line">    <span class="attribute">animation-delay</span>: <span class="number">2s</span>;</span><br><span class="line">    <span class="attribute">animation-iteration-count</span>: infinite;</span><br><span class="line">    <span class="attribute">animation-direction</span>: alternate;</span><br><span class="line">    <span class="attribute">animation-play-state</span>: running;</span><br><span class="line">    <span class="attribute">-moz-animation</span>:myfirst <span class="number">5s</span>; <span class="comment">/* Firefox */</span></span><br><span class="line">    <span class="attribute">-webkit-animation</span>:myfirst <span class="number">5s</span>; <span class="comment">/* Safari and Chrome */</span></span><br><span class="line">    <span class="attribute">-o-animation</span>:myfirst <span class="number">5s</span>; <span class="comment">/* Opera */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> myfirst</span><br><span class="line">&#123;</span><br><span class="line">    <span class="selector-tag">from</span> &#123;<span class="attribute">background</span>:red;&#125;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;<span class="attribute">background</span>:yellow;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> myfirst</span><br><span class="line">&#123;</span><br><span class="line">    0%   &#123;<span class="attribute">background</span>: red;&#125;</span><br><span class="line">    25%  &#123;<span class="attribute">background</span>: yellow;&#125;</span><br><span class="line">    50%  &#123;<span class="attribute">background</span>: blue;&#125;</span><br><span class="line">    100% &#123;<span class="attribute">background</span>: green;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><a href="http://www.w3cplus.com/css3/CSS3-animation.html" target="_blank" rel="noopener">CSS动画</a><br>2)css3中的transition transform</p>
<h2 id="5-响应式布局有哪些方法"><a href="#5-响应式布局有哪些方法" class="headerlink" title="5. 响应式布局有哪些方法"></a>5. 响应式布局有哪些方法</h2><ol>
<li>media query</li>
<li>内容居中</li>
</ol>
<h2 id="6-网站性能优化有哪些方法"><a href="#6-网站性能优化有哪些方法" class="headerlink" title="6. 网站性能优化有哪些方法"></a>6. 网站性能优化有哪些方法</h2><h3 id="优化静态资源加载速度"><a href="#优化静态资源加载速度" class="headerlink" title="优化静态资源加载速度"></a>优化静态资源加载速度</h3><ol>
<li>合并静态资源，减少http请求数量，减少整体的请求时间。图片sprites(合并图片，然后用CSS background-position等属性制定图片位置的方法）</li>
<li>减少静态的体积，减少资源的下载时间。压缩代码，比如js css等代码进行压缩，图片压缩。</li>
<li>优化资源本身的请求速度。比如使用cdn,内容分发网络，即把内容都分布在各个节点，客户端就可以找最快的节点进行下载。同时有利于并发请求，因为一次对同一个网站的并发请求数是有限制的。</li>
<li>使用HTTP缓存，直接从缓存中读取，就直接不需要发起请求了。如果需要极致的优化，可以使用localStorage，缓存静态资源。</li>
<li>静态资源使用无cookie的域。<h3 id="渲染优化"><a href="#渲染优化" class="headerlink" title="渲染优化"></a>渲染优化</h3></li>
<li>css 放在head js放在body后，因为如果放在前面的话，页面会等js加载完才渲染</li>
<li>延迟加载，一些不需要在首屏出现的内容比如图片可以延迟加载，加快首屏的渲染时间，提升用户体验。</li>
<li>同构，后端使用nodejs直接支出首屏。<h3 id="代码层面的优化"><a href="#代码层面的优化" class="headerlink" title="代码层面的优化"></a>代码层面的优化</h3></li>
<li>减少DOM数量</li>
<li>使用DocumentFragment减少DOM的插入操作，减少重排</li>
<li>使用修改className的形式修改css样式，而不是用js一个一个属性进行修改，减少重绘</li>
<li>对于会频繁触发重排的动画元素，使其position为absolute或者fixed，可以减少对其他元素的影响。</li>
<li>尽量减少使用全局变量，因为全局变量不会被回收，会一直在内存中。<br><a href="http://coolshell.cn/articles/6470.html" target="_blank" rel="noopener">参考文档1</a><br><a href="http://www.ha97.com/2710.html" target="_blank" rel="noopener">参考文档2</a><br><a href="https://segmentfault.com/a/1190000003646305" target="_blank" rel="noopener">参考文档3</a></li>
</ol>
<h2 id="7-数据库查询优化方法"><a href="#7-数据库查询优化方法" class="headerlink" title="7. 数据库查询优化方法"></a>7. 数据库查询优化方法</h2><ol>
<li>建索引</li>
<li>查询语句的优化，比如避免全盘扫描之类的。</li>
</ol>
<h2 id="8-HTML5-css3中有哪些特性，session和本地存储、cookie的区别"><a href="#8-HTML5-css3中有哪些特性，session和本地存储、cookie的区别" class="headerlink" title="8. HTML5 css3中有哪些特性，session和本地存储、cookie的区别?"></a>8. HTML5 css3中有哪些特性，session和本地存储、cookie的区别?</h2><p>HTML5:语义化标签(header nav footer article) audio video canvas svg localstorage sessionStorage 地理定位 新的表单控件比如date time email等</p>
<p>css3:transform:translate rotate scale skew matrix,transition,animation,text-shadow,border-radius,box-shadow，新增伪类<br>p:first-of-type 选择属于其父元素的首个 p 元素的每个 p 元素。<br>p:last-of-type  选择属于其父元素的最后 p 元素的每个 p 元素。<br>p:only-of-type  选择属于其父元素唯一的 p 元素的每个 p 元素。<br>p:only-child    选择属于其父元素的唯一子元素的每个 p 元素。<br>p:nth-child(2)  选择属于其父元素的第二个子元素的每个 p 元素。<br>:enabled  :disabled 控制表单控件的禁用状态。<br>:checked        单选框或复选框被选中。</p>
<p>session是在服务端,会在一段时间后消失，cookie是在客户端，会在每次请求时被发送到服务端，所以可以在服务端被读取和修改，cookie有实效性、大小有限制，localStorage不可以被后端读取，无实效性，可以达到5M。sessionStorage当前浏览器窗口关闭就自动删除</p>
<h2 id="9-什么是模块化开发，以及为什么要进行模块化开发"><a href="#9-什么是模块化开发，以及为什么要进行模块化开发" class="headerlink" title="9. 什么是模块化开发，以及为什么要进行模块化开发"></a>9. 什么是模块化开发，以及为什么要进行模块化开发</h2><p>解决命名冲突和文件依赖，异步加载模块的话，还可以提高性能。可以实现模块的版本管理。每个模块单独一个文件，极大的提高了可维护性。接入已有的功能模块，开发不存在的功能模块。</p>
<h2 id="10-MVVM"><a href="#10-MVVM" class="headerlink" title="10. MVVM"></a>10. MVVM</h2><p>就是Model View ViewModel，都是MV*,ViewModel负责逻辑控制，View没有业务逻辑，<br>它采用双向绑定（data-binding）：View的变动，自动反映在ViewModel上。Anjularjs 就是MVVM模式。</p>
<h2 id="11-清楚浮动有哪些方法"><a href="#11-清楚浮动有哪些方法" class="headerlink" title="11. 清楚浮动有哪些方法?"></a>11. 清楚浮动有哪些方法?</h2><p><a href="http://www.iyunlu.com/view/css-xhtml/55.html" target="_blank" rel="noopener">参考文章</a><br><a href="http://www.zhangxinxu.com/wordpress/2010/01/%E5%AF%B9overflow%E4%B8%8Ezoom%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%A4%E8%AF%86/" target="_blank" rel="noopener">参考文章2</a>;<br>其实都是触发父元素的<a href="http://www.w3.org/TR/CSS21/visuren.html#block-formatting" target="_blank" rel="noopener">BFC</a>，然后让它重新计算高度，解决高度塌陷的问题。</p>
<ol>
<li><p>在浮动元素末尾添加一个空的标签例如或者用br标签， 因为它有 clear=“all | left | right | none” 属性</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">”clear:both”</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>父元素设置 overflow 除了visible 以外的值（hidden，auto，scroll ）</p>
</li>
<li><p>父元素使用:after 伪元素</p>
 <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">"."</span>; <span class="attribute">display</span>:block; <span class="attribute">height</span>:<span class="number">0</span>; <span class="attribute">visibility</span>:hidden; <span class="attribute">clear</span>:both; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123; *zoom:<span class="number">1</span>; &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>父元素 float 除了none以外的值 </p>
</li>
<li>父元素display (table-cell，table-caption，inline-block) </li>
<li>父元素position（absolute，fixed）<br>最好的方法是：after伪元素，后三种方法会影响整个的布局，而我们的目的只是清除浮动而已，所以用一个伪元素是最好的方法。</li>
</ol>
<h2 id="12-解释下js的原型链-封装-继承"><a href="#12-解释下js的原型链-封装-继承" class="headerlink" title="12. 解释下js的原型链? 封装 继承"></a>12. 解释下js的原型链? 封装 继承</h2><p>javascript每一个对象A都有一个私有变量prototype指向另一个对象B，B对象就是A的原型，B也和A一样，依次类推，直到这个私有变量为null，这样就形成一个链条。这样就是A继承B。<br>js中可以定义命名空间，但是这个命名空间其实就是一个包含属性、方法、对象的对象。和其他对象没有区别。js实现继承，最好是使用构造函数加原型链的方式，可以获得原型的方法，但是并不知道方法的具体实现，这样就实现了封装和继承。<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript#Encapsulation" target="_blank" rel="noopener">MDN的说明</a><br><a href="http://blog.csdn.net/james521314/article/details/8645815" target="_blank" rel="noopener">js实现继承</a></p>
<h2 id="13-ES6新特性"><a href="#13-ES6新特性" class="headerlink" title="13. ES6新特性"></a>13. ES6新特性</h2><p><a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">阮一峰的文章</a><br><a href="https://github.com/ruanyf/es-checker" target="_blank" rel="noopener">ES6功能检测库</a></p>
<ol>
<li>箭头( =&gt; )。是匿名函数定义的缩写，比如element.addEventListener(‘click’, (e) =&gt; console.log(e)); </li>
<li>Class类。语法糖，其实还是基于原型链</li>
<li>String Array Math Number等内置对象增加了一些函数，比如String.include(),Array.find() Number.isNaN() 等</li>
<li>模块化加载器，可以export import</li>
<li>let关键字实现了块级作用域，const实现了常量。let跟var的区别在于let能限定变量在当前块的作用域下。</li>
<li>函数支持默认参数、剩余参数、参数展开为数组</li>
<li>模板字符串</li>
<li>原生提供promise</li>
<li>添加Map和Set数据结构</li>
<li>yield生成器，执行到yield时就会停止，直到调用next方法，就会执行一步，遇到yield又会停止。</li>
<li>Iterator构造函数，传入想要迭代其值的对象，然后调用next。如果是数组，返回的数组第一个元素是索引，如果是对象，第一个元素是属性名，第二个是属性值。</li>
</ol>
<h2 id="14-js中如何检测未定义的变量"><a href="#14-js中如何检测未定义的变量" class="headerlink" title="14. js中如何检测未定义的变量?"></a>14. js中如何检测未定义的变量?</h2><p>tyepof a===”undefined”   //定义了但没赋值也是true，但是定义了没有赋值和没有定义对于我们来说是一样的，因为你都没法在上面进行操作，只能赋值。</p>
<h2 id="15-解释下js中的闭包"><a href="#15-解释下js中的闭包" class="headerlink" title="15. 解释下js中的闭包?"></a>15. 解释下js中的闭包?</h2><p>闭包就是能够读取其他函数内部变量的函数。可以把闭包简单理解成”定义在一个函数A内部的函数B”。然后把这个函数Breturn，在外部调用这个函数B时，这个函数就可以调用A函数内的变量。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span><span class="params">()</span></span>&#123;</span><br><span class="line">　　　　<span class="keyword">var</span> n=<span class="number">999</span>;</span><br><span class="line">　　　　<span class="function"><span class="keyword">function</span> <span class="title">f2</span><span class="params">()</span></span>&#123;</span><br><span class="line">　　　　　　alert(n); </span><br><span class="line">　　　　&#125;</span><br><span class="line">　　　　<span class="keyword">return</span> f2;</span><br><span class="line">　　&#125;</span><br><span class="line">　　<span class="keyword">var</span> result=f1();</span><br><span class="line">　　result(); <span class="comment">// 999</span></span><br></pre></td></tr></table></figure></p>
<p>闭包还有一个作用就是可以让变量保存在内存中，比如<br>这是不用闭包的代码<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFunctions</span><span class="params">()</span>&#123;</span></span><br><span class="line">    var result = new Array();</span><br><span class="line">    <span class="keyword">for</span> (var <span class="built_in">i</span>=<span class="number">0</span>; <span class="built_in">i</span> &lt; <span class="number">10</span>; <span class="built_in">i</span>++)&#123;</span><br><span class="line">        result[<span class="built_in">i</span>] = <span class="function"><span class="keyword">function</span><span class="params">()</span>&#123;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">i</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>结果是result里面的值全是10，并没有达到我们想要的结果。<br>这是使用闭包的代码<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFunctions</span><span class="params">()</span>&#123;</span></span><br><span class="line">    var result = new Array();</span><br><span class="line">    <span class="keyword">for</span> (var <span class="built_in">i</span>=<span class="number">0</span>; <span class="built_in">i</span> &lt; <span class="number">10</span>; <span class="built_in">i</span>++)&#123;</span><br><span class="line">        result[<span class="built_in">i</span>] = <span class="function"><span class="keyword">function</span><span class="params">(num)</span>&#123;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span>&#123;</span></span><br><span class="line">                <span class="keyword">return</span> num;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;(<span class="built_in">i</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="16-尽可能的说明下ajax的工作原理？"><a href="#16-尽可能的说明下ajax的工作原理？" class="headerlink" title="16. 尽可能的说明下ajax的工作原理？"></a>16. 尽可能的说明下ajax的工作原理？</h2><p>ajax 的全称是Asynchronous JavaScript and XML。异步请求<br>ajax的原理简单来说就是利用XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，<br>XMLHttpRequest这个对象的属性。它的属性有：</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>onreadystatechange</td>
<td>每次状态改变所触发事件的事件处理程序。</td>
</tr>
<tr>
<td>responseText</td>
<td>从服务器进程返回数据的字符串形式。</td>
</tr>
<tr>
<td>responseXML</td>
<td>从服务器进程返回的DOM兼容的文档数据对象。</td>
</tr>
<tr>
<td>status</td>
<td>从服务器返回的数字代码，比如常见的404（未找到）和200（已就绪）</td>
</tr>
<tr>
<td>status Text</td>
<td>伴随状态码的字符串信息</td>
</tr>
<tr>
<td>readyState</td>
<td>对象状态值(0 (未初始化) 对象已建立，但是尚未初始化（尚未调用open方法）1 (初始化) 对象已建立，尚未调用send方法。 2 (发送数据) send方法已调用，但是当前的状态及http头未知。3 (数据传送中) 已接收部分数据，因为响应及http头不全，这时通过responseBody和responseText获取部分数据会出现错误。4 (完成) 数据接收完毕此时可以通过通过responseXml和responseText获取完整的回应数据)</td>
</tr>
</tbody>
</table>
<p>对于XmlHttpRequest的两个方法，open和send，其中open方法指定了：<br>a、向服务器提交数据的类型，即post还是get。<br>b、请求的url地址和传递的参数。<br>c、传输方式，false为同步，true为异步。默认为true。如果是异步通信方式(true)，客户机就不等待服务器的响应；如果是同步方式(false)，客户机就要等到服务器返回消息后才去执行其他操作。我们需要根据实际需要来指定同步方式，在某些页面中，可能会发出多个请求，甚至是有组织有计划有队形大规模的高强度的request，而后一个是会覆盖前一个的，这个时候当然要指定同步方式。<br>Send方法用来发送请求。<br>在IE和非IE下创建XmlHttpRequest有点区别<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreateXmlHttp</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//非IE浏览器创建XmlHttpRequest对象</span></span><br><span class="line">    <span class="keyword">if</span> (window.XmlHttpRequest) &#123;</span><br><span class="line">        xmlhttp = <span class="keyword">new</span> <span class="type">XmlHttpRequest</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//IE浏览器创建XmlHttpRequest对象</span></span><br><span class="line">    <span class="keyword">if</span> (window.ActiveXObject) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            xmlhttp = <span class="keyword">new</span> <span class="type">ActiveXObject</span>(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                xmlhttp = <span class="keyword">new</span> <span class="type">ActiveXObject</span>(<span class="string">"msxml2.XMLHTTP"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (ex) &#123; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="17-基本的http状态码有哪些，各代表什么意思？"><a href="#17-基本的http状态码有哪些，各代表什么意思？" class="headerlink" title="17. 基本的http状态码有哪些，各代表什么意思？"></a>17. 基本的http状态码有哪些，各代表什么意思？</h2><table>
<thead>
<tr>
<th>状态码</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>200</td>
<td>请求ok</td>
</tr>
<tr>
<td>206</td>
<td>Partial Content，request必须带上Range</td>
</tr>
<tr>
<td>301</td>
<td>请求的资源被永久的移到新位置Moved Permanently</td>
</tr>
<tr>
<td>302</td>
<td>请求的资源临时被移到新位置</td>
</tr>
<tr>
<td>303</td>
<td>请求可以在另一个URI上找到，并且使用get方式</td>
</tr>
<tr>
<td>304</td>
<td>请求的资源没有变化，请求不会返回内容，将使用缓存 Not Modified</td>
</tr>
<tr>
<td>400</td>
<td>bad request</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized，比如有csrf token验证的，验证失败会返回这个</td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
</tr>
<tr>
<td>500</td>
<td>服务器错误 Internal Server Error</td>
</tr>
<tr>
<td>502</td>
<td>网关错误 Bad Gateway</td>
</tr>
<tr>
<td>503</td>
<td>服务器不可用 Service Unavailable</td>
</tr>
<tr>
<td>504</td>
<td>超时 Gateway Timeout</td>
</tr>
</tbody>
</table>
<h2 id="18-‘-’和‘-’有什么区别？"><a href="#18-‘-’和‘-’有什么区别？" class="headerlink" title="18. ‘==’和‘===’有什么区别？"></a>18. ‘==’和‘===’有什么区别？</h2><p>‘==’会做类型转换  ‘0’==0   //true<br>但是  ‘0’===0  //false<br>所以永远不要用==</p>
<h2 id="19-CSS预处理器有哪些？"><a href="#19-CSS预处理器有哪些？" class="headerlink" title="19. CSS预处理器有哪些？"></a>19. CSS预处理器有哪些？</h2><p>sass less</p>
<h2 id="20-js文件的异步加载"><a href="#20-js文件的异步加载" class="headerlink" title="20. js文件的异步加载"></a>20. js文件的异步加载</h2><ol>
<li>带有 defer 属性的script标签可以放置在文档的任何位置。对应的 JavaScript 文件将在页面解析到script标签时开始下载，但不会执行，直到 DOM 加载完成，即DOMContentLoaded事件触发前才会被执行。当一个带有 defer 属性的 JavaScript 文件下载时，它不会阻塞浏览器的其他进程，因此这类文件可以与其他资源文件一起并行下载。</li>
<li>HTML 5 为script标签定义了一个新的扩展属性：async。它的作用和 defer 一样，能够异步地加载和执行脚本，不因为加载脚本而阻塞页面的加载。async标签的js会在加载完就立即执行，执行顺序取决于加载完成的顺序，谁先加载完，谁先执行</li>
<li>动态script标签</li>
<li>用xhr，用一个动态 script 元素将 JavaScript 代码注入页面。</li>
</ol>
<h2 id="21-get和post的区别"><a href="#21-get和post的区别" class="headerlink" title="21. get和post的区别"></a>21. get和post的区别</h2><p>最主要的区别就是一个是用来获取数据的，一个是用来更新数据的<br><a href="http://blog.csdn.net/howeverpf/article/details/10363835" target="_blank" rel="noopener">get和post的真正区别</a><br>url长度是webserver的限制，不是get的限制。至于安全，post把数据放在body中传输，一抓包还不是一样的可以看到，根本不是本质区别。有一点小区别，就是get请求可以被缓存，有浏览历史，可被收藏为书签</p>
<h2 id="22-null和undefined的区别"><a href="#22-null和undefined的区别" class="headerlink" title="22. null和undefined的区别"></a>22. null和undefined的区别</h2><p>null表示”没有对象”，即该处不应该有值。典型用法是：<br>（1） 作为函数的参数，表示该函数的参数不是对象。<br>（2） 作为对象原型链的终点。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.getPrototypeOf(<span class="built_in">Object</span>.prototype)</span><br><span class="line"><span class="comment">// null</span></span><br></pre></td></tr></table></figure></p>
<p><em>null转为数字时为0 Number(null)===0 但是parseInt(null)为NaN Number(undefined)为NaN</em><br>undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。典型用法是：<br>（1）变量被声明了，但没有赋值时，就等于undefined。<br>（2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。<br>（3）对象没有赋值的属性，该属性的值为undefined。<br>（4）函数没有返回值时，默认返回undefined。<br><a href="http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html" target="_blank" rel="noopener">阮一峰的文章</a></p>
<h2 id="23-commonJS规范"><a href="#23-commonJS规范" class="headerlink" title="23. commonJS规范"></a>23. commonJS规范</h2><p><a href="http://javascript.ruanyifeng.com/nodejs/commonjs.html" target="_blank" rel="noopener">参考文章</a><br>CommonJS是服务器模块的规范，Node.js采用了这个规范。<br>根据CommonJS规范，一个单独的文件就是一个模块。每一个模块都是一个单独的作用域，也就是说，在一个文件定义的变量（还包括函数和类），都是私有的，对其他文件是不可见的。<br>每个文件的对外接口是module.exports对象。这个对象的所有属性和方法，都可以被其他文件导入。<br>require方法用于在其他文件加载这个接口<br>每个模块都有一个module变量，该变量指向当前模块。module不是全局变量，而是每个模块都有的本地变量。<br>CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。AMD规范则是非同步加载模块，允许指定回调函数。由于Node.js主要用于服务器编程，模块文件一般都已经存在于本地硬盘，所以加载起来比较快，不用考虑非同步加载的方式，所以CommonJS规范比较适用。但是，如果是浏览器环境，要从服务器端加载模块，这时就必须采用非同步模式，因此浏览器端一般采用AMD规范。</p>
<h2 id="24-什么是xss攻击和csrf攻击"><a href="#24-什么是xss攻击和csrf攻击" class="headerlink" title="24. 什么是xss攻击和csrf攻击"></a>24. 什么是xss攻击和csrf攻击</h2><p>XSS攻击：跨站脚本攻击(Cross Site Scripting)。<br>它与SQL注入攻击类似，SQL注入攻击中以SQL语句作为用户输入，从而达到查询/修改/删除数据的目的，而在xss攻击中，通过插入恶意脚本，比如对于那种没有实现输入过滤评论，可以在评论内容中注入js代码，等评论展现在其他用户浏览器中的时候，这段js代码就可以获取该用户的cookie等信息，实现对用户游览器的控制。预防方法就是对用户的输入过滤，html标签肯定要过滤或者转义。<br>CSRF（Cross-site request forgery跨站请求伪造）利用网站对用户标识的信任。欺骗用户的浏览器发送HTTP请求给目标站点，这个请求是带有用户的cookie的。另外可以通过IMG标签会触发一个GET请求，可以利用它来实现CSRF攻击。比如登陆A银行网站，产生了cookie，然后在没有登出A网站的情况下访问B网站，B网站要求发送一个请求到A，比如是发送一个转账请求，那这时就发生了转账操作，攻击实现。<a href="http://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html" target="_blank" rel="noopener">参考文章</a>.预防方法：表达增加hash后的cookie，后端验证。增加验证码。每个表单都带一个随机值，后端验证这个随机值。</p>
<h2 id="25-事件冒泡及事件委托原理"><a href="#25-事件冒泡及事件委托原理" class="headerlink" title="25. 事件冒泡及事件委托原理"></a>25. 事件冒泡及事件委托原理</h2><p>DOM事件流包括事件捕获阶段、处于目标阶段、事件冒泡阶段三个阶段，默认情况下都是在冒泡阶段处理事件。如下所示，第三个参数为true则表示使用捕获阶段处理，默认为false。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"ch"</span>).addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>  (<span class="params">argument</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"ch"</span>);</span><br><span class="line">&#125;,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure></p>
<p>事件冒泡，就是在当前元素发生的事件，为往父元素冒泡传递，直到window。<br>事件委托是事件冒泡的一个应用，绑定事件到父元素，在事件处理中判断是哪个元素发生的，再作处理。这样可以减少绑定元素的个数，也不必担心子节点被替换后或者新增加子节点可能需要进行重新的事件绑定。因为事件的捕获和后续代码的执行已经完全委托给了其父节点。如果页面中含有大量元素需要绑定事件，这样做会减少事件绑定数量，为浏览器减负，无疑会提高页面性能。<br><em>以下事件不冒泡：blur、focus、load、unload。</em><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//阻止事件冒泡函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stopBubble</span>(<span class="params">e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e &amp;&amp; e.stopPropagation)</span><br><span class="line">        e.stopPropagation()</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">window</span>.event.cancelBubble=<span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="26-快排的javascript实现"><a href="#26-快排的javascript实现" class="headerlink" title="26.快排的javascript实现"></a>26.快排的javascript实现</h2><p>在一个数组内移动，标准值取最右边的元素，从left开始，逐个和right位置的值比较，小的则插入sIndex(这个值在最开始为0)，zIndex++，即把小于标准值的数从0开始逐个插入，把比他小的值都查好了，那下一个zIndex自然就是标准值的位置，这样就把比标准值小的都在标准值左边，比标准值大的都在右边，然后递归，递归中，left&gt;right时，停止。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//快速排序</span></span><br><span class="line">var testArr=[<span class="number">10</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">13</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">21</span>,<span class="number">24</span>,<span class="number">123</span>,<span class="number">12</span>,<span class="number">3</span>];</span><br><span class="line">function quickSort (arr,left,right) &#123;</span><br><span class="line">    if (left &gt; right) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    var length=arr.length;</span><br><span class="line">    var sIndex=left;</span><br><span class="line">    for(var i=left;i&lt;right;i++)&#123;</span><br><span class="line">        if(arr[i]&lt;arr[right])&#123;</span><br><span class="line">            swap(arr,i,sIndex);</span><br><span class="line">            sIndex++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(arr,sIndex,right);</span><br><span class="line">    quickSort(arr,<span class="number">0</span>,sIndex<span class="number">-1</span>);</span><br><span class="line">    quickSort(arr,sIndex+<span class="number">1</span>,right);</span><br><span class="line">&#125;</span><br><span class="line">function swap (arr,i,j) &#123;</span><br><span class="line">    var temp=arr[i];</span><br><span class="line">    arr[i]=arr[j];</span><br><span class="line">    arr[j]=temp;</span><br><span class="line">&#125;</span><br><span class="line">quickSort(testArr,<span class="number">0</span>,testArr.length<span class="number">-1</span>);</span><br><span class="line">console.log(testArr);</span><br><span class="line"></span><br><span class="line">var a = [<span class="number">5</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">function quickSort(arr) &#123;</span><br><span class="line">  if (arr.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    return arr;</span><br><span class="line">  &#125;</span><br><span class="line">  var <span class="type">key</span> = arr[<span class="number">0</span>];</span><br><span class="line">  var i = <span class="number">0</span>;</span><br><span class="line">  var j = arr.length - <span class="number">1</span>;</span><br><span class="line">  var temp;</span><br><span class="line"></span><br><span class="line">  while( i &lt; j) &#123;</span><br><span class="line">    while(i &lt; j &amp;&amp; arr[j] &gt;= <span class="type">key</span>) &#123;</span><br><span class="line">      j--;</span><br><span class="line">    &#125;</span><br><span class="line">    while(i &lt; j &amp;&amp; arr[i] &lt;= <span class="type">key</span>) &#123;</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    temp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 这才真正的完成了一轮排序，把key放到了合适的地方</span></span><br><span class="line">  temp = <span class="type">key</span>;</span><br><span class="line">  arr[<span class="number">0</span>] = arr[i];</span><br><span class="line">  arr[i] = <span class="type">key</span>;</span><br><span class="line">  debugger;</span><br><span class="line">  console.log(arr.slice(<span class="number">0</span>, i), arr[i], arr.slice(i + <span class="number">1</span>));</span><br><span class="line">  return quickSort(arr.slice(<span class="number">0</span>, i)).concat([arr[i]], quickSort(arr.slice(i + <span class="number">1</span>)))</span><br><span class="line">&#125;</span><br><span class="line">console.log(quickSort(a));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function quickSort2(arr) &#123;</span><br><span class="line">  var i = <span class="number">0</span>;</span><br><span class="line">  var j = arr.length - <span class="number">1</span>;</span><br><span class="line">  var <span class="type">key</span> = <span class="number">0</span>;</span><br><span class="line">  var temp;</span><br><span class="line">  while(i &lt; j) &#123;</span><br><span class="line">    while(i &lt; j &amp;&amp; arr[j] &gt;= arr[<span class="type">key</span>]) &#123;</span><br><span class="line">      j--;</span><br><span class="line">    &#125;</span><br><span class="line">    temp = arr[<span class="type">key</span>];</span><br><span class="line">    arr[<span class="type">key</span>] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">    <span class="type">key</span> = j</span><br><span class="line">    while(i &lt; j &amp;&amp; arr[i] &lt;= arr[<span class="type">key</span>]) &#123;</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    temp = arr[<span class="type">key</span>];</span><br><span class="line">    arr[<span class="type">key</span>] = arr[i];</span><br><span class="line">    arr[i] = temp;</span><br><span class="line">    <span class="type">key</span> = i;</span><br><span class="line">  &#125;</span><br><span class="line">  return quickSort(arr.slice(<span class="number">0</span>, i)).concat([arr[i]], quickSort(arr.slice(i + <span class="number">1</span>)))</span><br><span class="line">&#125;</span><br><span class="line">console.log(quickSort2(a));</span><br></pre></td></tr></table></figure></p>
<h2 id="27-javascript中实现私有变量和私有方法"><a href="#27-javascript中实现私有变量和私有方法" class="headerlink" title="27.javascript中实现私有变量和私有方法"></a>27.javascript中实现私有变量和私有方法</h2><p>1）构造函数中使用var声明的变量和方法。<br>存在问题，一是构造函数中的私有变量在prototype中没法访问。二是内存消耗，每次new一个新对象时，私有函数都会重新创建一个，最好的应该是共享同一个私有函数。<br>2) 使用闭包，return一个原型对象，这个原型对象是可以访问内部私有变量。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构建一个原型对象</span></span><br><span class="line">Person.prototype = (<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/******私有方法定义*****/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过var定义</span></span><br><span class="line">    <span class="keyword">var</span> toStr = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="string">" is "</span> + <span class="keyword">this</span>.age</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//直接定义</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">privateMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        console.log(<span class="string">"in private method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="comment">//返回的这个函数会返回一个原型对象</span></span><br><span class="line">        constructor:Person,<span class="comment">//把原型的constructor属性设置到正确的构造函数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*******公有方法*******/</span></span><br><span class="line">        printInfo:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">            console.log(<span class="string">"printing info:"</span>,toStr.call(<span class="keyword">this</span>));</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        publicMethod:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">            privateMethod.call(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)();<span class="comment">//注意这里的括号表示立刻执行此匿名函数，返回原型对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//test case</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">'Jaskey'</span>,<span class="number">24</span>);</span><br><span class="line">p.printInfo();<span class="comment">//printing info: Jaskey is 24</span></span><br><span class="line">p.publicMethod();<span class="comment">// in private method</span></span><br><span class="line">p.toStr();<span class="comment">//"undefined is not a function"</span></span><br></pre></td></tr></table></figure></p>
<p><a href="http://jaskey.github.io/blog/2015/03/04/js-private-methods/" target="_blank" rel="noopener">参考博文</a>;</p>
<h2 id="28-HTTP和HTTPS的区别，如何优化HTTPS的性能"><a href="#28-HTTP和HTTPS的区别，如何优化HTTPS的性能" class="headerlink" title="28 HTTP和HTTPS的区别，如何优化HTTPS的性能"></a>28 HTTP和HTTPS的区别，如何优化HTTPS的性能</h2><p>HTTPS 就是在安全的传输层SSL之上发送HTTP请求的，传输正式的内容之前会先进行ssl连接，客户端和服务端互相确认，建立信任之后，会对接下来的传输进行加密。<br>HTTPS对速度的影响主要在协议交互所增加的网络和加密解密相关的计算耗时<br>解决办法：1）在发送syn包的时候也捎上应用层的数据；2）复用session，就是建立SSL连接的时候，保存session，利用session信息提前完成握手，简化握手；3）复用HTTP请求管道，多个请求一起发送。4）优化公私钥计算的算法，或者利用GPU来运算实现加速。</p>
<h2 id="29-tcp三次握手，四次挥手"><a href="#29-tcp三次握手，四次挥手" class="headerlink" title="29 tcp三次握手，四次挥手"></a>29 tcp三次握手，四次挥手</h2><p>1.客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态<br>2.服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；<br>3.客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。</p>
<p>在断开连接的时候会进行4次挥手<br>1.客户端A发送一个FIN，用来关闭客户A到服务器B的数据传送。客户端进入FIN-WAIT-1状态<br>2.服务器B收到这个FIN，它发回一个ACK，确认序号为收到的序号加1。和SYN一样，一个FIN将占用一个序号。服务端进入CLOSE-WAIT状态，客户端A进入FIN-WAIT-2状态<br>3.服务器B关闭与客户端A的连接，发送一个FIN给客户端A。 服务端进入LAST-ACK状态<br>4.客户端A收到后发回ACK报文确认关闭，并将确认序号设置为收到序号加1。进入TIME-WAIT状态，等待30秒后进入CLOSE状态，服务端进入CLOSE状态。</p>
<h2 id="30-原生ajax请求"><a href="#30-原生ajax请求" class="headerlink" title="30 原生ajax请求"></a>30 原生ajax请求</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xmlHttp;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createxmlHttpRequest</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.ActiveXObject)&#123;</span><br><span class="line">        xmlHttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>); <span class="comment">//IE 5 6已经不用兼容了</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">        xmlHttp=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125;</span><br><span class="line">    xmlHttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(xmlHttp.readyState=<span class="number">4</span>&amp;&amp;xmlHttp.status==<span class="number">200</span>)&#123;</span><br><span class="line">            xmlHttp.responseText  <span class="comment">//纯文本</span></span><br><span class="line">            xmlHttp.responseXML    <span class="comment">//xml文档</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="31-一个先递增再递减的数组，怎么获取最大值"><a href="#31-一个先递增再递减的数组，怎么获取最大值" class="headerlink" title="31 一个先递增再递减的数组，怎么获取最大值"></a>31 一个先递增再递减的数组，怎么获取最大值</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function findMax(arr,<span class="keyword">left</span>,<span class="keyword">right</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>((<span class="keyword">right</span>-<span class="keyword">left</span>)==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> arr[<span class="keyword">left</span>]&gt;arr[<span class="keyword">right</span>]?arr[<span class="keyword">left</span>]:arr[<span class="keyword">right</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> middle=<span class="type">Math</span>.floor((<span class="keyword">left</span>+<span class="keyword">right</span>)/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(arr[middle]&gt;arr[middle-<span class="number">1</span>]&amp;&amp;arr[middle]&gt;arr[middle+<span class="number">1</span>])&#123;</span><br><span class="line">        <span class="keyword">return</span> arr[middle];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[middle]&lt;arr[middle+<span class="number">1</span>])&#123;</span><br><span class="line">             <span class="keyword">return</span> findMax(arr,middle,<span class="keyword">right</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> findMax(arr,<span class="keyword">left</span>,middle);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result=findMax(arrTest,<span class="number">0</span>,arrTest.length-<span class="number">1</span>);</span><br><span class="line">alert(result);</span><br></pre></td></tr></table></figure>
<h2 id="32-从地址栏输入url到页面展现，详细描述下这个过程"><a href="#32-从地址栏输入url到页面展现，详细描述下这个过程" class="headerlink" title="32 从地址栏输入url到页面展现，详细描述下这个过程"></a>32 从地址栏输入url到页面展现，详细描述下这个过程</h2><ol>
<li>浏览器通过url知道了请求协议和请求的资源。当协议或者请求不合法时，会把输入框中的文字转给搜索引擎</li>
<li>拉取浏览器的cache，看是否需要更新，否则直接后去缓存。主要看Expires时间、cache设置和浏览器设置.</li>
<li>看输入的地址是否在HSTS(HTTP严格传输安全)列表，在的话会使用https访问,不在则会使用http请求。</li>
<li>转换非ASCII的Unicode字符，浏览器检查输入是否含有不是 a-z， A-Z，0-9， - 或者 . 的字符，如果有的话，浏览器会对主机名部分使用 Punycode 编码</li>
<li>DNS查询。浏览器检查域名是否在缓存当中,如果缓存中没有,就去调用 gethostbyname 库函数（操作系统不同函数也不同）进行查询gethostbyname函数在试图进行DNS解析之前首先检查域名是否在本地Hosts里,Hosts的位置不同的操作系统有所不同,如果gethostbyname没有这个域名的缓存记录,也没有在hosts里找到,它将会向DNS服务器发送一条DNS查询请求。</li>
<li>获得ip和端口号后，就会相应ip所在的服务器通过tcp连接发送请求。</li>
<li>浏览器接收HTTP响应，或许关闭TCP连接，或许用于其他请求</li>
<li>浏览器检查这次响应是否重定向(3XX 状态码),如果是重定向,浏览器会重新发送一次请求,或是一次授权请求(401)错误请求(4XX 和 5XX)等等,如果是错误请求会展现错误页。这些和正常响应（2XX）的处理有所不同。</li>
<li>请求成功会返回一个数据包和比如要不要缓存、更新时间、压缩编码方式之类的信息。</li>
<li>取得内容后，如果要缓存则进行缓存，然后开始解码。开始解析html,创建DOM树,接着开始下载javacript css 那些需要html解析完才下载的外部资源.</li>
<li>通过DOM树和css，创建渲染树，计算每个节点的css样式，得到需要展现在浏览器中的框框。</li>
<li>将渲染树得到的布局绘制到屏幕中。<br><a href="http://fex.baidu.com/blog/2014/05/what-happen/" target="_blank" rel="noopener">参考文章</a>;</li>
</ol>
<h2 id="33请求头和返回头各有些什么信息"><a href="#33请求头和返回头各有些什么信息" class="headerlink" title="33请求头和返回头各有些什么信息"></a>33请求头和返回头各有些什么信息</h2><p>一个请求头<br>GET /mumue/archive/2012/04/23/2467072.html HTTP/1.1<br>Host: <a href="http://www.cnblogs.com" target="_blank" rel="noopener">www.cnblogs.com</a><br>Connection: keep-alive<br>Cache-Control: max-age=0<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,<em>/</em>;q=0.8<br>Upgrade-Insecure-Requests: 1<br>User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.85 Safari/537.36<br>Referer: <a href="https://www.google.com.hk/" target="_blank" rel="noopener">https://www.google.com.hk/</a><br>Accept-Encoding: gzip, deflate, sdch<br>Accept-Language: zh-CN,zh;q=0.8,en;q=0.6<br>Cookie: CNZZDATA1255778100=388437504-1442227353-null%7C1442227353; _ga=GA1.2.1845097067.1442111906; _gat=1<br>If-Modified-Since: Tue, 15 Sep 2015 07:16:13 GMT</p>
<p>一个返回头<br>HTTP/1.1 200 OK<br>Date: Tue, 15 Sep 2015 07:19:07 GMT<br>Content-Type: text/html; charset=utf-8<br>Connection: keep-alive<br>Vary: Accept-Encoding<br>Cache-Control: private, max-age=10<br>Expires: Tue, 15 Sep 2015 07:19:09 GMT<br>Last-Modified: Tue, 15 Sep 2015 07:18:59 GMT<br>X-UA-Compatible: IE=10<br>Content-Length: 34031</p>
<h2 id="34-各种排序算法的时间空间复杂度和稳定性"><a href="#34-各种排序算法的时间空间复杂度和稳定性" class="headerlink" title="34 各种排序算法的时间空间复杂度和稳定性"></a>34 各种排序算法的时间空间复杂度和稳定性</h2><p>参见<a href="http://ldllidonglin.github.io/blog/2015/09/17/2015-09-17-常见排序算法的实现和比较/">这篇文章</a>;</p>
<h2 id="35-从100个数字中选10个不重复的数。"><a href="#35-从100个数字中选10个不重复的数。" class="headerlink" title="35 从100个数字中选10个不重复的数。"></a>35 从100个数字中选10个不重复的数。</h2><ol>
<li><p>直接随机选取，选中一个数后，将这个数从原数组删除</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomSelect</span> (<span class="params">arr,count</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result=[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;count;i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> index=<span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*arr.length);</span><br><span class="line">        <span class="keyword">var</span> d=arr[index];</span><br><span class="line">        result.push(d);</span><br><span class="line">        arr.splice(index,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>随机打乱原数组顺序，返回前10个</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomSelect</span> <span class="params">(arr,count)</span></span> &#123;</span><br><span class="line">    arr.<span class="built_in">sort</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.<span class="built_in">random</span>()<span class="number">-0.5</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="keyword">return</span> arr.slice(<span class="number">0</span>,count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="36-有一个生成均匀1-5随机数的函数，怎么生成同等概率的1-7"><a href="#36-有一个生成均匀1-5随机数的函数，怎么生成同等概率的1-7" class="headerlink" title="36 有一个生成均匀1-5随机数的函数，怎么生成同等概率的1-7"></a>36 有一个生成均匀1-5随机数的函数，怎么生成同等概率的1-7</h2><p>如果a &gt; b，那么一定可以用Randa去实现Randb，所以现在必须用rand5得到一个比7更大的随机数，然后再来时实现rand7.<br>5*(rand5()-1)+rand5()  可以均匀得到1-25，然后从1-21取模，就可以得到1-7了<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function rand7()&#123;</span><br><span class="line">    x=<span class="number">25</span>;</span><br><span class="line">    while(x&gt;<span class="number">21</span>)&#123;</span><br><span class="line">        x=<span class="number">5</span>*(rand5()<span class="number">-1</span>)+rand5();</span><br><span class="line">    &#125;</span><br><span class="line">    return x%<span class="number">7</span>+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">计算概率x=<span class="number">1</span></span><br><span class="line">p(x=<span class="number">1</span>)=<span class="number">3</span>/<span class="number">25</span>+(<span class="number">4</span>/<span class="number">25</span>)*<span class="number">3</span>/<span class="number">25</span>+(<span class="number">4</span>/<span class="number">25</span>)^<span class="number">2</span>*<span class="number">3</span>/<span class="number">25.</span>..</span><br><span class="line">=(<span class="number">3</span>/<span class="number">25</span>)*(<span class="number">1</span>-(<span class="number">4</span>/<span class="number">25</span>)^n)/(<span class="number">1</span><span class="number">-4</span>/<span class="number">25</span>)  <span class="comment">//等比数列</span></span><br><span class="line">=(<span class="number">3</span>/<span class="number">25</span>)*(<span class="number">25</span>/<span class="number">21</span>)</span><br><span class="line">=<span class="number">1</span>/<span class="number">7</span></span><br></pre></td></tr></table></figure></p>
<p>通用的方法是randb=a*(randa()-1)+randa</p>
<h2 id="37-查找两个节点最近的子节点"><a href="#37-查找两个节点最近的子节点" class="headerlink" title="37 查找两个节点最近的子节点"></a>37 查找两个节点最近的子节点</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title">commonParentNode</span>(oNode1, oNode2) &#123;</span><br><span class="line">    if(oNode1.contains(oNode2))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">oNode1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> commonParentNode(oNode1.parentNode,oNode2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="37-从一个未知结构的HTML文档里面筛选出最多的三个标签"><a href="#37-从一个未知结构的HTML文档里面筛选出最多的三个标签" class="headerlink" title="37 从一个未知结构的HTML文档里面筛选出最多的三个标签"></a>37 从一个未知结构的HTML文档里面筛选出最多的三个标签</h2><p>非常笨的方法，从document开始遍历，记录在obj中，同时比较得到最多的三个标签。<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">var tagObj=&#123;&#125;;</span><br><span class="line">    var top3Dom=[];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getNode</span> <span class="params">(dom)</span> &#123;</span></span><br><span class="line">        var childs=dom.children;</span><br><span class="line">        <span class="keyword">if</span>(childs)&#123;</span><br><span class="line">            <span class="keyword">for</span>(var <span class="built_in">i</span>=<span class="number">0</span>;<span class="built_in">i</span>&lt;childs.<span class="built_in">length</span>;<span class="built_in">i</span>++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!tagObj[childs[<span class="built_in">i</span>].tagName])&#123;</span><br><span class="line">                    tagObj[childs[<span class="built_in">i</span>].tagName]=<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span>(top3Dom.<span class="built_in">length</span>&lt;<span class="number">3</span>)&#123;</span><br><span class="line">                        var having=<span class="built_in">false</span>;</span><br><span class="line">                        <span class="keyword">for</span>(var <span class="built_in">j</span>=<span class="number">0</span>;<span class="built_in">j</span>&lt;top3Dom.<span class="built_in">length</span>;<span class="built_in">j</span>++)&#123;</span><br><span class="line">                            <span class="keyword">if</span>(childs[<span class="built_in">i</span>].tagName==top3Dom[<span class="built_in">j</span>])&#123;</span><br><span class="line">                                having=<span class="built_in">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(!having)&#123;</span><br><span class="line">                            top3Dom.push(childs[<span class="built_in">i</span>].tagName);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    tagObj[childs[<span class="built_in">i</span>].tagName]+=<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span>(childs[<span class="built_in">i</span>].tagName==top3Dom[<span class="number">0</span>])&#123;</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(childs[<span class="built_in">i</span>].tagName==top3Dom[<span class="number">1</span>])&#123;</span><br><span class="line">                        </span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(childs[<span class="built_in">i</span>].tagName==top3Dom[<span class="number">2</span>])&#123;</span><br><span class="line"></span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(tagObj[childs[<span class="built_in">i</span>].tagName]&gt;tagObj[top3Dom[<span class="number">0</span>]])&#123;</span><br><span class="line">                        top3Dom[<span class="number">0</span>]=childs[<span class="built_in">i</span>].tagName;</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(tagObj[childs[<span class="built_in">i</span>].tagName]&gt;tagObj[top3Dom[<span class="number">1</span>]])&#123;</span><br><span class="line">                        top3Dom[<span class="number">1</span>]=childs[<span class="built_in">i</span>].tagName;</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(tagObj[childs[<span class="built_in">i</span>].tagName]&gt;tagObj[top3Dom[<span class="number">2</span>]])&#123;</span><br><span class="line">                        top3Dom[<span class="number">2</span>]=childs[<span class="built_in">i</span>].tagName;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                getNode(childs[<span class="built_in">i</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    getNode(document);</span><br><span class="line">    console.<span class="built_in">log</span>(tagObj);</span><br><span class="line">    console.<span class="built_in">log</span>(top3Dom);</span><br></pre></td></tr></table></figure></p>
<h2 id="38-两栏布局或者三栏布局左边固定，右边自适应"><a href="#38-两栏布局或者三栏布局左边固定，右边自适应" class="headerlink" title="38 两栏布局或者三栏布局左边固定，右边自适应"></a>38 两栏布局或者三栏布局左边固定，右边自适应</h2><h3 id="1-两栏布局，一侧定宽，一侧自适应"><a href="#1-两栏布局，一侧定宽，一侧自适应" class="headerlink" title="1. 两栏布局，一侧定宽，一侧自适应"></a>1. 两栏布局，一侧定宽，一侧自适应</h3><p>1) float+margin:原理是左侧固定的div设置float后，下面的right就上去了，然后设置margin-left,因为宽度会默认为剩下的宽度，所以可以自适应<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#<span class="attribute">left</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">    <span class="attribute">background-color</span>:yellow;</span><br><span class="line">&#125;</span><br><span class="line">#<span class="attribute">right</span>&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>:<span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>:blue;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="selector-tag">div</span> id=<span class="string">"left"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> id=<span class="string">"right"</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
<p>2) absolute+margin:原理是一样的，position:absolute，是left脱离文档流，那right就顶上去了，然后给right设置margin-left;因为宽度会默认为剩下的宽度，所以可以自适应<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#<span class="attribute">left</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>:yellow;</span><br><span class="line">&#125;</span><br><span class="line">#<span class="attribute">right</span>&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>:<span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>:blue;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="selector-tag">div</span> id=<span class="string">"left"</span>&gt;<span class="attribute">left</span>&lt;/div&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> id=<span class="string">"right"</span>&gt;<span class="attribute">right</span>&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
<p>3)float+负margin;这要增加一个float,width是100%的dom，然后里面放置right，dom下面放置left。正常流的话，right会和这个dom重叠，这时给right设置margin-left，然后给left设置float，同时margin-left:-100%，那left就会回退到dom的左边，因为正常情况下是在dom的下方的，因为dom的width是100%，但是margin-left=-100%，所以left就会到right空出的那个区域。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-id">#box</span>&#123;</span></span><br><span class="line">        width: 100%;</span><br><span class="line">        float: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-id">#right</span>&#123;</span></span><br><span class="line">        background-color: blue;</span><br><span class="line">        height: 100px;</span><br><span class="line">        margin-left: 300px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-id">#left</span>&#123;</span></span><br><span class="line">        background-color: yellow;</span><br><span class="line">        height: 100px;</span><br><span class="line">        width: 300px;</span><br><span class="line">        float: left;</span><br><span class="line">        margin-left: -100%;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>4）flex<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml">.container </span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">    display: flex;</span></span><br><span class="line"><span class="xquery">&#125;</span></span><br><span class="line"><span class="xml">.left </span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">    width: <span class="number">300</span>px;</span></span><br><span class="line"><span class="xquery">&#125;</span></span><br><span class="line"><span class="xml">.right </span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">    flex: <span class="number">1</span>;</span></span><br><span class="line"><span class="xquery">&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<h3 id="2-三栏布局，两侧固定，中间自适应"><a href="#2-三栏布局，两侧固定，中间自适应" class="headerlink" title="2. 三栏布局，两侧固定，中间自适应"></a>2. 三栏布局，两侧固定，中间自适应</h3><p>1) 自身浮动,浮动脱离文档流，然后中间区域用margin实现和左右的距离<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.<span class="attribute">left</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line">.main&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span> <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="attribute">right</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>:right;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="selector-tag">div</span> id=<span class="string">"left"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> id=<span class="string">"right"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> id=<span class="string">"main"</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
<p>2) margin负值法。首先，中间的主体要使用双层标签。外层div宽度100%显示，并且浮动（本例左浮动，下面所述依次为基础），内层div为真正的主体内容，含有左右210像素的margin值。左栏与右栏都是采用margin负值定位的，左栏左浮动，margin-left为-100%，由于前面的div宽度100%与浏览器，所以这里的-100%margin值正好使左栏div定位到了页面的左侧；右侧栏也是左浮动，其margin-left也是负值，大小为其本身的宽度即200像素。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"main"</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=<span class="string">"body"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"left"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"right"</span>&gt;&lt;/div&gt;</span><br><span class="line">.main&#123;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10%</span>;</span><br><span class="line">&#125;</span><br><span class="line">.body&#123;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span> <span class="number">210px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="attribute">left</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>:-<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="attribute">right</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">    <span class="attribute">margin-left</span>:-<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>3)绝对定位<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"left"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"right"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"main"</span>&gt;&lt;/div&gt;</span><br><span class="line">.main&#123;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span> <span class="number">210px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="attribute">left</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="attribute">right</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">right</span>:<span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="39-图片轮播，点击切换"><a href="#39-图片轮播，点击切换" class="headerlink" title="39 图片轮播，点击切换"></a>39 图片轮播，点击切换</h2><h2 id="40-赋值坑、代码题"><a href="#40-赋值坑、代码题" class="headerlink" title="40 赋值坑、代码题"></a>40 赋值坑、代码题</h2><ol>
<li><p>坑一</p>
 <figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a = &#123;n:<span class="number">1</span>&#125;<span class="comment">;  </span></span><br><span class="line">var <span class="keyword">b </span>= a<span class="comment">; // 持有a，以回查  </span></span><br><span class="line">a.x = a = &#123;n:<span class="number">2</span>&#125;<span class="comment">;  </span></span><br><span class="line">alert(a.x)<span class="comment">;// --&gt; undefined  </span></span><br><span class="line">alert(<span class="keyword">b.x);// </span>--&gt; &#123;n:<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>
<p> 原理：解析器会先找到 a 和 a.x 的指针.如果已有指针，那么不改变它.如果没有指针，即那个变量还没被申明,那么就创建它,指向null.a 是有指针的，指向 {n:1}；a.x 是没有指针的，所以创建它，指向 null。然后把上面找到的指针，都指向最右侧赋的那个值，即 {n:2}。所以给a.x赋值时，是给a原来指向的那个x属性，因为b=a，所以b中有这个x属性.但是a被赋值为{n:2}了，所以a.x为undefined。</p>
</li>
<li><p>坑二</p>
 <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a=b=<span class="number">10</span>; </span><br><span class="line">  &#125;)();</span><br><span class="line">  alert(<span class="keyword">typeof</span> a) <span class="comment">//undefined</span></span><br><span class="line">  alert(<span class="keyword">typeof</span> b)  <span class="comment">//number;</span></span><br></pre></td></tr></table></figure>
<p> 从右向左赋值，给b赋值时，没有var，所以自动升级为全局变量，而a是局部变量。</p>
</li>
<li>&amp;&amp;和|| <figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="number">1</span>||<span class="number">2</span>);  <span class="comment">//1</span></span><br><span class="line">alert(<span class="number">1</span>&amp;&amp;<span class="number">2</span>);   <span class="comment">//2</span></span><br><span class="line">alert(<span class="number">1</span>&gt;<span class="number">2</span>||<span class="number">2</span>&gt;<span class="number">3</span>); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="41-常遇到的兼容性问题"><a href="#41-常遇到的兼容性问题" class="headerlink" title="41 常遇到的兼容性问题"></a>41 常遇到的兼容性问题</h2><ol>
<li>绑定事件 IE用atachEvent(“on”+type,fn); chrome 使用addEventListener(type,fn,false);事件移除 removeEventListen,detachEvent,取消冒泡e.stopPropagation() event.cancelBubble=true;获取当前元素 e.currentTarget e.srcElement。阻止默认事件 e.preventDefault() e.returnValue=false;</li>
<li><p>xhr对象，在IE7+及其他浏览器使用new XMLHttpRequest(),否则使用</p>
 <figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.ActiveXObject)&#123;  //IE11 <span class="keyword">if</span> (<span class="string">"ActiveXObject"</span> <span class="keyword">in</span> <span class="built_in">window</span>)</span><br><span class="line">    xhr= <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>很多标签padding和margin的默认值不一致，在css初始的地方加入*{margin:0;padding:0;}</p>
</li>
<li>Chrome和Safari中紧密相连的行内元素换行时会换行显示，并且不会随着布局大小自动换行显示。解决办法加入空格或者换行符。</li>
<li>ios微信中，一个无限循环的transition动画中，长按复制失效，解决办法，要长按之前把动画暂停，长按复制这个逻辑操作结束后恢复动画。</li>
</ol>
<h2 id="42-Cache-Control的设置"><a href="#42-Cache-Control的设置" class="headerlink" title="42 Cache-Control的设置"></a>42 Cache-Control的设置</h2><p>Cache-Control头控制谁在什么条件下可以缓存以及可以缓存多久。<a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching?hl=zh-cn" target="_blank" rel="noopener">http缓存</a></p>
<ol>
<li>no-cache 表示必须先于服务器确认返回的响应是否被更改，然后才能使用该响应来满足后续的同一个网址的请求，如果有ETag,no-cache会发起往返通信来验证缓存的响应,如果资源未被更改,可以避免下载。</li>
<li>no-store 禁止缓存，每次都会发送请求，下载新的完整响应</li>
<li>public 表示可以缓存，cdn也可以</li>
<li>private 表示例如cdn等中继缓存不能缓存</li>
<li>max-age 缓存有效时间<br>如果要废弃缓存，比如css更新了，给html标记no-cache,给css文件加上版本号或者hash值,所以请求html时，就会请求最新的css。对于没有隐私，比如css可以允许cdn缓存。<br>ETag的作用就是在缓存过期，但是资源又没有更改时，就没有必要重新下载新的，发送请求时带上If-None-Match,服务器会验证，如果一致，则返回304 Not Modified跳过下载。缓存重新启用。</li>
</ol>
<h2 id="43-用css3实现三角形"><a href="#43-用css3实现三角形" class="headerlink" title="43 用css3实现三角形"></a>43 用css3实现三角形</h2><p>实现原理就是用让其余三个border为透明色，具体看<a href="http://www.zhangxinxu.com/wordpress/2010/05/css-border%E4%B8%89%E8%A7%92%E3%80%81%E5%9C%86%E8%A7%92%E5%9B%BE%E5%BD%A2%E7%94%9F%E6%88%90%E6%8A%80%E6%9C%AF%E7%AE%80%E4%BB%8B/" target="_blank" rel="noopener">这里</a></p>
<pre><code><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#tn&#123;</span><br><span class="line">    <span class="built_in">width</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="built_in">height</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="built_in">border</span>: 100px solid;</span><br><span class="line">    <span class="built_in">border</span>-<span class="built_in">color</span>:#ff3300 <span class="built_in">transparent</span>  <span class="built_in">transparent</span>  <span class="built_in">transparent</span> ;</span><br><span class="line">&#125;</span><br><span class="line">&lt;div id=<span class="string">"tn"</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>
</code></pre><h2 id="44-如何检查一个变量是不是数组"><a href="#44-如何检查一个变量是不是数组" class="headerlink" title="44 如何检查一个变量是不是数组"></a>44 如何检查一个变量是不是数组</h2><p>一般情况下使用 instancof就可以判断，但是如下情况就不行了<br>example1:<br>    <figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span><span class="params">()</span><span class="comment">&#123;&#125;</span>;</span> </span><br><span class="line">A.prototype = [ ];</span><br><span class="line"><span class="keyword">var</span> a=<span class="keyword">new</span> A();</span><br><span class="line">alert( a instanceof <span class="keyword">Array</span>); <span class="keyword">true</span></span><br><span class="line">alert(a<span class="function">.<span class="keyword">constructor</span>);</span>  <span class="comment">//function Array()&#123;[native code]&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>example2:<br>    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params"></span>)</span>&#123;&#125;;  </span><br><span class="line">t.prototype  = <span class="built_in">Array</span>.prototype  </span><br><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> t();  </span><br><span class="line">alert(x <span class="keyword">instanceof</span> <span class="built_in">Array</span>);<span class="comment">//弹出true</span></span><br></pre></td></tr></table></figure></p>
<p>example3:<br>    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype = &#123;  </span><br><span class="line">    splice:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">11</span>)&#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="keyword">var</span> arr = [];  </span><br><span class="line">alert(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>);<span class="comment">//弹出true,说明与Array的内置原型对象的引用还是保存着的  </span></span><br><span class="line">alert(arr.splice) <span class="comment">//弹出function splice()&#123; [native code]&#125;;说明上面的改变Array原型指向的代码失效，浏览器静默失败。</span></span><br></pre></td></tr></table></figure></p>
<p>因为instanceof操作符的原理是如果类的原型与对象原型链上的某一个原型是同一个对象，那么instanceof运算将返回true。所以最保险的方案是：<br>    <figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(Object.prototype.toString.<span class="built_in">call</span>(a)==<span class="string">"[object Array]"</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="45-常见的浏览器内核有哪些"><a href="#45-常见的浏览器内核有哪些" class="headerlink" title="45 常见的浏览器内核有哪些"></a>45 常见的浏览器内核有哪些</h2><p>Trident内核：IE,MaxThon,TT,The World,360,搜狗浏览器等。[又称MSHTML]<br>Gecko内核：Netscape6及以上版本，FF,MozillaSuite/SeaMonkey等<br>Presto内核：Opera7及以上。      [Opera内核原为：Presto，现为：Blink;]<br>Webkit内核：Safari,Chrome等。   [ Chrome的：Blink（WebKit的分支）]</p>
<h2 id="46-给你一个正整数怎么判断它是不是平方数"><a href="#46-给你一个正整数怎么判断它是不是平方数" class="headerlink" title="46 给你一个正整数怎么判断它是不是平方数"></a>46 给你一个正整数怎么判断它是不是平方数</h2><ol>
<li>开方再平方看是否相等</li>
<li>枚举从n/2开始枚举</li>
</ol>
<h2 id="47-两个单链表，怎么判断它们有没有重复节点，如何找到第一个交叉节点。"><a href="#47-两个单链表，怎么判断它们有没有重复节点，如何找到第一个交叉节点。" class="headerlink" title="47 两个单链表，怎么判断它们有没有重复节点，如何找到第一个交叉节点。"></a>47 两个单链表，怎么判断它们有没有重复节点，如何找到第一个交叉节点。</h2><p>判断有没有重复节点，直接各自遍历到尾节点，看尾节点是否相同即可，因为单链表相交必然是Y型相交。时间复杂度是O(m+n),要找第一个交叉节点,</p>
<ul>
<li>用指针a，b分别先遍历两个表</li>
<li>会有一个表先到null，这个表就是短表，把先到null的指针记为a，那另一个b则为长表的指针，这时从长表的头用指针c开始遍历，直到前一个长表头遍历指针b到null,这时c已经走了两表之间的长度差的步数</li>
<li>此时d指针从短表开始遍历，指针c d会同时到达尾节点，所以当d==c时，这个节点就是第一个交叉节点.  </li>
</ul>
<h2 id="48-马路上在30分钟内有车通过的概率是90-，10分钟内有车通过的概率是多少？"><a href="#48-马路上在30分钟内有车通过的概率是90-，10分钟内有车通过的概率是多少？" class="headerlink" title="48 马路上在30分钟内有车通过的概率是90%，10分钟内有车通过的概率是多少？"></a>48 马路上在30分钟内有车通过的概率是90%，10分钟内有车通过的概率是多少？</h2><p>设10分钟有车通过的概率是x,那30分钟内没有车通过的概率是10%==(1-x)^3,所以x=54%(约等于)</p>
<h2 id="49-有100瓶可乐，其中一瓶有毒，喝完60分钟后会拉肚子，最少用几个人喝酒可以找出有毒的这瓶，如果要在60分钟后立即找出有毒的这瓶，怎么找？"><a href="#49-有100瓶可乐，其中一瓶有毒，喝完60分钟后会拉肚子，最少用几个人喝酒可以找出有毒的这瓶，如果要在60分钟后立即找出有毒的这瓶，怎么找？" class="headerlink" title="49 有100瓶可乐，其中一瓶有毒，喝完60分钟后会拉肚子，最少用几个人喝酒可以找出有毒的这瓶，如果要在60分钟后立即找出有毒的这瓶，怎么找？"></a>49 有100瓶可乐，其中一瓶有毒，喝完60分钟后会拉肚子，最少用几个人喝酒可以找出有毒的这瓶，如果要在60分钟后立即找出有毒的这瓶，怎么找？</h2><p>第一个问题，不限时间的话，最少用7个人，第一次一个人喝50瓶，每瓶都喝一点，如果拉肚子，则有毒的这瓶在这50瓶中，如果没有，则在另外50瓶中，这一次就排除了50瓶，然后让第二个人可能存在有毒的50瓶中的25瓶，同理，范围缩小到25，依次让剩下的人喝13 7 4 2 1，所以一共7个人即可。<br>第二个问题，要在60分钟后立即找出有毒的可乐，找7个人，编码为0-6，100瓶可乐编码为1-100，转成二进制，比如36的二进制编码为0100100，那36瓶就给编号为2 5的人喝，这样100瓶全部喝完，60分钟时看那几个人是拉肚子的，比如编码为1 3 6的人拉肚子，那就是1001010这个组合拉肚子了，那说明是74瓶是有毒的。</p>
<h2 id="50-css垂直居中"><a href="#50-css垂直居中" class="headerlink" title="50 css垂直居中"></a>50 css垂直居中</h2><ol>
<li><p>绝对定位，然后margin:auto;top/bottom都为0,直接看代码</p>
 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.Center-Container</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.Absolute-Center</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: auto;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>; <span class="attribute">left</span>: <span class="number">0</span>; <span class="attribute">bottom</span>: <span class="number">0</span>; <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>display:table;使用表格的vertical-align属性</p>
 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>:table;</span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-id">#cell</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>:table-cell; </span><br><span class="line">    <span class="attribute">vertical-align</span>:middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>绝对定位，距离top为50%，然后margin-top=-50%*height,缺点就是必须指定高度</p>
 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">content</span> &#123; </span><br><span class="line">    <span class="attribute">position</span>:absolute; </span><br><span class="line">    <span class="attribute">top</span>:<span class="number">50%</span>; </span><br><span class="line">    <span class="attribute">height</span>:<span class="number">240px</span>; </span><br><span class="line">    <span class="attribute">margin-top</span>:-<span class="number">120px</span>; <span class="comment">/* negative half of the height */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在content元素外插入一个浮动div，设置高度为50%，然后margin-bottom:-50%*height;content清除浮动</p>
 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">floater</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>:left; </span><br><span class="line">    <span class="attribute">height</span>:<span class="number">50%</span>; </span><br><span class="line">    <span class="attribute">margin-bottom</span>:-<span class="number">120px</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-id">#content</span> &#123;</span><br><span class="line">    <span class="attribute">clear</span>:both; </span><br><span class="line">    <span class="attribute">height</span>:<span class="number">240px</span>; </span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>文本垂直居中的话，设置文本line-height为对象的高度就好了</p>
 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">content</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>; </span><br><span class="line">    <span class="attribute">line-height</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><a href="http://douglasheriot.com/tutorials/css_vertical_centre/demo4.html" target="_blank" rel="noopener">效果</a></p>
<h2 id="51-“attributes”-和-“property”-的区别是什么？"><a href="#51-“attributes”-和-“property”-的区别是什么？" class="headerlink" title="51 “attributes” 和 “property” 的区别是什么？"></a>51 “attributes” 和 “property” 的区别是什么？</h2><p>attribute是一个特性节点，该属性中包含着一个NamedNodeMap对象，该对象中包含一个类数组结构，和一些属性和方法。Element元素的每个特性都由一个Attr类型的节点表示，这些节点存储在NamedNodeMap的类数组结构中。通常要获取一个attribute节点直接使用ele.getAttribute()函数来获取，删除就是使用removeAttribute.<br>1)attributes中的Attr Nodes可以包含任意类型的特性，而只有HTML元素的标准特性才能作为property访问，就是说可以用“.”号来获取。<br>2）getAttribute（）任何情况下都只能返回字符串，而在onclick上绑定事件处理程序时，使用属性方式.onclick会返回JavaScript函数。</p>
<h2 id="52-前端开发中哪些情况会出现内存泄露，怎么避免"><a href="#52-前端开发中哪些情况会出现内存泄露，怎么避免" class="headerlink" title="52 前端开发中哪些情况会出现内存泄露，怎么避免"></a>52 前端开发中哪些情况会出现内存泄露，怎么避免</h2><ol>
<li>DOM对象和JS对象相互引用</li>
<li>给DOM绑定事件后，有把这个DOM给删除了。</li>
</ol>
<h2 id="53-“use-strict”-是什么意思-使用它的好处和坏处分别是什么？"><a href="#53-“use-strict”-是什么意思-使用它的好处和坏处分别是什么？" class="headerlink" title="53 “use strict”;是什么意思 ? 使用它的好处和坏处分别是什么？"></a>53 “use strict”;是什么意思 ? 使用它的好处和坏处分别是什么？</h2><p>启用严格模式，消除一些js语法中不够严谨的地方及不安全的地方，增加运行速度。必须放在第一行。<br>1)去除with关键字；<br>2)局部变量在赋值前必须先声明，不会出现那种局部变量提升为全局变量的情况了；<br>3)函数中的this如果没有指定或者为null或者undefined，不会默认为全局。<br>4)构造函数内有this，如果没用new，而是直接调用的话会抛出异常，因为this会保持为undefined。<br>5)重复的变量名即重复的属性名均会报错<br>6)eval在执行时，不会在当前作用域创建变量和函数，但是可以获取eval的返回值</p>
<h2 id="54-mouseover和mouseenter的区别"><a href="#54-mouseover和mouseenter的区别" class="headerlink" title="54 mouseover和mouseenter的区别"></a>54 mouseover和mouseenter的区别</h2><p>mouseover是会冒泡的，所以在经过绑定的DOM的子元素的时候也会触发，mouseenter不会</p>
<h2 id="56"><a href="#56" class="headerlink" title="56"></a>56</h2><p>优点：解决加载缓慢的第三方内容如图标和广告，可以并行加载脚本.<br>缺点：iframe会阻塞主iframe的优缺点页面的onload事件，即使内容为空，加载也需要事件，没有语义，不利于seo</p>
<h2 id="57-css的盒子模型"><a href="#57-css的盒子模型" class="headerlink" title="57 css的盒子模型"></a>57 css的盒子模型</h2><p>有两种：</p>
<ul>
<li>IE 盒子模型: content部分包含了 border 和 pading;</li>
<li>标准 W3C 盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border);  </li>
</ul>
<h2 id="58-页面导入样式时，使用link和-import有什么区别？"><a href="#58-页面导入样式时，使用link和-import有什么区别？" class="headerlink" title="58 页面导入样式时，使用link和@import有什么区别？"></a>58 页面导入样式时，使用link和@import有什么区别？</h2><ol>
<li>@import 机制是不同于link的，link是在加载页面前把css加载完毕，而@import url（）则是页面全部下载完后再加载，所以会出现一开始没有css样式，闪烁一下出现样式后的页面(网速慢的情况下)。</li>
<li>@import引入的css，无法用js控制DOM来修改，link可以</li>
</ol>
<h2 id="59-CSS选择符有哪些？哪些属性可以继承？"><a href="#59-CSS选择符有哪些？哪些属性可以继承？" class="headerlink" title="59 CSS选择符有哪些？哪些属性可以继承？"></a>59 CSS选择符有哪些？哪些属性可以继承？</h2><ol>
<li>id选择器(# myid)</li>
<li>类选择器(.myclassname)</li>
<li>标签选择器(div, h1, p)</li>
<li>相邻选择器(h1 + p)</li>
<li>子选择器(ul &gt; li)</li>
<li>后代选择器(li a)</li>
<li>通配符选择器( * )</li>
<li>属性选择器(a[rel = “external”])</li>
<li>伪类选择器(a: hover, li:nth-child)<br>可以继承的样式有：font-size，font-family，color，text-indent(缩进)</li>
</ol>
<h2 id="60-bind-apply-call的区别"><a href="#60-bind-apply-call的区别" class="headerlink" title="60 bind apply call的区别"></a>60 bind apply call的区别</h2><h2 id="61-了解的设计模式"><a href="#61-了解的设计模式" class="headerlink" title="61 了解的设计模式"></a>61 了解的设计模式</h2><h2 id="62-css性能"><a href="#62-css性能" class="headerlink" title="62 css性能"></a>62 css性能</h2><h2 id="63-flex都有哪些属性"><a href="#63-flex都有哪些属性" class="headerlink" title="63 flex都有哪些属性"></a>63 flex都有哪些属性</h2><h2 id="64-什么是同源策略，哪些请求会遇到跨域问题，为什么有同源策略"><a href="#64-什么是同源策略，哪些请求会遇到跨域问题，为什么有同源策略" class="headerlink" title="64 什么是同源策略，哪些请求会遇到跨域问题，为什么有同源策略"></a>64 什么是同源策略，哪些请求会遇到跨域问题，为什么有同源策略</h2><h2 id="65-哪些操作会导致页面重绘。"><a href="#65-哪些操作会导致页面重绘。" class="headerlink" title="65 哪些操作会导致页面重绘。"></a>65 哪些操作会导致页面重绘。</h2><ol>
<li>修改DOM</li>
<li>修改样式表</li>
<li>用户事件（鼠标悬停、页面滚动、输入框键入文字等）<br>解决办法：</li>
<li>DOM的多个操作放在一起（浏览器会智能把操作集中在一起，然后一次执行），两个读操作之间不要插入写操作，因为这会导致浏览器立即重绘。</li>
<li>如果某个样式是通过样式重排得到的，把结果缓存，防止再次要用这个值时再重排。</li>
<li>对样式的修改不要一条一条，最好通过修改class的方式一次改变。</li>
<li>使用离线DOM，插入DOM使用DocumenFragment、使用cloneNode方法，操作这个克隆node后再替换原始节点。</li>
<li>需要多次重绘的节点，可以先display:none，操作完再恢复显示。</li>
<li>position为absolute和fixed的元素脱离文档流，重排开销很小。</li>
<li>使用虚拟DOM，比如React。</li>
<li>使用requestAnimationFrame、requestIdleCallback()调节动画渲染频次，因为受屏幕的刷新率的限制，超过屏幕的刷新率是没有意义的，只会消耗性能。</li>
</ol>
<h2 id="66-a标签点击不跳转的方法"><a href="#66-a标签点击不跳转的方法" class="headerlink" title="66 a标签点击不跳转的方法"></a>66 a标签点击不跳转的方法</h2><ol>
<li>直接在标签上onclick=”return false”</li>
<li>绑定onclick事件 e.preventDefault()，IE9之前e.returnValue = false;</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 面试 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[个人博客搭建]]></title>
      <url>http://ldllidonglin.github.io/blog/2015/07/10/2015-07-10-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h1 id="个人博客搭建"><a href="#个人博客搭建" class="headerlink" title="个人博客搭建"></a>个人博客搭建</h1><h2 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h2><p>使用github page，因为没有在本地使用jekyll生成静态页面，而直接上传md到github的话，渲染会有问题，之前一直没有花时间解决，这几天没事做就折腾了以下。试了几种方式：<br><a id="more"></a></p>
<h3 id="使用sublime的markdown-preview-插件生成html"><a href="#使用sublime的markdown-preview-插件生成html" class="headerlink" title="使用sublime的markdown preview 插件生成html"></a>使用sublime的markdown preview 插件生成html</h3><p>我这个博客是用来随手记的，修改博客的操作应该会有很多次，生成了html后就不好修改了，而且目录、导航、分页、首页等就得自己写了，所以放弃之。</p>
<h3 id="strapdown-js"><a href="#strapdown-js" class="headerlink" title="strapdown.js"></a>strapdown.js</h3><p>用strapdown.js动态生成html，详细见<a href="http://strapdownjs.com/" target="_blank" rel="noopener">strapdownjs</a>;最后采用的办法也是这个，但是文件不能写成md，因为如果是md，github上的jekyll会自动渲染，那strapdown就失效了，所以只能写成html，在sublime上装markdown preview插件 可以预览。但这样的弊端就是在github上直接看就不好看了，那也没办法，只能这样做了。</p>
<h3 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h3><p><a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">hexo github</a><br>从网络中的众多博客中学来的，hexo generate后得到的是静态的html，而且还挺美观的，使用的theme是<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">next</a>.真正的就是专注于写博客,分页、标签、目录什么的都解决了,jekeyll分页得自己解决。把生成的public放到sae或者git上，就行了。折腾了两天最后决定使用这种方法。<a href="https://github.com/iissnan/hexo-theme-next/wiki/%E5%88%9B%E5%BB%BA%E6%A0%87%E7%AD%BE%E4%BA%91%E9%A1%B5%E9%9D%A2" target="_blank" rel="noopener">常见问题解决官网wiki</a></p>
<ol>
<li>在nodejs下安装hexo<br>sudo npm install hexo-cli -g</li>
<li><a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">安装next主题</a><br>git clone <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a> themes/next</li>
<li>配置 把主站的_config.yml的theme改成next,主题的配置文件中scheme: Mist 语言改为zh-Hans</li>
<li>markdown 格式要注意markdown语法后面要加一个空格</li>
<li>push 到github上</li>
<li>注意：如果不是在根目录，比如我的是<a href="https://ldllidonglin.github.io/blog类似的访问路径的话，得修改根目录下的_config.yml中的root,改为：root">https://ldllidonglin.github.io/blog类似的访问路径的话，得修改根目录下的_config.yml中的root,改为：root</a>: /blog/，然后修改相对应的theme目录下的_config.yml其中的menu目录如：archives: /blog/archives<br>Directory不用改，它会生成到public中</li>
<li>生成标签云页面，首先在主题的配置文件中把tags属性配置好，然后在任意目录执行hexo new page “tags”,会在sources目录下新建tags目录，然后新建一个index.md文档，并修改改文件，添加type: tags,在执行hexo g时，就会在public/tags下生成一个index.htm.</li>
<li>分类、关于我页面创建方法类似</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 自学 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jquery源码学习2]]></title>
      <url>http://ldllidonglin.github.io/blog/2015/06/27/2015-05-23-jQuery%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A02/</url>
      <content type="html"><![CDATA[<ol>
<li>在函数中要使用window时，可以作为参数传进去，有两个好处，一是可以提高性能，因为window是最顶层的变量，函数中使用window时，首先是在局部变量和参数中寻找，依次往上找，在参数中传进去，可以更快找到。二是在代码压缩时，函数内的window就可以压缩了。那比如window.location、window.document等常用变量也可以赋值给局部变量，那样既提高效率，又可以方便压缩。<a id="more"></a></li>
<li>jQ中的 $.extend()方法用的是拷贝继承，比较大众化</li>
<li>$(function(){})其实调用的是$(docuemnt).ready(function(){}) 又相当于$().ready() 又相当于jQuery.ready.promise().done(fn);最终调用的是$.ready()</li>
<li>typeof NaN==number typeof 除了判断未定义变量外，没什么作用，代码中不推荐使用,typeof的结果可能有（“undefined”（未定义或者未初始化）、”boolean”、“string”、“number”、“object”（对象或者null） 、“function”）</li>
<li>js一共5中原始数据类型 Undefined Null Boolean Number String ,还有一种复杂数据类型，Object,所有的值都是上述类型之一。</li>
<li>(null或则undefined)==null 为true 所以要判断一个变量是否为null或者undefined，只要if(aa==null)即可</li>
<li>原生js不能获得隐藏元素的属性值 可以使用display:block;visibility:hidden;position:absolute,就可以获得元素的style里的属性了。上面这样写和display:none是一样的效果，但是可以获取属性。$.swap可以提供这样的实现。</li>
<li>nodeType的值有：<br>元素element   1<br>属性attr   2<br>文本text   3<br>注释comments   8<br>文档document   9 </li>
<li>DOM元素与对象之间互相引用,很可能就会发生内存泄露。所以用$.data比attr和prop可以避免这点。其实利用cache中介</li>
<li>queue 中存储的都是函数</li>
<li>attr 调用的是setAttribute(可以设置获取自定义属性) prop调用的是 . 或则[] prop不常用</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jquery </tag>
            
            <tag> 源码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[日常点滴记录]]></title>
      <url>http://ldllidonglin.github.io/blog/2015/06/22/2015-06-22-%E6%97%A5%E5%B8%B8%E7%82%B9%E6%BB%B4%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h1 id="平常写代码中遇到的小问题，在此记录之。"><a href="#平常写代码中遇到的小问题，在此记录之。" class="headerlink" title="平常写代码中遇到的小问题，在此记录之。"></a>平常写代码中遇到的小问题，在此记录之。</h1><a id="more"></a>
<h2 id="1-数组的浅拷贝问题："><a href="#1-数组的浅拷贝问题：" class="headerlink" title="1 数组的浅拷贝问题："></a>1 数组的浅拷贝问题：</h2><p><em>js中两个对象（如数组、object）之间如果只是简单的赋值，那就会造成浅拷贝的问题，改动其中一个，会造成改变其他的变量，数组的解决办法有两个：</em><br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>：var array2=array1.slice(<span class="number">0</span>);  //因为数组的操作都是返回一个新数组，而不是对原数组进行操作</span><br><span class="line"><span class="symbol">2 </span>var array2=array2.concat();</span><br></pre></td></tr></table></figure></p>
<p><em>对象的深拷贝，目前为止我所看到的解决办法都是用递归实现属性遍历，把属性都赋给新对象。以下代码来自<a href="http://biyutong.iteye.com/blog/1562010" target="_blank" rel="noopener">参考博文</a></em><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Object.prototype.clone = function()&#123; </span><br><span class="line">    <span class="keyword">var</span> o = <span class="keyword">this</span>.<span class="keyword">constructor</span> === Array ? [] : &#123;&#125;; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> e <span class="keyword">in</span> <span class="keyword">this</span>)&#123; </span><br><span class="line">        o[e] = typeof <span class="keyword">this</span>[e] === <span class="string">"object"</span> ? <span class="keyword">this</span>[e].clone() : <span class="keyword">this</span>[e]; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> o; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="2-性能优化tips"><a href="#2-性能优化tips" class="headerlink" title="2 性能优化tips"></a>2 性能优化tips</h2><p>1.使用一次innerHTML赋值代替构建dom元素,对于大的DOM更改，使用innerHTML要比使用 标准的DOM方法 创建同样的DOM结构快得多。<br>2.循环次数确定的时候可以展开循环，不使用循环，如果要使用循环，就使用简直迭代效率会更高一些</p>
<h2 id="3-sublime插件"><a href="#3-sublime插件" class="headerlink" title="3 sublime插件"></a>3 sublime插件</h2><ol>
<li>Markdown preview（渲染markdown成html）</li>
<li>Emmet（写html）</li>
<li>SideBarEnhancements（增强右键）</li>
<li>TortoiseSvn（SVN插件）</li>
<li>ColorPicker(调起颜色盒)</li>
<li><a href="https://github.com/miusuncle/HiveOpener" target="_blank" rel="noopener">HiveOpener</a>在sb中打开文件、文件夹 等</li>
<li>SublimeLinter 用来检查语法错误的插件，对于写代码来说非常重要，可以避 免很多低级错误 。</li>
<li><a href="http://blog.sina.com.cn/s/blog_753e6cc90101jdcy.html" target="_blank" rel="noopener">SublimeLinter-jshint</a> 对应的js语法检查(必须有node环境 npm install jshint -g 然后再在sublime下装sublimelinter 再装sublimelinter-jshint)</li>
<li>less 高亮less语法，less2css 编写less，保存时自动编译为css</li>
<li>DocBlockr 注释生成器</li>
<li><a href="http://zhuanlan.zhihu.com/jimliu/20106789" target="_blank" rel="noopener">宝玉专栏</a></li>
<li><a href="http://code.kpman.cc/2014/10/14/sublime-text-3-mac-%E6%8C%87%E5%8D%97/" target="_blank" rel="noopener">sublime在mac下的指南</a></li>
</ol>
<h2 id="4-wamp配置"><a href="#4-wamp配置" class="headerlink" title="4 wamp配置"></a>4 wamp配置</h2><ol>
<li>首先修改端口 因为默认的是80端口，一般都被占用了，然后是修改phpmyadmin之类的默认路径</li>
<li>错误日志配置 apache的http.conf 每天生成一个日志<br>ErrorLog “|bin/rotatelogs.exe -l c:/wamp/logs/apache_error-%Y-%m-%d.log 86400”<br>CustomLog “|bin/rotatelogs.exe -l c:/wamp/logs/access-%Y-%m-%d.log 86400” common</li>
<li>wampserver 2.5 添加alias后无法访问的问题:在相应的alias文件添加Require all granted，其中granted是已授权的意思。这条命令是apache2.4新增加的，用以替代allow,deny以及order指令。</li>
</ol>
<h2 id="5-红杏插件"><a href="#5-红杏插件" class="headerlink" title="5 红杏插件"></a>5 <a href="http://honx.in/_VZ9YLSZDj1ZTCZee" target="_blank" rel="noopener">红杏插件</a></h2><ol>
<li>scp的时候不用输入密码：（没有.ssh目录的时候，先新建这个目录）</li>
<li><a href="http://saadiya.blog.51cto.com/2805761/796579" target="_blank" rel="noopener">linux-如何建立scp安全的信任关系</a></li>
</ol>
<h2 id="6-svg"><a href="#6-svg" class="headerlink" title="6 svg"></a>6 svg</h2><ol>
<li>g元素不支持定位 需要定位是要使用transform=”translate(x,y)”</li>
<li>rect元素不支持嵌套 可以用g元素来包裹、组织元素</li>
</ol>
<h2 id="7-this陷阱"><a href="#7-this陷阱" class="headerlink" title="7 this陷阱"></a>7 <a href="http://segmentfault.com/a/1190000002640298#articleHeader4" target="_blank" rel="noopener">this陷阱</a></h2><h3 id="8-屏幕尺寸"><a href="#8-屏幕尺寸" class="headerlink" title="8 屏幕尺寸"></a>8 屏幕尺寸</h3><p>webview下<br>小米3 360<em>572<br>红米note 360</em>567<br>iphone4s 320<em>416<br>iphone5 320</em>504<br>iphone6 375<em>603<br>iphone6p 414</em>672<br>mx4 384<em>519<br>oppo 320</em>459</p>
<h3 id="9-移动端开发meta标签"><a href="#9-移动端开发meta标签" class="headerlink" title="9 移动端开发meta标签"></a>9 移动端开发meta标签</h3><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">!</span></span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"webkit"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--IE=edge告诉IE使用最新的引擎渲染网页 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=Edge"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- Allow web app to be run in full-screen mode. --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- Make the app title different than the page title. --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-title"</span> <span class="attr">content</span>=<span class="string">"iOS 8 web app"</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- Configure the status bar. --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span> <span class="attr">content</span>=<span class="string">"black"</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- Set the viewport. --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"initial-scale=1"</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="10-TCP-IP协议"><a href="#10-TCP-IP协议" class="headerlink" title="10 TCP/IP协议"></a>10 TCP/IP协议</h3><p>在 TCP/IP 中包含一系列用于处理数据通信的协议：<br>TCP (传输控制协议) - 应用程序之间通信<br>UDP (用户数据包协议) - 应用程序之间的简单通信<br>IP (网际协议) - 计算机之间的通信<br>ICMP (因特网消息控制协议) - 针对错误和状态<br>DHCP (动态主机配置协议) - 针对动态寻址<br>TCP/IP由四个层次组成：网络接口层、网络层、传输层、应用层。<br>1）网络接口层：<br>数据链路层是负责接收IP数据包并通过网络发送，或者从网络上接收物理帧，抽出IP数据包，交给IP层。<br>ARP是正向地址解析协议，通过已知的IP，寻找对应主机的MAC地址。<br>RARP是反向地址解析协议，通过MAC地址确定IP地址。比如无盘工作站还有DHCP服务。<br>2）网络层<br>负责相邻计算机之间的通信。<br>网络层包括：IP(Internet Protocol）协议、ICMP(Internet Control Message Protocol)<br>控制报文协议、ARP(Address Resolution Protocol）地址转换协议、RARP(Reverse ARP)反向地址转换协议。Ping命令就是发送ICMP的echo包，通过回送的echo relay进行网络测试。<br>3）传输层<br>提供应用程序间的通信。其功能包括：一、格式化信息流；二、提供可靠传输。为实现后者，传输层协议规定接收端必须发回确认，并且假如分组丢失，必须重新发送，即耳熟能详的“三次握手”过程，从而提供可靠的数据传输。<br>传输层协议主要是：传输控制协议TCP(Transmission Control Protocol）和用户数据报协议UDP(User Datagram protocol）。<br>4）应用层<br>向用户提供一组常用的应用程序，比如电子邮件、文件传输访问、远程登录等。远程登录TELNET使用TELNET协议提供在网络其它主机上注册的接口。TELNET会话提供了基于字符的虚拟终端。文件传输访问FTP使用FTP协议来提供网络内机器间的文件拷贝功能。<br>应用层协议主要包括如下几个：FTP、TELNET、DNS、SMTP、NFS、HTTP。</p>
<h3 id="11-HTTP请求头"><a href="#11-HTTP请求头" class="headerlink" title="11 HTTP请求头"></a>11 HTTP请求头</h3><p>http请求由三部分组成，分别是：请求行、消息报头、请求正文<br><a href="http://tools.jb51.net/table/http_header" target="_blank" rel="noopener">请求头信息对照表</a>;<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line"><span class="section">Accept:*/*</span></span><br><span class="line"><span class="section">Accept-Encoding:gzip, deflate, sdch</span></span><br><span class="line"><span class="section">Accept-Language:zh-CN,zh;q=0.8,en;q=0.6</span></span><br><span class="line"><span class="section">Cache-Control:max-age=0 //"no-cache" "no-store"</span></span><br><span class="line"><span class="section">Connection:keep-alive</span></span><br><span class="line"><span class="section">Cookie:cna=Kzl1Dm22JU0CASp4SmGBdvPA</span></span><br><span class="line"><span class="section">Host:s24.cnzz.com</span></span><br><span class="line"><span class="section">If-Modified-Since:Tue, 08 Sep 2015 08:37:47 GMT</span></span><br><span class="line"><span class="section">Referer:http://botao900422.blog.51cto.com/4747129/1557599</span></span><br><span class="line"><span class="section">User-Agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.85 Safari/537.36</span></span><br></pre></td></tr></table></figure></p>
<h3 id="12-号运算符"><a href="#12-号运算符" class="headerlink" title="12 +号运算符"></a>12 +号运算符</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">console.<span class="built_in">log</span>(+<span class="string">"2"</span>);  <span class="comment">//结果是2</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="number">1</span>+ +<span class="string">"2"</span>+<span class="string">"2"</span>); <span class="comment">//结果是32   +"2" ==&gt;2</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="number">1</span>+<span class="string">"2"</span>+<span class="string">"2"</span>);  <span class="comment">//结果是122</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="string">"A"</span>- <span class="string">"B"</span>+<span class="string">"2"</span>);  <span class="comment">//NaN</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="string">"A"</span>- <span class="string">"B"</span>+<span class="number">2</span>);    <span class="comment">//NaN</span></span><br></pre></td></tr></table></figure>
<p>###14 childNodes<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="built-in">div</span> id=<span class="string">"box"</span>&gt;</span><br><span class="line">    &lt;<span class="built-in">div</span>&gt;&lt;/<span class="built-in">div</span>&gt;</span><br><span class="line">    &lt;<span class="built-in">div</span>&gt;&lt;/<span class="built-in">div</span>&gt;</span><br><span class="line">    &lt;<span class="built-in">div</span>&gt;&lt;/<span class="built-in">div</span>&gt;</span><br><span class="line">&lt;/<span class="built-in">div</span>&gt;</span><br><span class="line">var a=document.getElementById(<span class="string">"box"</span>);</span><br><span class="line">console.<span class="built-in">log</span>(a.childNodes.length)  <span class="comment">//7   IE9+ chrome firefox 因为换行符也会算做文本节点 IE8-为3</span></span><br></pre></td></tr></table></figure></p>
<p>nodeType=1为元素节点 nodeType=2为属性节点 nodeType=3为文本节点，IE9+ firefox chrome 会把换行符(空白符)也当作文本节点，文本节点的nodeName为”#text”</p>
<h3 id="15常见css缩写语法"><a href="#15常见css缩写语法" class="headerlink" title="15常见css缩写语法"></a>15常见css缩写语法</h3><ol>
<li>盒尺寸，比如margin:top right bottom left。如果某个值缺省，原则是left=right,bottom=top,right=top。</li>
<li>border:width style color</li>
<li>background:color image repeat attachment position</li>
<li>font:style variant weight size height family</li>
</ol>
<h3 id="16-shadowsocks-配置"><a href="#16-shadowsocks-配置" class="headerlink" title="16 shadowsocks 配置"></a>16 shadowsocks 配置</h3><ol>
<li>在代理服务器上安装服务端<ul>
<li>安装pip(如果没有，有的话就不需要安装了) apt-get install python-pip</li>
<li>安装shadowsocks pip install shadowsocks</li>
<li>运行 ssserver -p 8090 -k password -m rc4-md5 -d start</li>
</ul>
</li>
<li>安装客户端 <a href="http://pan.baidu.com/s/1o6KF4vw" target="_blank" rel="noopener">百度网盘</a></li>
</ol>
<h3 id="17-vscode配置"><a href="#17-vscode配置" class="headerlink" title="17 vscode配置"></a>17 vscode配置</h3><ol>
<li>字体 Monaco 18号</li>
<li>“editor.wrappingColumn”: 110</li>
<li>扩展 <ul>
<li>Debugger for Chrome</li>
<li>Eslint</li>
<li>JavaScript (ES6) code snippets</li>
<li>Document This (自动jsdoc)</li>
<li>Visual Studio Code Settings Sync (同步设置)</li>
</ul>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jquery源码学习1]]></title>
      <url>http://ldllidonglin.github.io/blog/2015/06/22/2015-05-23-jQuery%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A01/</url>
      <content type="html"><![CDATA[<p><em>tips:</em> 这次看的源码是jQuery2.0.3版本,2.x版本是不支持IE6,7,8<br><a href="http://www.asp.net/ajax/cdn#jQuery_Releases_on_the_CDN_0" target="_blank" rel="noopener">各个历史版本下载地址</a></p>
<h1 id="jQuery源码"><a href="#jQuery源码" class="headerlink" title="jQuery源码"></a>jQuery源码</h1><h2 id="总体代码框架"><a href="#总体代码框架" class="headerlink" title="总体代码框架"></a>总体代码框架</h2><ol>
<li><p>(21,94)定义了一些变量和函数jQuery=function(){};</p>
</li>
<li><p>(96,283) 给JQ对象，添加一些方法和属性。</p>
</li>
</ol>
<a id="more"></a>
<ol start="3">
<li><p>(285,347) extend:JQ的继承方法。</p>
</li>
<li><p>(349,817) jQuery.extend();扩展一些工具方法。</p>
</li>
<li><p>(877,2856) Sizzle：复杂选择器的实现。</p>
</li>
<li><p>(2880,3042) Callbacks:回调对象，对函数的统一管理。</p>
</li>
<li><p>(3043,3183) Deferred:延迟对象，对异步的统一管理。</p>
</li>
<li><p>(3184,3295) support:功能检测。</p>
</li>
<li><p>(3308，3652) data();数据缓存。</p>
</li>
<li><p>(3653，3797) queue():队列管理。</p>
</li>
<li><p>(3803,4299) attr(),prop(),val(),addClass()类似的方法。对元素属性的操作</p>
</li>
<li><p>(4300,5128) on() trigger(),事件操作的相关方法</p>
</li>
<li><p>(5140,6057) DOM操作，添加、删除、获取、包装、DOM筛选。</p>
</li>
<li><p>(6058,6620) css():样式的操作</p>
</li>
<li><p>(6621,7854) 提交的数据和ajax():ajax() load() getJson()</p>
</li>
<li><p>(7855,8584) animate() 运动 hide() show()</p>
</li>
<li><p>(8585,8792) offset() 位置和尺寸的方法</p>
</li>
<li><p>(8804,8821) JQ支持模块化的模式</p>
</li>
<li><p>(8826) window.jQuery=window.$=jQuery;</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 自学 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jquery </tag>
            
            <tag> 源码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[自适应可视化]]></title>
      <url>http://ldllidonglin.github.io/blog/2015/06/15/2015-06-15-%E8%87%AA%E9%80%82%E5%BA%94%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
      <content type="html"><![CDATA[<h2 id="自适应地图主要涉及四个方面的问题："><a href="#自适应地图主要涉及四个方面的问题：" class="headerlink" title="自适应地图主要涉及四个方面的问题："></a>自适应地图主要涉及四个方面的问题：</h2><p>1）地图用户自适应（读图能力、知识水平、教育、喜好）<br>2）地图目的自适应（包括任务、空间扩展、要素相关性）<br>3）制图条件自适应（包括位置、时间、方位、环境）<br>4）地图显示媒介自适应（显示大小与参数、传输率、交互性、软件能力。<br><a id="more"></a></p>
<h2 id="专题地图"><a href="#专题地图" class="headerlink" title="专题地图"></a>专题地图</h2><h3 id="1-地图保存部分"><a href="#1-地图保存部分" class="headerlink" title="1)地图保存部分"></a>1)地图保存部分</h3><p>需要保存的字段</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>type</td>
<td>地图类型</td>
</tr>
<tr>
<td>color</td>
<td>颜色</td>
</tr>
<tr>
<td>attributes</td>
<td>数据带来的属性</td>
</tr>
<tr>
<td>fileds</td>
<td>最终绘制所使用的字段</td>
</tr>
<tr>
<td>maxHeight</td>
<td>柱状图柱体符号最高值</td>
</tr>
<tr>
<td>maxWidth</td>
<td>柱状图柱体符号最宽值</td>
</tr>
<tr>
<td>radius</td>
<td>ring pie rank classify图的半径</td>
</tr>
<tr>
<td>rankField</td>
<td>rank图符号绘制所用的字段</td>
</tr>
<tr>
<td>gradeField</td>
<td>grade图符号绘制所用的字段</td>
</tr>
</tbody>
</table>
<h3 id="2-无底图的图，比如pie、ring、bar，应该设置一个tag标识是否添加底图，默认值为true，添加一个纯色底图，是为了保存输出的时候能看出底图轮廓，在需要和别的底图混搭的时候，可以设置为false。"><a href="#2-无底图的图，比如pie、ring、bar，应该设置一个tag标识是否添加底图，默认值为true，添加一个纯色底图，是为了保存输出的时候能看出底图轮廓，在需要和别的底图混搭的时候，可以设置为false。" class="headerlink" title="2)无底图的图，比如pie、ring、bar，应该设置一个tag标识是否添加底图，默认值为true，添加一个纯色底图，是为了保存输出的时候能看出底图轮廓，在需要和别的底图混搭的时候，可以设置为false。"></a>2)无底图的图，比如pie、ring、bar，应该设置一个tag标识是否添加底图，默认值为true，添加一个纯色底图，是为了保存输出的时候能看出底图轮廓，在需要和别的底图混搭的时候，可以设置为false。</h3><h3 id="3-待改进的地方"><a href="#3-待改进的地方" class="headerlink" title="3)待改进的地方"></a>3)待改进的地方</h3><ol>
<li>应该添加一个地图title，同时也应该在图上体现图名，并且应该可更改字体、颜色、大小<br>tag也可以考虑增加.</li>
<li>数据也可以添加tag，目前的名称是提供的表格名字，后期可以提供用户修改</li>
<li>可以添加一种标注图，用户只需提供地名表格，后端geocode后标注在地图上，展现的时候在地图边添加地图和地图上的标注的对照，提供拖拽功能让用户修改标注位置。这样的话就得依赖在线底图。</li>
<li>实现在线底图也能保存在图片中。</li>
<li>数据的详情页，应该可以编辑、保存</li>
<li>支持excel格式数据</li>
</ol>
<h2 id="空气质量检测数据数据源"><a href="#空气质量检测数据数据源" class="headerlink" title="空气质量检测数据数据源"></a>空气质量检测数据数据源</h2><table>
<thead>
<tr>
<th>数据源</th>
<th>数据状况</th>
<th>尺度</th>
<th>描述说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://pm25.in" target="_blank" rel="noopener">pm25.in</a></td>
<td>实时api</td>
<td>城市-检测站点</td>
<td>API数据最详细，有检测站点的7个指标的数据。但是有的小时数据会缺失,基本每天都有几个小时的数据会缺失，不知道为什么，正常更新的话在7点45左右可以获取到7点钟发布的数据</td>
</tr>
<tr>
<td><a href="http://106.37.208.233:20035/" target="_blank" rel="noopener">中国环境监测总站</a></td>
<td>实时</td>
<td>城市-检测站点</td>
<td>这个是用silverlight开发的，所以要看数据电脑得安装silverlight，里面有每小时的全国监测站点的6个指标的数据。</td>
</tr>
<tr>
<td><a href="http://www.tianqihoubao.com/aqi/" target="_blank" rel="noopener">天气后报</a></td>
<td>实时+历史</td>
<td>实时有检测站点,历史只有城市级别</td>
<td>有实时的检测站点级别的数据，但是我看数据是从pm25.in来的,更新和pm25.in有一样的问题，可以从这获取按天的、城市级别的 <strong>历史数据</strong>，有6个指标，就是没有o3的数据，但是城市数量有点少，2014年只有150+个城市</td>
</tr>
<tr>
<td><a href="http://www.cnpm25.cn/" target="_blank" rel="noopener">pm25和空气质量指数实时查询</a></td>
<td>实时</td>
<td>站点</td>
<td>可以得到各个站点的实时数据,但是只有aqi、pm2.5、pm10三个指标，而且aqi数据并不是和环保部上的一致，好像是直接算的各个站点的平均值。</td>
</tr>
<tr>
<td><a href="http://datacenter.mep.gov.cn/report/air_daily/airDairyCityHour.jsp" target="_blank" rel="noopener">环保部官方数据</a></td>
<td>实时</td>
<td>城市-站点</td>
<td>有小时、天的367个城市的AQI指数、首要污染物数据。</td>
</tr>
<tr>
<td><a href="http://aqicn.org/city/beijing/cn" target="_blank" rel="noopener">世界范围内空气质量实时检测数据</a></td>
<td>实时</td>
<td>城市-检测站点</td>
<td>有检测站点的数据，还有像气压、湿度等气象数据。但是上面的数据是包括了美国大使馆的数据，所以和官方的略有不同。需要用爬虫来收集.</td>
</tr>
<tr>
<td><a href="http://www.pm25s.com/" target="_blank" rel="noopener">pm2.5数据网</a></td>
<td>实时+部分历史</td>
<td>城市-检测站点</td>
<td>有检测站点级别的每小时的数据，也有历史数据，历史数据是按天和城市级别的，指标有7个，但是只有2014年1-10月的，估计是这个网站没有更新了。</td>
</tr>
<tr>
<td><a href="http://www.aqistudy.cn/historydata/index.php" target="_blank" rel="noopener">PM2.5历史数据</a></td>
<td>历史</td>
<td>城市</td>
<td>数据很全,可以爬取，并且有天气数据可以获取,是目前比较理想的数据源，唯一不足就是没有监测站点的数据和只有190个城市，因为2014年只有190个城市,所以它这里2015年也只有190个城市的数据</td>
</tr>
<tr>
<td><a href="http://www.aqistudy.cn/" target="_blank" rel="noopener">中国空气质量在线检测分析平台</a></td>
<td>实时和历史</td>
<td>城市-检测站点</td>
<td>和<a href="http://www.aqistudy.cn/historydata/index.php" target="_blank" rel="noopener">PM2.5历史数据</a>是同一个团队开发的,但是目前没法爬取</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> 可视化 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 自适应 </tag>
            
            <tag> 可视化 </tag>
            
            <tag> pm2.5 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
